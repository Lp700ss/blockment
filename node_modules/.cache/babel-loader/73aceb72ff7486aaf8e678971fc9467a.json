{"ast":null,"code":"import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport NodeDetailManager from '@toruslabs/fetch-node-details';\nimport { get, setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, BasePostMessageStream, setupMultiplex } from '@toruslabs/openlogin-jrpc';\nimport TorusJs from '@toruslabs/torus.js';\nimport deepmerge from 'lodash.merge';\nimport { ObservableStore, storeAsStream } from '@metamask/obs-store';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport dequal from 'fast-deep-equal';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport createHash from 'create-hash';\nimport { EventEmitter } from 'events';\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  TWITCH: \"twitch\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\"\n};\nconst WALLET_OPENLOGIN_VERIFIER_MAP = {\n  [LOGIN_PROVIDER.GOOGLE]: \"tkey-google\",\n  [LOGIN_PROVIDER.FACEBOOK]: \"tkey-facebook\",\n  [LOGIN_PROVIDER.TWITCH]: \"tkey-twitch\",\n  [LOGIN_PROVIDER.REDDIT]: \"tkey-reddit\",\n  [LOGIN_PROVIDER.DISCORD]: \"tkey-discord\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  BINANCE: \"binance\",\n  TESTING: \"testing\",\n  LRC: \"lrc\",\n  BETA: \"beta\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst paymentProviders$1 = {\n  [PAYMENT_PROVIDER.RAMPNETWORK]: {\n    line1: \"Debit Card/ Apple Pay/ Bank transfer\",\n    line2: \"0.49% - 2.9%\",\n    line3: \"5,000€/purchase, 20,000€/mo\",\n    supportPage: \"https://instant.ramp.network/\",\n    minOrderValue: 50,\n    maxOrderValue: 20000,\n    validCurrencies: [\"GBP\", \"EUR\", \"USD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"BSC_BNB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MOONPAY]: {\n    line1: \"Credit / Debit Card / Apple Pay\",\n    line2: \"4.5% or 5 USD\",\n    line3: \"2,000€/day, 10,000€/mo\",\n    supportPage: \"https://help.moonpay.io/en/\",\n    minOrderValue: 24.99,\n    maxOrderValue: 50000,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\", \"RUB\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"TUSD\", \"USDC\", \"USDT\", \"BNB_BSC\", \"BUSD_BSC\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.WYRE]: {\n    line1: \"Apple Pay/ Debit/ Credit Card\",\n    line2: \"4.9% + 30¢ or 5 USD\",\n    line3: \"$250/day\",\n    supportPage: \"https://support.sendwyre.com/en/\",\n    minOrderValue: 5,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"AUD\", \"CAD\", \"GBP\", \"EUR\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: false,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.XANPOOL]: {\n    line1: \"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow\",\n    line2: \"2.5% buying, 3% selling\",\n    line3: \"$2,500 / day\",\n    supportPage: \"mailto:support@xanpool.com\",\n    minOrderValue: 100,\n    maxOrderValue: 2500,\n    validCurrencies: [\"SGD\", \"HKD\", \"MYR\", \"PHP\", \"INR\", \"VND\", \"THB\", \"IDR\"],\n    validCryptoCurrencies: [\"ETH\", \"USDT\"],\n    includeFees: true,\n    sell: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MERCURYO]: {\n    line1: \"Credit/ Debit Card/ Apple Pay\",\n    line2: \"3.95% or 4 USD\",\n    line3: \"10,000€/day, 25,000€/mo\",\n    supportPage: \"mailto:support@mercuryo.io\",\n    minOrderValue: 30,\n    maxOrderValue: 5000,\n    validCurrencies: [\"USD\", \"EUR\", \"RUB\", \"TRY\", \"GBP\", \"UAH\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"BAT\", \"USDT\", \"OKB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.TRANSAK]: {\n    line1: \"Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)\",\n    line2: \"0.99% - 5.5% or 5 USD\",\n    line3: \"500€/day\",\n    supportPage: \"https://support.transak.com/hc/en-US\",\n    minOrderValue: 20,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: true,\n    enforceMax: false\n  }\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  paymentProviders: paymentProviders$1,\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nconst runOnLoad = fn => new Promise((resolve, reject) => {\n  if (window.document.body != null) {\n    Promise.resolve(fn()).then(resolve).catch(reject);\n  } else {\n    window.document.addEventListener(\"DOMContentLoaded\", () => {\n      Promise.resolve(fn()).then(resolve).catch(reject);\n    });\n  }\n});\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nconst handleStream = (handle, eventName, handler) => {\n  const handlerWrapper = chunk => {\n    handler(chunk);\n    handle.removeListener(eventName, handlerWrapper);\n  };\n\n  handle.on(eventName, handlerWrapper);\n};\n\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nvar log = loglevel.getLogger(\"torus-embed\");\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    sendSiteMetadata: () => \"Torus: Failed to send site metadata. This is an internal error, please report this bug.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners, shouldSendMetadata) => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \", shouldSendMetadata: \").concat(shouldSendMetadata, \" }\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {\n    // deprecated methods\n    enableDeprecation: 'Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. ' + 'Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',\n    sendDeprecation: 'Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future.' + ' Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n    events: {\n      close: 'Torus: The event \"close\" is deprecated and may be removed in the future. Please use \"disconnect\" instead.' + \"\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",\n      data: 'Torus: The event \"data\" is deprecated and will be removed in the future.' + 'Use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',\n      networkChanged: 'Torus: The event \"networkChanged\" is deprecated and may be removed in the future.' + ' Please use \"chainChanged\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n      notification: 'Torus: The event \"notification\" is deprecated and may be removed in the future. ' + 'Please use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'\n    },\n    publicConfigStore: 'Torus: The property \"publicConfigStore\" is deprecated and WILL be removed in the future.'\n  }\n};\nconst {\n  paymentProviders\n} = configuration;\n\nconst validatePaymentProvider = (provider, params) => {\n  const errors = {};\n\n  if (!provider) {\n    return {\n      errors,\n      isValid: true\n    };\n  }\n\n  if (provider && !paymentProviders[provider]) {\n    errors.provider = \"Invalid Provider\";\n    return {\n      errors,\n      isValid: Object.keys(errors).length === 0\n    };\n  }\n\n  const selectedProvider = paymentProviders[provider];\n  const selectedParams = params || {}; // set default values\n  // if (!selectedParams.selectedCurrency) [selectedParams.selectedCurrency] = selectedProvider.validCurrencies\n  // if (!selectedParams.fiatValue) selectedParams.fiatValue = selectedProvider.minOrderValue\n  // if (!selectedParams.selectedCryptoCurrency) [selectedParams.selectedCryptoCurrency] = selectedProvider.validCryptoCurrencies\n  // validations\n\n  if (selectedParams.fiatValue) {\n    const requestedOrderAmount = +parseFloat(selectedParams.fiatValue.toString()) || 0;\n    if (requestedOrderAmount < selectedProvider.minOrderValue) errors.fiatValue = \"Requested amount is lower than supported\";\n    if (requestedOrderAmount > selectedProvider.maxOrderValue && selectedProvider.enforceMax) errors.fiatValue = \"Requested amount is higher than supported\";\n  }\n\n  if (selectedParams.selectedCurrency && !selectedProvider.validCurrencies.includes(selectedParams.selectedCurrency)) {\n    errors.selectedCurrency = \"Unsupported currency\";\n  }\n\n  if (selectedParams.selectedCryptoCurrency && !selectedProvider.validCryptoCurrencies.includes(selectedParams.selectedCryptoCurrency)) {\n    errors.selectedCryptoCurrency = \"Unsupported cryptoCurrency\";\n  }\n\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n}; // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"MetaMask - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n} // resolve response.result or response, reject errors\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"MetaMask: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nconst getPreopenInstanceId = () => Math.random().toString(36).slice(2);\n\nconst getTorusUrl = async (buildEnv, integrity) => {\n  let torusUrl;\n  let logLevel; // Do not change this line\n\n  const version = \"1.21.0\";\n  let versionUsed = integrity.version || version;\n\n  try {\n    if ((buildEnv === \"binance\" || buildEnv === \"production\") && !integrity.version) {\n      let response;\n      if (!configuration.prodTorusUrl) response = await get(\"\".concat(configuration.api, \"/latestversion?name=@toruslabs/torus-embed&version=\").concat(version), {}, {\n        useAPIKey: true\n      });else response = {\n        data: configuration.prodTorusUrl\n      };\n      versionUsed = response.data; // eslint-disable-next-line require-atomic-updates\n\n      configuration.prodTorusUrl = response.data;\n    }\n  } catch (error) {\n    log.error(error, \"unable to fetch latest version\");\n  }\n\n  log.info(\"version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"binance\":\n      torusUrl = \"https://binance.tor.us/v\".concat(versionUsed);\n      logLevel = \"info\";\n      break;\n\n    case \"testing\":\n      torusUrl = \"https://testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"lrc\":\n      torusUrl = \"https://lrc.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"beta\":\n      torusUrl = \"https://beta.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:4050\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://app.tor.us/v\".concat(versionUsed);\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\n\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nconst EMITTED_NOTIFICATIONS = [\"eth_subscription\" // per eth-json-rpc-filters/subscriptionManager\n];\n\nconst NOOP = () => {// empty function\n};\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375\";\nconst FEATURES_DEFAULT_WALLET_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315\";\nconst FEATURES_CONFIRM_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450\";\n\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\nfunction getPopupFeatures() {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const w = 1200;\n  const h = 700;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nSafeEventEmitter.defaultMaxListeners = 100; // resolve response.result, reject errors\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      return reject(error || response.error);\n    }\n\n    return !unwrapResult || Array.isArray(response) ? resolve(response) : resolve(response.result);\n  };\n};\n\nclass TorusInpageProvider extends SafeEventEmitter {\n  /**\n   * The chain ID of the currently connected Ethereum chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Ethereum address.\n   * If null, MetaMask is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  constructor(connectionStream) {\n    let {\n      maxEventListeners = 100,\n      shouldSendMetadata = true,\n      jsonRpcStreamName = \"provider\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"networkVersion\", void 0);\n\n    _defineProperty(this, \"shouldSendMetadata\", void 0);\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_publicConfigStore\", void 0);\n\n    _defineProperty(this, \"tryPreopenHandle\", void 0);\n\n    _defineProperty(this, \"enable\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_jsonRpcConnection\", void 0);\n\n    _defineProperty(this, \"_sentWarnings\", {\n      // methods\n      enable: false,\n      experimentalMethods: false,\n      send: false,\n      publicConfigStore: false,\n      // events\n      events: {\n        close: false,\n        data: false,\n        networkChanged: false,\n        notification: false\n      }\n    });\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners); // private state\n\n    this._state = _objectSpread$1({}, TorusInpageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.networkVersion = null;\n    this.chainId = null;\n    this.shouldSendMetadata = shouldSendMetadata; // bind functions (to prevent e.g. web3@1.x from making unbound calls)\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._sendSync = this._sendSync.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"MetaMask\")); // subscribe to metamask public config (one-way)\n\n    this._publicConfigStore = new ObservableStore({\n      storageKey: \"Metamask-Config\"\n    }); // handle isUnlocked changes, and chainChanged and networkChanged events\n    // this._publicConfigStore.subscribe((stringifiedState) => {\n    //   // This is because we are using store as string\n    //   const state = JSON.parse(stringifiedState as unknown as string);\n    //   if (\"isUnlocked\" in state && state.isUnlocked !== this._state.isUnlocked) {\n    //     this._state.isUnlocked = state.isUnlocked;\n    //     if (!this._state.isUnlocked) {\n    //       // accounts are never exposed when the extension is locked\n    //       this._handleAccountsChanged([]);\n    //     } else {\n    //       // this will get the exposed accounts, if any\n    //       try {\n    //         this._rpcRequest(\n    //           { method: \"eth_accounts\", params: [] },\n    //           NOOP,\n    //           true // indicating that eth_accounts _should_ update accounts\n    //         );\n    //       } catch (_) {\n    //         // Swallow error\n    //       }\n    //     }\n    //   }\n    //   if (\"selectedAddress\" in state && this.selectedAddress !== state.selectedAddress) {\n    //     try {\n    //       this._rpcRequest(\n    //         { method: \"eth_accounts\", params: [] },\n    //         NOOP,\n    //         true // indicating that eth_accounts _should_ update accounts\n    //       );\n    //     } catch (_) {\n    //       // Swallow error\n    //     }\n    //   }\n    //   // Emit chainChanged event on chain change\n    //   if (\"chainId\" in state && state.chainId !== this.chainId) {\n    //     this.chainId = state.chainId || null;\n    //     this.emit(\"chainChanged\", this.chainId);\n    //     // indicate that we've connected, for EIP-1193 compliance\n    //     // we do this here so that iframe can initialize\n    //     if (!this._state.hasEmittedConnection) {\n    //       this._handleConnect(this.chainId);\n    //       this._state.hasEmittedConnection = true;\n    //     }\n    //   }\n    //   // Emit networkChanged event on network change\n    //   if (\"networkVersion\" in state && state.networkVersion !== this.networkVersion) {\n    //     this.networkVersion = state.networkVersion || null;\n    //     this.emit(\"networkChanged\", this.networkVersion);\n    //   }\n    // });\n\n    pump(mux.createStream(\"publicConfig\"), storeAsStream(this._publicConfigStore), // RPC requests should still work if only this stream fails\n    logStreamDisconnectWarning.bind(this, \"MetaMask PublicConfigStore\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    }); // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine; // json rpc notification listener\n\n    jsonRpcConnection.events.on(\"notification\", payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === \"wallet_accountsChanged\") {\n        this._handleAccountsChanged(params);\n      } else if (method === \"wallet_unlockStateChanged\") {\n        this._handleUnlockStateChanged(params);\n      } else if (method === \"wallet_chainChanged\") {\n        this._handleChainChanged(params);\n      } else if (EMITTED_NOTIFICATIONS.includes(payload.method)) {\n        // EIP 1193 subscriptions, per eth-json-rpc-filters/subscriptionManager\n        this.emit(\"data\", payload); // deprecated\n\n        this.emit(\"notification\", params.result);\n        this.emit(\"message\", {\n          type: method,\n          data: params\n        });\n      } // Backward compatibility for older non EIP 1193 subscriptions\n      // this.emit('data', null, payload)\n\n    });\n  }\n\n  get publicConfigStore() {\n    if (!this._sentWarnings.publicConfigStore) {\n      log.warn(messages.warnings.publicConfigStore);\n      this._sentWarnings.publicConfigStore = true;\n    }\n\n    return this._publicConfigStore;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param args - The RPC request arguments.\n   * @returns A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param cb - The callback function.\n   */\n\n\n  sendAsync(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   *   addListener, on, once, prependListener, prependOnceListener\n   */\n\n\n  addListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.on(eventName, listener);\n  }\n\n  once(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependOnceListener(eventName, listener);\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked,\n        networkVersion\n      } = await this.request({\n        method: \"wallet_getProviderState\"\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId,\n        networkVersion\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The consumer's callback.\n   * @param isInternal - false - Whether the request is internal.\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"eth_accounts\" || _payload.method === \"eth_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"eth_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryPreopenHandle(_payload, cb);\n  }\n\n  send(methodOrPayload, callbackOrArgs) {\n    if (!this._sentWarnings.send) {\n      log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest({\n            method: methodOrPayload,\n            params: callbackOrArgs\n          }, getRpcPromiseCallback(resolve, reject, false));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n      return this._rpcRequest(methodOrPayload, callbackOrArgs);\n    }\n\n    return this._sendSync(methodOrPayload);\n  }\n  /**\n   * DEPRECATED.\n   * Internal backwards compatibility method, used in send.\n   */\n\n\n  _sendSync(payload) {\n    let result;\n\n    switch (payload.method) {\n      case \"eth_accounts\":\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case \"eth_coinbase\":\n        result = this.selectedAddress || null;\n        break;\n\n      case \"eth_uninstallFilter\":\n        this._rpcRequest(payload, NOOP);\n\n        result = true;\n        break;\n\n      case \"net_version\":\n        result = this.networkVersion || null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result\n    };\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits MetaMaskInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits MetaMaskInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits MetamaskInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"MetaMask: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"MetaMask: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before eth_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('MetaMask: \"eth_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits MetamaskInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId,\n      networkVersion\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId || !networkVersion) {\n      log.error(\"MetaMask: Received invalid network parameters. Please report this bug.\", {\n        chainId,\n        networkVersion\n      });\n      return;\n    }\n\n    if (networkVersion === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   */\n\n\n  _warnOfDeprecation(eventName) {\n    if (this._sentWarnings.events[eventName] === false) {\n      log.warn(messages.warnings.events[eventName]);\n      this._sentWarnings.events[eventName] = true;\n    }\n  }\n\n}\n\n_defineProperty(TorusInpageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\nconst defaults = options => ({\n  algorithms: options.algorithms || [\"sha256\"],\n  delimiter: options.delimiter || \" \",\n  full: options.full || false\n}); // Generate list of hashes\n\n\nconst hashes = (options, data) => {\n  const internalHashes = {};\n  options.algorithms.forEach(algorithm => {\n    internalHashes[algorithm] = createHash(algorithm).update(data, \"utf8\").digest(\"base64\");\n  });\n  return internalHashes;\n}; // Build an integrity string\n\n\nconst integrity = (options, sri) => {\n  let output = \"\"; // Hash list\n\n  output += Object.keys(sri.hashes).map(algorithm => \"\".concat(algorithm, \"-\").concat(sri.hashes[algorithm])).join(options.delimiter);\n  return output;\n};\n\nconst main = (options, data) => {\n  // Defaults\n  const finalOptions = defaults(options);\n  const sri = {\n    hashes: hashes(finalOptions, data),\n    integrity: undefined\n  };\n  sri.integrity = integrity(finalOptions, sri);\n  return finalOptions.full ? sri : sri.integrity;\n};\n\nclass PopupHandler extends EventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  const {\n    document\n  } = window; // Use the site's favicon if it exists\n\n  let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  } // Search through available icons in no particular order\n\n\n  icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  }\n\n  return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n/**\n * Sends site metadata over an RPC request.\n */\n\n\nasync function sendSiteMetadata(engine) {\n  try {\n    const domainMetadata = await getSiteMetadata(); // call engine.handle directly to avoid normal RPC request handling\n\n    engine.handle({\n      jsonrpc: \"2.0\",\n      id: getPreopenInstanceId(),\n      method: \"wallet_sendDomainMetadata\",\n      params: domainMetadata\n    }, NOOP);\n  } catch (error) {\n    log.error({\n      message: messages.errors.sendSiteMetadata(),\n      originalError: error\n    });\n  }\n}\n\nconst _excluded = [\"host\", \"chainId\", \"networkName\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst defaultVerifiers = {\n  [LOGIN_PROVIDER.GOOGLE]: true,\n  [LOGIN_PROVIDER.FACEBOOK]: true,\n  [LOGIN_PROVIDER.REDDIT]: true,\n  [LOGIN_PROVIDER.TWITCH]: true,\n  [LOGIN_PROVIDER.DISCORD]: true\n};\nconst iframeIntegrity = \"sha384-I1qqxsIO3trXzTO78PZoXvNamECKTo3uCnztKxjV0MmFWtmZY3uBpnJlhO7z/WBw\";\nconst expectedCacheControlHeader = \"max-age=3600\";\nconst UNSAFE_METHODS = [\"eth_sendTransaction\", \"eth_signTypedData\", \"eth_signTypedData_v3\", \"eth_signTypedData_v4\", \"personal_sign\", \"eth_getEncryptionPublicKey\", \"eth_decrypt\"];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\", {\n      check: false,\n      hash: iframeIntegrity,\n      version: \"\"\n    });\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/popup\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      modalZIndex = 99999,\n      apiKey = \"torus-default\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"buttonPosition\", BUTTON_POSITION.BOTTOM_LEFT);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    _defineProperty(this, \"isLoggedIn\", void 0);\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusWidgetVisibility\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"nodeDetailManager\", void 0);\n\n    _defineProperty(this, \"torusJs\", void 0);\n\n    _defineProperty(this, \"apiKey\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"isIframeFullScreen\", void 0);\n\n    _defineProperty(this, \"whiteLabel\", void 0);\n\n    _defineProperty(this, \"requestedVerifier\", void 0);\n\n    _defineProperty(this, \"currentVerifier\", void 0);\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"ethereum\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationMux\", void 0);\n\n    _defineProperty(this, \"isLoginCallback\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"paymentProviders\", configuration.paymentProviders);\n\n    _defineProperty(this, \"loginHint\", \"\");\n\n    _defineProperty(this, \"useWalletConnect\", void 0);\n\n    this.buttonPosition = buttonPosition;\n    this.torusUrl = \"\";\n    this.isLoggedIn = false; // ethereum.enable working\n\n    this.isInitialized = false; // init done\n\n    this.torusWidgetVisibility = true;\n    this.requestedVerifier = \"\";\n    this.currentVerifier = \"\";\n    this.nodeDetailManager = new NodeDetailManager();\n    this.torusJs = new TorusJs({\n      metadataHost: \"https://metadata.tor.us\",\n      allowHost: \"https://signer.tor.us/api/allow\"\n    });\n    this.apiKey = apiKey;\n    TorusJs.setAPIKey(apiKey);\n    setAPIKey(apiKey);\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.isIframeFullScreen = false;\n    this.dappStorageKey = \"\";\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      // deprecated: use loginConfig instead\n      enabledVerifiers = defaultVerifiers,\n      network = {\n        host: \"mainnet\",\n        chainId: null,\n        networkName: \"\",\n        blockExplorer: \"\",\n        ticker: \"\",\n        tickerName: \"\"\n      },\n      loginConfig = {},\n      showTorusButton = true,\n      integrity = {\n        check: false,\n        hash: iframeIntegrity,\n        version: \"\"\n      },\n      whiteLabel,\n      skipTKey = false,\n      useLocalStorage = false,\n      useWalletConnect = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv, integrity);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    this.whiteLabel = whiteLabel;\n    this.useWalletConnect = useWalletConnect;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    this.torusWidgetVisibility = showTorusButton;\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getPreopenInstanceId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"popup\";else torusIframeUrl.pathname += \"/popup\";\n\n    if (dappStorageKey) {\n      torusIframeUrl.hash = \"#dappStorageKey=\".concat(dappStorageKey);\n    } // Iframe code\n\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        allow=\".concat(useWalletConnect ? \"camera\" : \"\", \"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\").concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex, \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement('<div id=\"torusAlertContainer\"></div>');\n    this.torusAlertContainer.style.display = \"none\";\n    this.torusAlertContainer.style.setProperty(\"z-index\", this.alertZIndex.toString());\n    const link = window.document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    link.setAttribute(\"type\", \"text/css\");\n    link.setAttribute(\"href\", \"\".concat(torusUrl, \"/css/widget.css\"));\n    this.styleLink = link;\n    const {\n      defaultLanguage = getUserLanguage(),\n      customTranslations = {}\n    } = this.whiteLabel || {};\n    const mergedTranslations = deepmerge(configuration.translations, customTranslations);\n    const languageTranslations = mergedTranslations[defaultLanguage] || configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n\n    const handleSetup = async () => {\n      await documentReady();\n      return new Promise((resolve, reject) => {\n        this.torusIframe.onload = async () => {\n          // only do this if iframe is not full screen\n          this._setupWeb3();\n\n          const initStream = this.communicationMux.getStream(\"init_stream\");\n          initStream.on(\"data\", chunk => {\n            const {\n              name,\n              data,\n              error\n            } = chunk;\n\n            if (name === \"init_complete\" && data.success) {\n              // resolve promise\n              this.isInitialized = true;\n\n              this._displayIframe(this.isIframeFullScreen);\n\n              resolve(undefined);\n            } else if (error) {\n              reject(new Error(error));\n            }\n          });\n          initStream.write({\n            name: \"init_stream\",\n            data: {\n              enabledVerifiers,\n              loginConfig,\n              whiteLabel: this.whiteLabel,\n              buttonPosition: this.buttonPosition,\n              torusWidgetVisibility: this.torusWidgetVisibility,\n              apiKey: this.apiKey,\n              skipTKey,\n              network\n            }\n          });\n        };\n\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      });\n    };\n\n    if (buildEnv === \"production\" && integrity.check) {\n      // hacky solution to check for iframe integrity\n      const fetchUrl = \"\".concat(torusUrl, \"/popup\");\n      const resp = await fetch(fetchUrl, {\n        cache: \"reload\"\n      });\n\n      if (resp.headers.get(\"Cache-Control\") !== expectedCacheControlHeader) {\n        throw new Error(\"Unexpected Cache-Control headers, got \".concat(resp.headers.get(\"Cache-Control\")));\n      }\n\n      const response = await resp.text();\n      const calculatedIntegrity = main({\n        algorithms: [\"sha384\"]\n      }, response);\n      log.info(calculatedIntegrity, \"integrity\");\n\n      if (calculatedIntegrity === integrity.hash) {\n        await handleSetup();\n      } else {\n        this.clearInit();\n        throw new Error(\"Integrity check failed\");\n      }\n    } else {\n      await handleSetup();\n    }\n\n    return undefined;\n  }\n\n  login() {\n    let {\n      verifier = \"\",\n      login_hint: loginHint = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    this.requestedVerifier = verifier;\n    this.loginHint = loginHint;\n    return this.ethereum.enable();\n  }\n\n  logout() {\n    return new Promise((resolve, reject) => {\n      if (!this.isLoggedIn) {\n        reject(new Error(\"User has not logged in yet\"));\n        return;\n      }\n\n      const logOutStream = this.communicationMux.getStream(\"logout\");\n      logOutStream.write({\n        name: \"logOut\"\n      });\n      const statusStream = this.communicationMux.getStream(\"status\");\n\n      const statusStreamHandler = status => {\n        if (!status.loggedIn) {\n          this.isLoggedIn = false;\n          this.currentVerifier = \"\";\n          this.requestedVerifier = \"\";\n          resolve();\n        } else reject(new Error(\"Some Error Occured\"));\n      };\n\n      handleStream(statusStream, \"data\", statusStreamHandler);\n    });\n  }\n\n  async cleanUp() {\n    if (this.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof HTMLDocument;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.torusWidgetVisibility = false;\n\n    this._sendWidgetVisibilityStatus(false);\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this.torusWidgetVisibility = true;\n\n    this._sendWidgetVisibilityStatus(true);\n\n    this._displayIframe();\n  }\n\n  setProvider() {\n    let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let {\n      host = \"mainnet\",\n      chainId = null,\n      networkName = \"\"\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return new Promise((resolve, reject) => {\n      const providerChangeStream = this.communicationMux.getStream(\"provider_change\");\n\n      const handler = chunk => {\n        const {\n          err,\n          success\n        } = chunk.data;\n        log.info(chunk);\n\n        if (err) {\n          reject(err);\n        } else if (success) {\n          resolve();\n        } else reject(new Error(\"some error occured\"));\n      };\n\n      handleStream(providerChangeStream, \"data\", handler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId, {\n        target: \"_blank\",\n        features: FEATURES_PROVIDER_CHANGE_WINDOW\n      });\n\n      providerChangeStream.write({\n        name: \"show_provider_change\",\n        data: {\n          network: _objectSpread({\n            host,\n            chainId,\n            networkName\n          }, rest),\n          preopenInstanceId,\n          override: false\n        }\n      });\n    });\n  }\n\n  showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const showWalletStream = this.communicationMux.getStream(\"show_wallet\");\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    showWalletStream.write({\n      name: \"show_wallet\",\n      data: {\n        path: finalPath\n      }\n    });\n\n    const showWalletHandler = chunk => {\n      if (chunk.name === \"show_wallet_instance\") {\n        // Let the error propogate up (hence, no try catch)\n        const {\n          instanceId\n        } = chunk.data;\n        const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n        finalUrl.searchParams.append(\"integrity\", \"true\");\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach(x => {\n          finalUrl.searchParams.append(x, params[x]);\n        });\n\n        if (this.dappStorageKey) {\n          finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n        }\n\n        const walletWindow = new PopupHandler({\n          url: finalUrl,\n          features: FEATURES_DEFAULT_WALLET_WINDOW\n        });\n        walletWindow.open();\n      }\n    };\n\n    handleStream(showWalletStream, \"data\", showWalletHandler);\n  }\n\n  async getPublicAddress(_ref2) {\n    let {\n      verifier,\n      verifierId,\n      isExtended = false\n    } = _ref2;\n    if (!configuration.supportedVerifierList.includes(verifier) || !WALLET_OPENLOGIN_VERIFIER_MAP[verifier]) throw new Error(\"Unsupported verifier\");\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({\n      verifier,\n      verifierId\n    });\n    const endpoints = nodeDetails.torusNodeEndpoints;\n    const torusNodePubs = nodeDetails.torusNodePub;\n    const walletVerifier = verifier;\n    const openloginVerifier = WALLET_OPENLOGIN_VERIFIER_MAP[verifier];\n\n    try {\n      const existingV1User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: walletVerifier,\n        verifierId\n      });\n\n      if (existingV1User.typeOfUser === \"v1\") {\n        if (!isExtended) return existingV1User.address;\n        return existingV1User;\n      } // we don't support v2 users with v1 verifiers so get or assign the key for v2 user on v2 `verifier`\n\n\n      const v2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: openloginVerifier,\n        verifierId\n      }, true);\n      if (!isExtended) return v2User.address;\n      return v2User;\n    } catch (error) {\n      if (error !== null && error !== void 0 && error.message.includes(\"Verifier + VerifierID has not yet been assigned\")) {\n        // if user doesn't have key then assign it with v2 verifier\n        const newV2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n          verifier: openloginVerifier,\n          verifierId\n        }, true);\n        if (!isExtended) return newV2User.address;\n        return newV2User;\n      }\n\n      throw error;\n    }\n  }\n\n  getUserInfo(message) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const userInfoAccessStream = this.communicationMux.getStream(\"user_info_access\");\n        userInfoAccessStream.write({\n          name: \"user_info_access_request\"\n        });\n\n        const userInfoAccessHandler = chunk => {\n          const {\n            name,\n            data: {\n              approved,\n              payload,\n              rejected,\n              newRequest\n            }\n          } = chunk;\n\n          if (name === \"user_info_access_response\") {\n            if (approved) {\n              resolve(payload);\n            } else if (rejected) {\n              reject(new Error(\"User rejected the request\"));\n            } else if (newRequest) {\n              const userInfoStream = this.communicationMux.getStream(\"user_info\");\n\n              const userInfoHandler = handlerChunk => {\n                if (handlerChunk.name === \"user_info_response\") {\n                  if (handlerChunk.data.approved) {\n                    resolve(handlerChunk.data.payload);\n                  } else {\n                    reject(new Error(\"User rejected the request\"));\n                  }\n                }\n              };\n\n              handleStream(userInfoStream, \"data\", userInfoHandler);\n              const preopenInstanceId = getPreopenInstanceId();\n\n              this._handleWindow(preopenInstanceId, {\n                target: \"_blank\",\n                features: FEATURES_PROVIDER_CHANGE_WINDOW\n              });\n\n              userInfoStream.write({\n                name: \"user_info_request\",\n                data: {\n                  message,\n                  preopenInstanceId\n                }\n              });\n            }\n          }\n        };\n\n        handleStream(userInfoAccessStream, \"data\", userInfoAccessHandler);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  initiateTopup(provider, params) {\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        const {\n          errors,\n          isValid\n        } = validatePaymentProvider(provider, params);\n\n        if (!isValid) {\n          reject(new Error(JSON.stringify(errors)));\n          return;\n        }\n\n        const topupStream = this.communicationMux.getStream(\"topup\");\n\n        const topupHandler = chunk => {\n          if (chunk.name === \"topup_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(topupStream, \"data\", topupHandler);\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId);\n\n        topupStream.write({\n          name: \"topup_request\",\n          data: {\n            provider,\n            params,\n            preopenInstanceId\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        if (Buffer.from(privateKey, \"hex\").length !== 32) {\n          reject(new Error(\"Invalid private key, Please provide a 32 byte valid secp25k1 private key\"));\n          return;\n        }\n\n        const loginPrivKeyStream = this.communicationMux.getStream(\"login_with_private_key\");\n\n        const loginHandler = chunk => {\n          if (chunk.name === \"login_with_private_key_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(loginPrivKeyStream, \"data\", loginHandler);\n        loginPrivKeyStream.write({\n          name: \"login_with_private_key_request\",\n          data: {\n            privateKey,\n            userInfo\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async showWalletConnectScanner() {\n    if (!this.useWalletConnect) throw new Error(\"Set `useWalletConnect` as true in init function options to use wallet connect scanner\");\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const walletConnectStream = this.communicationMux.getStream(\"wallet_connect_stream\");\n\n        const walletConnectHandler = chunk => {\n          if (chunk.name === \"wallet_connect_stream_res\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n\n            this._displayIframe();\n          }\n        };\n\n        handleStream(walletConnectStream, \"data\", walletConnectHandler);\n        walletConnectStream.write({\n          name: \"wallet_connect_stream_req\"\n        });\n\n        this._displayIframe(true);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  _handleWindow(preopenInstanceId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (preopenInstanceId) {\n      const windowStream = this.communicationMux.getStream(\"window\");\n      const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?preopenInstanceId=\").concat(preopenInstanceId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      const handledWindow = new PopupHandler({\n        url: finalUrl,\n        target,\n        features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(preopenInstanceId, finalUrl.href);\n\n        return;\n      }\n\n      windowStream.write({\n        name: \"opened_window\",\n        data: {\n          preopenInstanceId\n        }\n      });\n\n      const closeHandler = _ref3 => {\n        let {\n          preopenInstanceId: receivedId,\n          close\n        } = _ref3;\n\n        if (receivedId === preopenInstanceId && close) {\n          handledWindow.close();\n          windowStream.removeListener(\"data\", closeHandler);\n        }\n      };\n\n      windowStream.on(\"data\", closeHandler);\n      handledWindow.once(\"close\", () => {\n        windowStream.write({\n          data: {\n            preopenInstanceId,\n            closed: true\n          }\n        });\n        windowStream.removeListener(\"data\", closeHandler);\n      });\n    }\n  }\n\n  _setEmbedWhiteLabel(element) {\n    // Set whitelabel\n    const {\n      theme\n    } = this.whiteLabel || {};\n\n    if (theme) {\n      const {\n        isDark = false,\n        colors = {}\n      } = theme;\n      if (isDark) element.classList.add(\"torus-dark\");\n      if (colors.torusBrand1) element.style.setProperty(\"--torus-brand-1\", colors.torusBrand1);\n      if (colors.torusGray2) element.style.setProperty(\"--torus-gray-2\", colors.torusGray2);\n    }\n  }\n\n  _getLogoUrl() {\n    var _this$whiteLabel, _this$whiteLabel$them;\n\n    let logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n\n    if ((_this$whiteLabel = this.whiteLabel) !== null && _this$whiteLabel !== void 0 && (_this$whiteLabel$them = _this$whiteLabel.theme) !== null && _this$whiteLabel$them !== void 0 && _this$whiteLabel$them.isDark) {\n      var _this$whiteLabel2;\n\n      logoUrl = ((_this$whiteLabel2 = this.whiteLabel) === null || _this$whiteLabel2 === void 0 ? void 0 : _this$whiteLabel2.logoLight) || logoUrl;\n    } else {\n      var _this$whiteLabel3;\n\n      logoUrl = ((_this$whiteLabel3 = this.whiteLabel) === null || _this$whiteLabel3 === void 0 ? void 0 : _this$whiteLabel3.logoDark) || logoUrl;\n    }\n\n    return logoUrl;\n  }\n\n  _sendWidgetVisibilityStatus(status) {\n    const torusWidgetVisibilityStream = this.communicationMux.getStream(\"torus-widget-visibility\");\n    torusWidgetVisibilityStream.write({\n      data: status\n    });\n  }\n\n  _displayIframe() {\n    let isFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this.isIframeFullScreen = isFull;\n  }\n\n  _setupWeb3() {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const metamaskStream = new BasePostMessageStream({\n      name: \"embed_metamask\",\n      target: \"iframe_metamask\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Due to compatibility reasons, we should not set up multiplexing on window.metamaskstream\n    // because the MetamaskInpageProvider also attempts to do so.\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_comm\",\n      target: \"iframe_comm\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Backward compatibility with Gotchi :)\n    // window.metamaskStream = this.communicationStream\n    // compose the inpage provider\n\n    const inpageProvider = new TorusInpageProvider(metamaskStream); // detect eth_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inpageProvider[m];\n\n      inpageProvider[m] = function providerFunc(method) {\n        if (method && method === \"eth_requestAccounts\") {\n          return inpageProvider.enable();\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return originalMethod.apply(this, [method, ...args]);\n      };\n    };\n\n    detectAccountRequestPrototypeModifier(\"send\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n\n    inpageProvider.enable = () => {\n      return new Promise((resolve, reject) => {\n        // If user is already logged in, we assume they have given access to the website\n        inpageProvider.sendAsync({\n          jsonrpc: \"2.0\",\n          id: getPreopenInstanceId(),\n          method: \"eth_requestAccounts\",\n          params: []\n        }, (err, response) => {\n          const {\n            result: res\n          } = response || {};\n\n          if (err) {\n            setTimeout(() => {\n              reject(err);\n            }, 50);\n          } else if (Array.isArray(res) && res.length > 0) {\n            // If user is already rehydrated, resolve this\n            // else wait for something to be written to status stream\n            const handleLoginCb = () => {\n              if (this.requestedVerifier !== \"\" && this.currentVerifier !== this.requestedVerifier) {\n                const {\n                  requestedVerifier\n                } = this; // eslint-disable-next-line promise/no-promise-in-callback\n\n                this.logout() // eslint-disable-next-line promise/always-return\n                .then(_ => {\n                  this.requestedVerifier = requestedVerifier;\n\n                  this._showLoginPopup(true, resolve, reject);\n                }).catch(error => reject(error));\n              } else {\n                resolve(res);\n              }\n            };\n\n            if (this.isLoggedIn) {\n              handleLoginCb();\n            } else {\n              this.isLoginCallback = handleLoginCb;\n            }\n          } else {\n            // set up listener for login\n            this._showLoginPopup(true, resolve, reject);\n          }\n        });\n      });\n    };\n\n    inpageProvider.tryPreopenHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && UNSAFE_METHODS.includes(_payload.method)) {\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId, {\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        _payload.preopenInstanceId = preopenInstanceId;\n      }\n\n      inpageProvider._rpcEngine.handle(_payload, cb);\n    }; // Work around for web3@1.0 deleting the bound `sendAsync` but not the unbound\n    // `sendAsync` method on the prototype, causing `this` reference issues with drizzle\n\n\n    const proxiedInpageProvider = new Proxy(inpageProvider, {\n      // straight up lie that we deleted the property so that it doesnt\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.ethereum = proxiedInpageProvider;\n    const communicationMux = setupMultiplex(communicationStream);\n    this.communicationMux = communicationMux;\n    const windowStream = communicationMux.getStream(\"window\");\n    windowStream.on(\"data\", chunk => {\n      if (chunk.name === \"create_window\") {\n        // url is the url we need to open\n        // we can pass the final url upfront so that it removes the step of redirecting to /redirect and waiting for finalUrl\n        this._createPopupBlockAlert(chunk.data.preopenInstanceId, chunk.data.url);\n      }\n    }); // show torus widget if button clicked\n\n    const widgetStream = communicationMux.getStream(\"widget\");\n    widgetStream.on(\"data\", chunk => {\n      const {\n        data\n      } = chunk;\n\n      this._displayIframe(data);\n    }); // Show torus button if wallet has been hydrated/detected\n\n    const statusStream = communicationMux.getStream(\"status\");\n    statusStream.on(\"data\", status => {\n      // login\n      if (status.loggedIn) {\n        this.isLoggedIn = status.loggedIn;\n        this.currentVerifier = status.verifier;\n      } // logout\n      else this._displayIframe();\n\n      if (this.isLoginCallback) {\n        this.isLoginCallback();\n        delete this.isLoginCallback;\n      }\n    });\n    this.provider = proxiedInpageProvider;\n    if (this.provider.shouldSendMetadata) sendSiteMetadata(this.provider._rpcEngine);\n\n    inpageProvider._initializeState();\n\n    log.debug(\"Torus - injected provider\");\n  }\n\n  _showLoginPopup(calledFromEmbed, resolve, reject) {\n    const loginHandler = data => {\n      const {\n        err,\n        selectedAddress\n      } = data;\n\n      if (err) {\n        log.error(err);\n        if (reject) reject(err);\n      } // returns an array (cause accounts expects it)\n      else if (resolve) resolve([selectedAddress]);\n\n      if (this.isIframeFullScreen) this._displayIframe();\n    };\n\n    const oauthStream = this.communicationMux.getStream(\"oauth\");\n\n    if (!this.requestedVerifier) {\n      this._displayIframe(true);\n\n      handleStream(oauthStream, \"data\", loginHandler);\n      oauthStream.write({\n        name: \"oauth_modal\",\n        data: {\n          calledFromEmbed\n        }\n      });\n    } else {\n      handleStream(oauthStream, \"data\", loginHandler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId);\n\n      oauthStream.write({\n        name: \"oauth\",\n        data: {\n          calledFromEmbed,\n          verifier: this.requestedVerifier,\n          preopenInstanceId,\n          login_hint: this.loginHint\n        }\n      });\n    }\n  }\n\n  _createPopupBlockAlert(preopenInstanceId, url) {\n    const logoUrl = this._getLogoUrl();\n\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(preopenInstanceId, {\n          url,\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    this._setEmbedWhiteLabel(torusAlert);\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.style.display = \"block\";\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    runOnLoad(attachOnLoad);\n    runOnLoad(bindOnLoad);\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInpageProvider, WALLET_OPENLOGIN_VERIFIER_MAP, Torus as default };","map":{"version":3,"sources":["../src/interfaces.ts","../src/config.ts","../src/embedUtils.ts","../src/loglevel.ts","../src/messages.ts","../src/utils.ts","../src/inpage-provider.ts","../src/integrity.ts","../src/PopupHandler.ts","../src/siteMetadata.ts","../src/embed.ts"],"names":["LOGIN_PROVIDER","GOOGLE","FACEBOOK","TWITCH","REDDIT","DISCORD","WALLET_OPENLOGIN_VERIFIER_MAP","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","BINANCE","TESTING","LRC","BETA","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","paymentProviders","line1","line2","line3","supportPage","minOrderValue","maxOrderValue","validCurrencies","validCryptoCurrencies","includeFees","enforceMax","sell","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","runOnLoad","fn","Promise","htmlToElement","html","template","trimmedHtml","handleEvent","handlerArgs","handlerWrapper","handler","handle","handleStream","chunk","resolve","document","loglevel","errors","disconnected","permanentlyDisconnected","sendSiteMetadata","unsupportedSync","method","invalidDuplexStream","invalidOptions","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","enableDeprecation","sendDeprecation","events","close","data","networkChanged","notification","publicConfigStore","validatePaymentProvider","isValid","provider","Object","selectedProvider","selectedParams","params","requestedOrderAmount","parseFloat","createErrorMiddleware","req","res","message","next","done","error","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","getPreopenInstanceId","Math","getTorusUrl","version","versionUsed","integrity","buildEnv","config","get","useAPIKey","response","torusUrl","logLevel","getUserLanguage","userLanguage","userLanguages","EMITTED_NOTIFICATIONS","NOOP","FEATURES_PROVIDER_CHANGE_WINDOW","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","e","getPopupFeatures","dualScreenLeft","dualScreenTop","w","h","width","height","systemZoom","left","top","features","SafeEventEmitter","getRpcPromiseCallback","unwrapResult","reject","Array","TorusInpageProvider","accounts","isConnected","isUnlocked","initialized","isPermanentlyDisconnected","hasEmittedConnection","enable","experimentalMethods","send","constructor","connectionStream","maxEventListeners","shouldSendMetadata","jsonRpcStreamName","isDuplexStream","messages","mux","pump","storageKey","storeAsStream","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","payload","request","args","sendAsync","addListener","on","once","prependListener","prependOnceListener","_initializeState","networkVersion","_rpcRequest","isInternal","cb","_payload","callback","callbackOrArgs","methodOrPayload","_sendSync","result","id","jsonrpc","_handleConnect","_handleDisconnect","errorMessage","_handleStreamDisconnect","_handleAccountsChanged","isEthAccounts","finalAccounts","dequal","_handleChainChanged","_handleUnlockStateChanged","_warnOfDeprecation","defaults","options","algorithms","delimiter","full","hashes","internalHashes","algorithm","createHash","output","sri","main","finalOptions","undefined","target","_setupTimer","Number","setInterval","clearInterval","open","redirect","img","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","name","getSiteIcon","domainMetadata","engine","originalError","defaultVerifiers","iframeIntegrity","expectedCacheControlHeader","UNSAFE_METHODS","isLocalStorageAvailable","torusIframeHtml","check","hash","configuration","buttonPosition","modalZIndex","apiKey","metadataHost","allowHost","TorusJs","setAPIKey","init","enableLogging","enabledVerifiers","network","host","networkName","blockExplorer","ticker","tickerName","loginConfig","showTorusButton","skipTKey","useLocalStorage","useWalletConnect","dappStorageKey","storedKey","generatedKey","torusIframeUrl","link","defaultLanguage","customTranslations","mergedTranslations","deepmerge","languageTranslations","handleSetup","documentReady","initStream","whiteLabel","torusWidgetVisibility","fetchUrl","resp","fetch","cache","calculatedIntegrity","generateIntegrity","login","verifier","login_hint","loginHint","logout","logOutStream","statusStream","statusStreamHandler","status","cleanUp","clearInit","element","isElement","hideTorusButton","setProvider","rest","providerChangeStream","success","preopenInstanceId","override","showWallet","showWalletStream","finalPath","path","showWalletHandler","instanceId","finalUrl","walletWindow","url","getPublicAddress","isExtended","nodeDetails","verifierId","endpoints","torusNodePubs","walletVerifier","openloginVerifier","existingV1User","v2User","newV2User","getUserInfo","userInfoAccessStream","userInfoAccessHandler","newRequest","userInfoStream","userInfoHandler","handlerChunk","initiateTopup","JSON","topupStream","topupHandler","loginWithPrivateKey","userInfo","Buffer","loginPrivKeyStream","loginHandler","showWalletConnectScanner","walletConnectStream","walletConnectHandler","_handleWindow","windowStream","handledWindow","closeHandler","receivedId","closed","_setEmbedWhiteLabel","theme","isDark","colors","_getLogoUrl","logoUrl","_sendWidgetVisibilityStatus","torusWidgetVisibilityStream","_displayIframe","isFull","style","_setupWeb3","metamaskStream","targetWindow","targetOrigin","origin","communicationStream","inpageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","setTimeout","handleLoginCb","requestedVerifier","_","proxiedInpageProvider","deleteProperty","communicationMux","setupMultiplex","widgetStream","_showLoginPopup","selectedAddress","oauthStream","calledFromEmbed","_createPopupBlockAlert","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport NodeDetailManager from '@toruslabs/fetch-node-details';\nimport { get, setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, BasePostMessageStream, setupMultiplex } from '@toruslabs/openlogin-jrpc';\nimport TorusJs from '@toruslabs/torus.js';\nimport deepmerge from 'lodash.merge';\nimport { ObservableStore, storeAsStream } from '@metamask/obs-store';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport dequal from 'fast-deep-equal';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport createHash from 'create-hash';\nimport { EventEmitter } from 'events';\n\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  TWITCH: \"twitch\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\"\n};\nconst WALLET_OPENLOGIN_VERIFIER_MAP = {\n  [LOGIN_PROVIDER.GOOGLE]: \"tkey-google\",\n  [LOGIN_PROVIDER.FACEBOOK]: \"tkey-facebook\",\n  [LOGIN_PROVIDER.TWITCH]: \"tkey-twitch\",\n  [LOGIN_PROVIDER.REDDIT]: \"tkey-reddit\",\n  [LOGIN_PROVIDER.DISCORD]: \"tkey-discord\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  BINANCE: \"binance\",\n  TESTING: \"testing\",\n  LRC: \"lrc\",\n  BETA: \"beta\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\n\nconst paymentProviders$1 = {\n  [PAYMENT_PROVIDER.RAMPNETWORK]: {\n    line1: \"Debit Card/ Apple Pay/ Bank transfer\",\n    line2: \"0.49% - 2.9%\",\n    line3: \"5,000€/purchase, 20,000€/mo\",\n    supportPage: \"https://instant.ramp.network/\",\n    minOrderValue: 50,\n    maxOrderValue: 20000,\n    validCurrencies: [\"GBP\", \"EUR\", \"USD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"BSC_BNB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MOONPAY]: {\n    line1: \"Credit / Debit Card / Apple Pay\",\n    line2: \"4.5% or 5 USD\",\n    line3: \"2,000€/day, 10,000€/mo\",\n    supportPage: \"https://help.moonpay.io/en/\",\n    minOrderValue: 24.99,\n    maxOrderValue: 50000,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\", \"RUB\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"TUSD\", \"USDC\", \"USDT\", \"BNB_BSC\", \"BUSD_BSC\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.WYRE]: {\n    line1: \"Apple Pay/ Debit/ Credit Card\",\n    line2: \"4.9% + 30¢ or 5 USD\",\n    line3: \"$250/day\",\n    supportPage: \"https://support.sendwyre.com/en/\",\n    minOrderValue: 5,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"AUD\", \"CAD\", \"GBP\", \"EUR\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: false,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.XANPOOL]: {\n    line1: \"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow\",\n    line2: \"2.5% buying, 3% selling\",\n    line3: \"$2,500 / day\",\n    supportPage: \"mailto:support@xanpool.com\",\n    minOrderValue: 100,\n    maxOrderValue: 2500,\n    validCurrencies: [\"SGD\", \"HKD\", \"MYR\", \"PHP\", \"INR\", \"VND\", \"THB\", \"IDR\"],\n    validCryptoCurrencies: [\"ETH\", \"USDT\"],\n    includeFees: true,\n    sell: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MERCURYO]: {\n    line1: \"Credit/ Debit Card/ Apple Pay\",\n    line2: \"3.95% or 4 USD\",\n    line3: \"10,000€/day, 25,000€/mo\",\n    supportPage: \"mailto:support@mercuryo.io\",\n    minOrderValue: 30,\n    maxOrderValue: 5000,\n    validCurrencies: [\"USD\", \"EUR\", \"RUB\", \"TRY\", \"GBP\", \"UAH\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"BAT\", \"USDT\", \"OKB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.TRANSAK]: {\n    line1: \"Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)\",\n    line2: \"0.99% - 5.5% or 5 USD\",\n    line3: \"500€/day\",\n    supportPage: \"https://support.transak.com/hc/en-US\",\n    minOrderValue: 20,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: true,\n    enforceMax: false\n  }\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  paymentProviders: paymentProviders$1,\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nconst runOnLoad = fn => new Promise((resolve, reject) => {\n  if (window.document.body != null) {\n    Promise.resolve(fn()).then(resolve).catch(reject);\n  } else {\n    window.document.addEventListener(\"DOMContentLoaded\", () => {\n      Promise.resolve(fn()).then(resolve).catch(reject);\n    });\n  }\n});\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nconst handleStream = (handle, eventName, handler) => {\n  const handlerWrapper = chunk => {\n    handler(chunk);\n    handle.removeListener(eventName, handlerWrapper);\n  };\n\n  handle.on(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nvar log = loglevel.getLogger(\"torus-embed\");\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    sendSiteMetadata: () => \"Torus: Failed to send site metadata. This is an internal error, please report this bug.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners, shouldSendMetadata) => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \", shouldSendMetadata: \").concat(shouldSendMetadata, \" }\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {\n    // deprecated methods\n    enableDeprecation: 'Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. ' + 'Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',\n    sendDeprecation: 'Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future.' + ' Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n    events: {\n      close: 'Torus: The event \"close\" is deprecated and may be removed in the future. Please use \"disconnect\" instead.' + \"\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",\n      data: 'Torus: The event \"data\" is deprecated and will be removed in the future.' + 'Use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',\n      networkChanged: 'Torus: The event \"networkChanged\" is deprecated and may be removed in the future.' + ' Please use \"chainChanged\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n      notification: 'Torus: The event \"notification\" is deprecated and may be removed in the future. ' + 'Please use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'\n    },\n    publicConfigStore: 'Torus: The property \"publicConfigStore\" is deprecated and WILL be removed in the future.'\n  }\n};\n\nconst {\n  paymentProviders\n} = configuration;\nconst validatePaymentProvider = (provider, params) => {\n  const errors = {};\n\n  if (!provider) {\n    return {\n      errors,\n      isValid: true\n    };\n  }\n\n  if (provider && !paymentProviders[provider]) {\n    errors.provider = \"Invalid Provider\";\n    return {\n      errors,\n      isValid: Object.keys(errors).length === 0\n    };\n  }\n\n  const selectedProvider = paymentProviders[provider];\n  const selectedParams = params || {}; // set default values\n  // if (!selectedParams.selectedCurrency) [selectedParams.selectedCurrency] = selectedProvider.validCurrencies\n  // if (!selectedParams.fiatValue) selectedParams.fiatValue = selectedProvider.minOrderValue\n  // if (!selectedParams.selectedCryptoCurrency) [selectedParams.selectedCryptoCurrency] = selectedProvider.validCryptoCurrencies\n  // validations\n\n  if (selectedParams.fiatValue) {\n    const requestedOrderAmount = +parseFloat(selectedParams.fiatValue.toString()) || 0;\n    if (requestedOrderAmount < selectedProvider.minOrderValue) errors.fiatValue = \"Requested amount is lower than supported\";\n    if (requestedOrderAmount > selectedProvider.maxOrderValue && selectedProvider.enforceMax) errors.fiatValue = \"Requested amount is higher than supported\";\n  }\n\n  if (selectedParams.selectedCurrency && !selectedProvider.validCurrencies.includes(selectedParams.selectedCurrency)) {\n    errors.selectedCurrency = \"Unsupported currency\";\n  }\n\n  if (selectedParams.selectedCryptoCurrency && !selectedProvider.validCryptoCurrencies.includes(selectedParams.selectedCryptoCurrency)) {\n    errors.selectedCryptoCurrency = \"Unsupported cryptoCurrency\";\n  }\n\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n}; // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"MetaMask - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n} // resolve response.result or response, reject errors\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"MetaMask: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getPreopenInstanceId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv, integrity) => {\n  let torusUrl;\n  let logLevel; // Do not change this line\n\n  const version = \"1.21.0\";\n  let versionUsed = integrity.version || version;\n\n  try {\n    if ((buildEnv === \"binance\" || buildEnv === \"production\") && !integrity.version) {\n      let response;\n      if (!configuration.prodTorusUrl) response = await get(\"\".concat(configuration.api, \"/latestversion?name=@toruslabs/torus-embed&version=\").concat(version), {}, {\n        useAPIKey: true\n      });else response = {\n        data: configuration.prodTorusUrl\n      };\n      versionUsed = response.data; // eslint-disable-next-line require-atomic-updates\n\n      configuration.prodTorusUrl = response.data;\n    }\n  } catch (error) {\n    log.error(error, \"unable to fetch latest version\");\n  }\n\n  log.info(\"version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"binance\":\n      torusUrl = \"https://binance.tor.us/v\".concat(versionUsed);\n      logLevel = \"info\";\n      break;\n\n    case \"testing\":\n      torusUrl = \"https://testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"lrc\":\n      torusUrl = \"https://lrc.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"beta\":\n      torusUrl = \"https://beta.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:4050\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://app.tor.us/v\".concat(versionUsed);\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst EMITTED_NOTIFICATIONS = [\"eth_subscription\" // per eth-json-rpc-filters/subscriptionManager\n];\nconst NOOP = () => {// empty function\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375\";\nconst FEATURES_DEFAULT_WALLET_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315\";\nconst FEATURES_CONFIRM_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450\";\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\nfunction getPopupFeatures() {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const w = 1200;\n  const h = 700;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nSafeEventEmitter.defaultMaxListeners = 100; // resolve response.result, reject errors\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      return reject(error || response.error);\n    }\n\n    return !unwrapResult || Array.isArray(response) ? resolve(response) : resolve(response.result);\n  };\n};\n\nclass TorusInpageProvider extends SafeEventEmitter {\n  /**\n   * The chain ID of the currently connected Ethereum chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Ethereum address.\n   * If null, MetaMask is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  constructor(connectionStream) {\n    let {\n      maxEventListeners = 100,\n      shouldSendMetadata = true,\n      jsonRpcStreamName = \"provider\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"networkVersion\", void 0);\n\n    _defineProperty(this, \"shouldSendMetadata\", void 0);\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_publicConfigStore\", void 0);\n\n    _defineProperty(this, \"tryPreopenHandle\", void 0);\n\n    _defineProperty(this, \"enable\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_jsonRpcConnection\", void 0);\n\n    _defineProperty(this, \"_sentWarnings\", {\n      // methods\n      enable: false,\n      experimentalMethods: false,\n      send: false,\n      publicConfigStore: false,\n      // events\n      events: {\n        close: false,\n        data: false,\n        networkChanged: false,\n        notification: false\n      }\n    });\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners); // private state\n\n    this._state = _objectSpread$1({}, TorusInpageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.networkVersion = null;\n    this.chainId = null;\n    this.shouldSendMetadata = shouldSendMetadata; // bind functions (to prevent e.g. web3@1.x from making unbound calls)\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._sendSync = this._sendSync.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"MetaMask\")); // subscribe to metamask public config (one-way)\n\n    this._publicConfigStore = new ObservableStore({\n      storageKey: \"Metamask-Config\"\n    }); // handle isUnlocked changes, and chainChanged and networkChanged events\n    // this._publicConfigStore.subscribe((stringifiedState) => {\n    //   // This is because we are using store as string\n    //   const state = JSON.parse(stringifiedState as unknown as string);\n    //   if (\"isUnlocked\" in state && state.isUnlocked !== this._state.isUnlocked) {\n    //     this._state.isUnlocked = state.isUnlocked;\n    //     if (!this._state.isUnlocked) {\n    //       // accounts are never exposed when the extension is locked\n    //       this._handleAccountsChanged([]);\n    //     } else {\n    //       // this will get the exposed accounts, if any\n    //       try {\n    //         this._rpcRequest(\n    //           { method: \"eth_accounts\", params: [] },\n    //           NOOP,\n    //           true // indicating that eth_accounts _should_ update accounts\n    //         );\n    //       } catch (_) {\n    //         // Swallow error\n    //       }\n    //     }\n    //   }\n    //   if (\"selectedAddress\" in state && this.selectedAddress !== state.selectedAddress) {\n    //     try {\n    //       this._rpcRequest(\n    //         { method: \"eth_accounts\", params: [] },\n    //         NOOP,\n    //         true // indicating that eth_accounts _should_ update accounts\n    //       );\n    //     } catch (_) {\n    //       // Swallow error\n    //     }\n    //   }\n    //   // Emit chainChanged event on chain change\n    //   if (\"chainId\" in state && state.chainId !== this.chainId) {\n    //     this.chainId = state.chainId || null;\n    //     this.emit(\"chainChanged\", this.chainId);\n    //     // indicate that we've connected, for EIP-1193 compliance\n    //     // we do this here so that iframe can initialize\n    //     if (!this._state.hasEmittedConnection) {\n    //       this._handleConnect(this.chainId);\n    //       this._state.hasEmittedConnection = true;\n    //     }\n    //   }\n    //   // Emit networkChanged event on network change\n    //   if (\"networkVersion\" in state && state.networkVersion !== this.networkVersion) {\n    //     this.networkVersion = state.networkVersion || null;\n    //     this.emit(\"networkChanged\", this.networkVersion);\n    //   }\n    // });\n\n    pump(mux.createStream(\"publicConfig\"), storeAsStream(this._publicConfigStore), // RPC requests should still work if only this stream fails\n    logStreamDisconnectWarning.bind(this, \"MetaMask PublicConfigStore\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    }); // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine; // json rpc notification listener\n\n    jsonRpcConnection.events.on(\"notification\", payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === \"wallet_accountsChanged\") {\n        this._handleAccountsChanged(params);\n      } else if (method === \"wallet_unlockStateChanged\") {\n        this._handleUnlockStateChanged(params);\n      } else if (method === \"wallet_chainChanged\") {\n        this._handleChainChanged(params);\n      } else if (EMITTED_NOTIFICATIONS.includes(payload.method)) {\n        // EIP 1193 subscriptions, per eth-json-rpc-filters/subscriptionManager\n        this.emit(\"data\", payload); // deprecated\n\n        this.emit(\"notification\", params.result);\n        this.emit(\"message\", {\n          type: method,\n          data: params\n        });\n      } // Backward compatibility for older non EIP 1193 subscriptions\n      // this.emit('data', null, payload)\n\n    });\n  }\n\n  get publicConfigStore() {\n    if (!this._sentWarnings.publicConfigStore) {\n      log.warn(messages.warnings.publicConfigStore);\n      this._sentWarnings.publicConfigStore = true;\n    }\n\n    return this._publicConfigStore;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param args - The RPC request arguments.\n   * @returns A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param cb - The callback function.\n   */\n\n\n  sendAsync(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   *   addListener, on, once, prependListener, prependOnceListener\n   */\n\n\n  addListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.on(eventName, listener);\n  }\n\n  once(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependOnceListener(eventName, listener);\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked,\n        networkVersion\n      } = await this.request({\n        method: \"wallet_getProviderState\"\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId,\n        networkVersion\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The consumer's callback.\n   * @param isInternal - false - Whether the request is internal.\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"eth_accounts\" || _payload.method === \"eth_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"eth_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryPreopenHandle(_payload, cb);\n  }\n\n  send(methodOrPayload, callbackOrArgs) {\n    if (!this._sentWarnings.send) {\n      log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest({\n            method: methodOrPayload,\n            params: callbackOrArgs\n          }, getRpcPromiseCallback(resolve, reject, false));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n      return this._rpcRequest(methodOrPayload, callbackOrArgs);\n    }\n\n    return this._sendSync(methodOrPayload);\n  }\n  /**\n   * DEPRECATED.\n   * Internal backwards compatibility method, used in send.\n   */\n\n\n  _sendSync(payload) {\n    let result;\n\n    switch (payload.method) {\n      case \"eth_accounts\":\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case \"eth_coinbase\":\n        result = this.selectedAddress || null;\n        break;\n\n      case \"eth_uninstallFilter\":\n        this._rpcRequest(payload, NOOP);\n\n        result = true;\n        break;\n\n      case \"net_version\":\n        result = this.networkVersion || null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result\n    };\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits MetaMaskInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits MetaMaskInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits MetamaskInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"MetaMask: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"MetaMask: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before eth_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('MetaMask: \"eth_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits MetamaskInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId,\n      networkVersion\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId || !networkVersion) {\n      log.error(\"MetaMask: Received invalid network parameters. Please report this bug.\", {\n        chainId,\n        networkVersion\n      });\n      return;\n    }\n\n    if (networkVersion === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   */\n\n\n  _warnOfDeprecation(eventName) {\n    if (this._sentWarnings.events[eventName] === false) {\n      log.warn(messages.warnings.events[eventName]);\n      this._sentWarnings.events[eventName] = true;\n    }\n  }\n\n}\n\n_defineProperty(TorusInpageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\nconst defaults = options => ({\n  algorithms: options.algorithms || [\"sha256\"],\n  delimiter: options.delimiter || \" \",\n  full: options.full || false\n}); // Generate list of hashes\n\n\nconst hashes = (options, data) => {\n  const internalHashes = {};\n  options.algorithms.forEach(algorithm => {\n    internalHashes[algorithm] = createHash(algorithm).update(data, \"utf8\").digest(\"base64\");\n  });\n  return internalHashes;\n}; // Build an integrity string\n\n\nconst integrity = (options, sri) => {\n  let output = \"\"; // Hash list\n\n  output += Object.keys(sri.hashes).map(algorithm => \"\".concat(algorithm, \"-\").concat(sri.hashes[algorithm])).join(options.delimiter);\n  return output;\n};\n\nconst main = (options, data) => {\n  // Defaults\n  const finalOptions = defaults(options);\n  const sri = {\n    hashes: hashes(finalOptions, data),\n    integrity: undefined\n  };\n  sri.integrity = integrity(finalOptions, sri);\n  return finalOptions.full ? sri : sri.integrity;\n};\n\nclass PopupHandler extends EventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  const {\n    document\n  } = window; // Use the site's favicon if it exists\n\n  let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  } // Search through available icons in no particular order\n\n\n  icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  }\n\n  return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n/**\n * Sends site metadata over an RPC request.\n */\n\n\nasync function sendSiteMetadata(engine) {\n  try {\n    const domainMetadata = await getSiteMetadata(); // call engine.handle directly to avoid normal RPC request handling\n\n    engine.handle({\n      jsonrpc: \"2.0\",\n      id: getPreopenInstanceId(),\n      method: \"wallet_sendDomainMetadata\",\n      params: domainMetadata\n    }, NOOP);\n  } catch (error) {\n    log.error({\n      message: messages.errors.sendSiteMetadata(),\n      originalError: error\n    });\n  }\n}\n\nconst _excluded = [\"host\", \"chainId\", \"networkName\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst defaultVerifiers = {\n  [LOGIN_PROVIDER.GOOGLE]: true,\n  [LOGIN_PROVIDER.FACEBOOK]: true,\n  [LOGIN_PROVIDER.REDDIT]: true,\n  [LOGIN_PROVIDER.TWITCH]: true,\n  [LOGIN_PROVIDER.DISCORD]: true\n};\nconst iframeIntegrity = \"sha384-I1qqxsIO3trXzTO78PZoXvNamECKTo3uCnztKxjV0MmFWtmZY3uBpnJlhO7z/WBw\";\nconst expectedCacheControlHeader = \"max-age=3600\";\nconst UNSAFE_METHODS = [\"eth_sendTransaction\", \"eth_signTypedData\", \"eth_signTypedData_v3\", \"eth_signTypedData_v4\", \"personal_sign\", \"eth_getEncryptionPublicKey\", \"eth_decrypt\"];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\", {\n      check: false,\n      hash: iframeIntegrity,\n      version: \"\"\n    });\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/popup\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      modalZIndex = 99999,\n      apiKey = \"torus-default\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"buttonPosition\", BUTTON_POSITION.BOTTOM_LEFT);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    _defineProperty(this, \"isLoggedIn\", void 0);\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusWidgetVisibility\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"nodeDetailManager\", void 0);\n\n    _defineProperty(this, \"torusJs\", void 0);\n\n    _defineProperty(this, \"apiKey\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"isIframeFullScreen\", void 0);\n\n    _defineProperty(this, \"whiteLabel\", void 0);\n\n    _defineProperty(this, \"requestedVerifier\", void 0);\n\n    _defineProperty(this, \"currentVerifier\", void 0);\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"ethereum\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationMux\", void 0);\n\n    _defineProperty(this, \"isLoginCallback\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"paymentProviders\", configuration.paymentProviders);\n\n    _defineProperty(this, \"loginHint\", \"\");\n\n    _defineProperty(this, \"useWalletConnect\", void 0);\n\n    this.buttonPosition = buttonPosition;\n    this.torusUrl = \"\";\n    this.isLoggedIn = false; // ethereum.enable working\n\n    this.isInitialized = false; // init done\n\n    this.torusWidgetVisibility = true;\n    this.requestedVerifier = \"\";\n    this.currentVerifier = \"\";\n    this.nodeDetailManager = new NodeDetailManager();\n    this.torusJs = new TorusJs({\n      metadataHost: \"https://metadata.tor.us\",\n      allowHost: \"https://signer.tor.us/api/allow\"\n    });\n    this.apiKey = apiKey;\n    TorusJs.setAPIKey(apiKey);\n    setAPIKey(apiKey);\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.isIframeFullScreen = false;\n    this.dappStorageKey = \"\";\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      // deprecated: use loginConfig instead\n      enabledVerifiers = defaultVerifiers,\n      network = {\n        host: \"mainnet\",\n        chainId: null,\n        networkName: \"\",\n        blockExplorer: \"\",\n        ticker: \"\",\n        tickerName: \"\"\n      },\n      loginConfig = {},\n      showTorusButton = true,\n      integrity = {\n        check: false,\n        hash: iframeIntegrity,\n        version: \"\"\n      },\n      whiteLabel,\n      skipTKey = false,\n      useLocalStorage = false,\n      useWalletConnect = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv, integrity);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    this.whiteLabel = whiteLabel;\n    this.useWalletConnect = useWalletConnect;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    this.torusWidgetVisibility = showTorusButton;\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getPreopenInstanceId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"popup\";else torusIframeUrl.pathname += \"/popup\";\n\n    if (dappStorageKey) {\n      torusIframeUrl.hash = \"#dappStorageKey=\".concat(dappStorageKey);\n    } // Iframe code\n\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        allow=\".concat(useWalletConnect ? \"camera\" : \"\", \"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\").concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex, \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement('<div id=\"torusAlertContainer\"></div>');\n    this.torusAlertContainer.style.display = \"none\";\n    this.torusAlertContainer.style.setProperty(\"z-index\", this.alertZIndex.toString());\n    const link = window.document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    link.setAttribute(\"type\", \"text/css\");\n    link.setAttribute(\"href\", \"\".concat(torusUrl, \"/css/widget.css\"));\n    this.styleLink = link;\n    const {\n      defaultLanguage = getUserLanguage(),\n      customTranslations = {}\n    } = this.whiteLabel || {};\n    const mergedTranslations = deepmerge(configuration.translations, customTranslations);\n    const languageTranslations = mergedTranslations[defaultLanguage] || configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n\n    const handleSetup = async () => {\n      await documentReady();\n      return new Promise((resolve, reject) => {\n        this.torusIframe.onload = async () => {\n          // only do this if iframe is not full screen\n          this._setupWeb3();\n\n          const initStream = this.communicationMux.getStream(\"init_stream\");\n          initStream.on(\"data\", chunk => {\n            const {\n              name,\n              data,\n              error\n            } = chunk;\n\n            if (name === \"init_complete\" && data.success) {\n              // resolve promise\n              this.isInitialized = true;\n\n              this._displayIframe(this.isIframeFullScreen);\n\n              resolve(undefined);\n            } else if (error) {\n              reject(new Error(error));\n            }\n          });\n          initStream.write({\n            name: \"init_stream\",\n            data: {\n              enabledVerifiers,\n              loginConfig,\n              whiteLabel: this.whiteLabel,\n              buttonPosition: this.buttonPosition,\n              torusWidgetVisibility: this.torusWidgetVisibility,\n              apiKey: this.apiKey,\n              skipTKey,\n              network\n            }\n          });\n        };\n\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      });\n    };\n\n    if (buildEnv === \"production\" && integrity.check) {\n      // hacky solution to check for iframe integrity\n      const fetchUrl = \"\".concat(torusUrl, \"/popup\");\n      const resp = await fetch(fetchUrl, {\n        cache: \"reload\"\n      });\n\n      if (resp.headers.get(\"Cache-Control\") !== expectedCacheControlHeader) {\n        throw new Error(\"Unexpected Cache-Control headers, got \".concat(resp.headers.get(\"Cache-Control\")));\n      }\n\n      const response = await resp.text();\n      const calculatedIntegrity = main({\n        algorithms: [\"sha384\"]\n      }, response);\n      log.info(calculatedIntegrity, \"integrity\");\n\n      if (calculatedIntegrity === integrity.hash) {\n        await handleSetup();\n      } else {\n        this.clearInit();\n        throw new Error(\"Integrity check failed\");\n      }\n    } else {\n      await handleSetup();\n    }\n\n    return undefined;\n  }\n\n  login() {\n    let {\n      verifier = \"\",\n      login_hint: loginHint = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    this.requestedVerifier = verifier;\n    this.loginHint = loginHint;\n    return this.ethereum.enable();\n  }\n\n  logout() {\n    return new Promise((resolve, reject) => {\n      if (!this.isLoggedIn) {\n        reject(new Error(\"User has not logged in yet\"));\n        return;\n      }\n\n      const logOutStream = this.communicationMux.getStream(\"logout\");\n      logOutStream.write({\n        name: \"logOut\"\n      });\n      const statusStream = this.communicationMux.getStream(\"status\");\n\n      const statusStreamHandler = status => {\n        if (!status.loggedIn) {\n          this.isLoggedIn = false;\n          this.currentVerifier = \"\";\n          this.requestedVerifier = \"\";\n          resolve();\n        } else reject(new Error(\"Some Error Occured\"));\n      };\n\n      handleStream(statusStream, \"data\", statusStreamHandler);\n    });\n  }\n\n  async cleanUp() {\n    if (this.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof HTMLDocument;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.torusWidgetVisibility = false;\n\n    this._sendWidgetVisibilityStatus(false);\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this.torusWidgetVisibility = true;\n\n    this._sendWidgetVisibilityStatus(true);\n\n    this._displayIframe();\n  }\n\n  setProvider() {\n    let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let {\n      host = \"mainnet\",\n      chainId = null,\n      networkName = \"\"\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return new Promise((resolve, reject) => {\n      const providerChangeStream = this.communicationMux.getStream(\"provider_change\");\n\n      const handler = chunk => {\n        const {\n          err,\n          success\n        } = chunk.data;\n        log.info(chunk);\n\n        if (err) {\n          reject(err);\n        } else if (success) {\n          resolve();\n        } else reject(new Error(\"some error occured\"));\n      };\n\n      handleStream(providerChangeStream, \"data\", handler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId, {\n        target: \"_blank\",\n        features: FEATURES_PROVIDER_CHANGE_WINDOW\n      });\n\n      providerChangeStream.write({\n        name: \"show_provider_change\",\n        data: {\n          network: _objectSpread({\n            host,\n            chainId,\n            networkName\n          }, rest),\n          preopenInstanceId,\n          override: false\n        }\n      });\n    });\n  }\n\n  showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const showWalletStream = this.communicationMux.getStream(\"show_wallet\");\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    showWalletStream.write({\n      name: \"show_wallet\",\n      data: {\n        path: finalPath\n      }\n    });\n\n    const showWalletHandler = chunk => {\n      if (chunk.name === \"show_wallet_instance\") {\n        // Let the error propogate up (hence, no try catch)\n        const {\n          instanceId\n        } = chunk.data;\n        const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n        finalUrl.searchParams.append(\"integrity\", \"true\");\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach(x => {\n          finalUrl.searchParams.append(x, params[x]);\n        });\n\n        if (this.dappStorageKey) {\n          finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n        }\n\n        const walletWindow = new PopupHandler({\n          url: finalUrl,\n          features: FEATURES_DEFAULT_WALLET_WINDOW\n        });\n        walletWindow.open();\n      }\n    };\n\n    handleStream(showWalletStream, \"data\", showWalletHandler);\n  }\n\n  async getPublicAddress(_ref2) {\n    let {\n      verifier,\n      verifierId,\n      isExtended = false\n    } = _ref2;\n    if (!configuration.supportedVerifierList.includes(verifier) || !WALLET_OPENLOGIN_VERIFIER_MAP[verifier]) throw new Error(\"Unsupported verifier\");\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({\n      verifier,\n      verifierId\n    });\n    const endpoints = nodeDetails.torusNodeEndpoints;\n    const torusNodePubs = nodeDetails.torusNodePub;\n    const walletVerifier = verifier;\n    const openloginVerifier = WALLET_OPENLOGIN_VERIFIER_MAP[verifier];\n\n    try {\n      const existingV1User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: walletVerifier,\n        verifierId\n      });\n\n      if (existingV1User.typeOfUser === \"v1\") {\n        if (!isExtended) return existingV1User.address;\n        return existingV1User;\n      } // we don't support v2 users with v1 verifiers so get or assign the key for v2 user on v2 `verifier`\n\n\n      const v2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: openloginVerifier,\n        verifierId\n      }, true);\n      if (!isExtended) return v2User.address;\n      return v2User;\n    } catch (error) {\n      if (error !== null && error !== void 0 && error.message.includes(\"Verifier + VerifierID has not yet been assigned\")) {\n        // if user doesn't have key then assign it with v2 verifier\n        const newV2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n          verifier: openloginVerifier,\n          verifierId\n        }, true);\n        if (!isExtended) return newV2User.address;\n        return newV2User;\n      }\n\n      throw error;\n    }\n  }\n\n  getUserInfo(message) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const userInfoAccessStream = this.communicationMux.getStream(\"user_info_access\");\n        userInfoAccessStream.write({\n          name: \"user_info_access_request\"\n        });\n\n        const userInfoAccessHandler = chunk => {\n          const {\n            name,\n            data: {\n              approved,\n              payload,\n              rejected,\n              newRequest\n            }\n          } = chunk;\n\n          if (name === \"user_info_access_response\") {\n            if (approved) {\n              resolve(payload);\n            } else if (rejected) {\n              reject(new Error(\"User rejected the request\"));\n            } else if (newRequest) {\n              const userInfoStream = this.communicationMux.getStream(\"user_info\");\n\n              const userInfoHandler = handlerChunk => {\n                if (handlerChunk.name === \"user_info_response\") {\n                  if (handlerChunk.data.approved) {\n                    resolve(handlerChunk.data.payload);\n                  } else {\n                    reject(new Error(\"User rejected the request\"));\n                  }\n                }\n              };\n\n              handleStream(userInfoStream, \"data\", userInfoHandler);\n              const preopenInstanceId = getPreopenInstanceId();\n\n              this._handleWindow(preopenInstanceId, {\n                target: \"_blank\",\n                features: FEATURES_PROVIDER_CHANGE_WINDOW\n              });\n\n              userInfoStream.write({\n                name: \"user_info_request\",\n                data: {\n                  message,\n                  preopenInstanceId\n                }\n              });\n            }\n          }\n        };\n\n        handleStream(userInfoAccessStream, \"data\", userInfoAccessHandler);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  initiateTopup(provider, params) {\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        const {\n          errors,\n          isValid\n        } = validatePaymentProvider(provider, params);\n\n        if (!isValid) {\n          reject(new Error(JSON.stringify(errors)));\n          return;\n        }\n\n        const topupStream = this.communicationMux.getStream(\"topup\");\n\n        const topupHandler = chunk => {\n          if (chunk.name === \"topup_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(topupStream, \"data\", topupHandler);\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId);\n\n        topupStream.write({\n          name: \"topup_request\",\n          data: {\n            provider,\n            params,\n            preopenInstanceId\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        if (Buffer.from(privateKey, \"hex\").length !== 32) {\n          reject(new Error(\"Invalid private key, Please provide a 32 byte valid secp25k1 private key\"));\n          return;\n        }\n\n        const loginPrivKeyStream = this.communicationMux.getStream(\"login_with_private_key\");\n\n        const loginHandler = chunk => {\n          if (chunk.name === \"login_with_private_key_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(loginPrivKeyStream, \"data\", loginHandler);\n        loginPrivKeyStream.write({\n          name: \"login_with_private_key_request\",\n          data: {\n            privateKey,\n            userInfo\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async showWalletConnectScanner() {\n    if (!this.useWalletConnect) throw new Error(\"Set `useWalletConnect` as true in init function options to use wallet connect scanner\");\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const walletConnectStream = this.communicationMux.getStream(\"wallet_connect_stream\");\n\n        const walletConnectHandler = chunk => {\n          if (chunk.name === \"wallet_connect_stream_res\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n\n            this._displayIframe();\n          }\n        };\n\n        handleStream(walletConnectStream, \"data\", walletConnectHandler);\n        walletConnectStream.write({\n          name: \"wallet_connect_stream_req\"\n        });\n\n        this._displayIframe(true);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  _handleWindow(preopenInstanceId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (preopenInstanceId) {\n      const windowStream = this.communicationMux.getStream(\"window\");\n      const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?preopenInstanceId=\").concat(preopenInstanceId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      const handledWindow = new PopupHandler({\n        url: finalUrl,\n        target,\n        features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(preopenInstanceId, finalUrl.href);\n\n        return;\n      }\n\n      windowStream.write({\n        name: \"opened_window\",\n        data: {\n          preopenInstanceId\n        }\n      });\n\n      const closeHandler = _ref3 => {\n        let {\n          preopenInstanceId: receivedId,\n          close\n        } = _ref3;\n\n        if (receivedId === preopenInstanceId && close) {\n          handledWindow.close();\n          windowStream.removeListener(\"data\", closeHandler);\n        }\n      };\n\n      windowStream.on(\"data\", closeHandler);\n      handledWindow.once(\"close\", () => {\n        windowStream.write({\n          data: {\n            preopenInstanceId,\n            closed: true\n          }\n        });\n        windowStream.removeListener(\"data\", closeHandler);\n      });\n    }\n  }\n\n  _setEmbedWhiteLabel(element) {\n    // Set whitelabel\n    const {\n      theme\n    } = this.whiteLabel || {};\n\n    if (theme) {\n      const {\n        isDark = false,\n        colors = {}\n      } = theme;\n      if (isDark) element.classList.add(\"torus-dark\");\n      if (colors.torusBrand1) element.style.setProperty(\"--torus-brand-1\", colors.torusBrand1);\n      if (colors.torusGray2) element.style.setProperty(\"--torus-gray-2\", colors.torusGray2);\n    }\n  }\n\n  _getLogoUrl() {\n    var _this$whiteLabel, _this$whiteLabel$them;\n\n    let logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n\n    if ((_this$whiteLabel = this.whiteLabel) !== null && _this$whiteLabel !== void 0 && (_this$whiteLabel$them = _this$whiteLabel.theme) !== null && _this$whiteLabel$them !== void 0 && _this$whiteLabel$them.isDark) {\n      var _this$whiteLabel2;\n\n      logoUrl = ((_this$whiteLabel2 = this.whiteLabel) === null || _this$whiteLabel2 === void 0 ? void 0 : _this$whiteLabel2.logoLight) || logoUrl;\n    } else {\n      var _this$whiteLabel3;\n\n      logoUrl = ((_this$whiteLabel3 = this.whiteLabel) === null || _this$whiteLabel3 === void 0 ? void 0 : _this$whiteLabel3.logoDark) || logoUrl;\n    }\n\n    return logoUrl;\n  }\n\n  _sendWidgetVisibilityStatus(status) {\n    const torusWidgetVisibilityStream = this.communicationMux.getStream(\"torus-widget-visibility\");\n    torusWidgetVisibilityStream.write({\n      data: status\n    });\n  }\n\n  _displayIframe() {\n    let isFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this.isIframeFullScreen = isFull;\n  }\n\n  _setupWeb3() {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const metamaskStream = new BasePostMessageStream({\n      name: \"embed_metamask\",\n      target: \"iframe_metamask\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Due to compatibility reasons, we should not set up multiplexing on window.metamaskstream\n    // because the MetamaskInpageProvider also attempts to do so.\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_comm\",\n      target: \"iframe_comm\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Backward compatibility with Gotchi :)\n    // window.metamaskStream = this.communicationStream\n    // compose the inpage provider\n\n    const inpageProvider = new TorusInpageProvider(metamaskStream); // detect eth_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inpageProvider[m];\n\n      inpageProvider[m] = function providerFunc(method) {\n        if (method && method === \"eth_requestAccounts\") {\n          return inpageProvider.enable();\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return originalMethod.apply(this, [method, ...args]);\n      };\n    };\n\n    detectAccountRequestPrototypeModifier(\"send\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n\n    inpageProvider.enable = () => {\n      return new Promise((resolve, reject) => {\n        // If user is already logged in, we assume they have given access to the website\n        inpageProvider.sendAsync({\n          jsonrpc: \"2.0\",\n          id: getPreopenInstanceId(),\n          method: \"eth_requestAccounts\",\n          params: []\n        }, (err, response) => {\n          const {\n            result: res\n          } = response || {};\n\n          if (err) {\n            setTimeout(() => {\n              reject(err);\n            }, 50);\n          } else if (Array.isArray(res) && res.length > 0) {\n            // If user is already rehydrated, resolve this\n            // else wait for something to be written to status stream\n            const handleLoginCb = () => {\n              if (this.requestedVerifier !== \"\" && this.currentVerifier !== this.requestedVerifier) {\n                const {\n                  requestedVerifier\n                } = this; // eslint-disable-next-line promise/no-promise-in-callback\n\n                this.logout() // eslint-disable-next-line promise/always-return\n                .then(_ => {\n                  this.requestedVerifier = requestedVerifier;\n\n                  this._showLoginPopup(true, resolve, reject);\n                }).catch(error => reject(error));\n              } else {\n                resolve(res);\n              }\n            };\n\n            if (this.isLoggedIn) {\n              handleLoginCb();\n            } else {\n              this.isLoginCallback = handleLoginCb;\n            }\n          } else {\n            // set up listener for login\n            this._showLoginPopup(true, resolve, reject);\n          }\n        });\n      });\n    };\n\n    inpageProvider.tryPreopenHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && UNSAFE_METHODS.includes(_payload.method)) {\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId, {\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        _payload.preopenInstanceId = preopenInstanceId;\n      }\n\n      inpageProvider._rpcEngine.handle(_payload, cb);\n    }; // Work around for web3@1.0 deleting the bound `sendAsync` but not the unbound\n    // `sendAsync` method on the prototype, causing `this` reference issues with drizzle\n\n\n    const proxiedInpageProvider = new Proxy(inpageProvider, {\n      // straight up lie that we deleted the property so that it doesnt\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.ethereum = proxiedInpageProvider;\n    const communicationMux = setupMultiplex(communicationStream);\n    this.communicationMux = communicationMux;\n    const windowStream = communicationMux.getStream(\"window\");\n    windowStream.on(\"data\", chunk => {\n      if (chunk.name === \"create_window\") {\n        // url is the url we need to open\n        // we can pass the final url upfront so that it removes the step of redirecting to /redirect and waiting for finalUrl\n        this._createPopupBlockAlert(chunk.data.preopenInstanceId, chunk.data.url);\n      }\n    }); // show torus widget if button clicked\n\n    const widgetStream = communicationMux.getStream(\"widget\");\n    widgetStream.on(\"data\", chunk => {\n      const {\n        data\n      } = chunk;\n\n      this._displayIframe(data);\n    }); // Show torus button if wallet has been hydrated/detected\n\n    const statusStream = communicationMux.getStream(\"status\");\n    statusStream.on(\"data\", status => {\n      // login\n      if (status.loggedIn) {\n        this.isLoggedIn = status.loggedIn;\n        this.currentVerifier = status.verifier;\n      } // logout\n      else this._displayIframe();\n\n      if (this.isLoginCallback) {\n        this.isLoginCallback();\n        delete this.isLoginCallback;\n      }\n    });\n    this.provider = proxiedInpageProvider;\n    if (this.provider.shouldSendMetadata) sendSiteMetadata(this.provider._rpcEngine);\n\n    inpageProvider._initializeState();\n\n    log.debug(\"Torus - injected provider\");\n  }\n\n  _showLoginPopup(calledFromEmbed, resolve, reject) {\n    const loginHandler = data => {\n      const {\n        err,\n        selectedAddress\n      } = data;\n\n      if (err) {\n        log.error(err);\n        if (reject) reject(err);\n      } // returns an array (cause accounts expects it)\n      else if (resolve) resolve([selectedAddress]);\n\n      if (this.isIframeFullScreen) this._displayIframe();\n    };\n\n    const oauthStream = this.communicationMux.getStream(\"oauth\");\n\n    if (!this.requestedVerifier) {\n      this._displayIframe(true);\n\n      handleStream(oauthStream, \"data\", loginHandler);\n      oauthStream.write({\n        name: \"oauth_modal\",\n        data: {\n          calledFromEmbed\n        }\n      });\n    } else {\n      handleStream(oauthStream, \"data\", loginHandler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId);\n\n      oauthStream.write({\n        name: \"oauth\",\n        data: {\n          calledFromEmbed,\n          verifier: this.requestedVerifier,\n          preopenInstanceId,\n          login_hint: this.loginHint\n        }\n      });\n    }\n  }\n\n  _createPopupBlockAlert(preopenInstanceId, url) {\n    const logoUrl = this._getLogoUrl();\n\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(preopenInstanceId, {\n          url,\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    this._setEmbedWhiteLabel(torusAlert);\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.style.display = \"block\";\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    runOnLoad(attachOnLoad);\n    runOnLoad(bindOnLoad);\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInpageProvider, WALLET_OPENLOGIN_VERIFIER_MAP, Torus as default };\n//# sourceMappingURL=torus.esm.js.map\n"]},"metadata":{},"sourceType":"module"}