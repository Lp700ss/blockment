{"ast":null,"code":"import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent } from \"@walletconnect/utils\";\n\nclass EventManager {\n  constructor() {\n    this._eventEmitters = [];\n  }\n\n  subscribe(eventEmitter) {\n    this._eventEmitters.push(eventEmitter);\n  }\n\n  unsubscribe(event) {\n    this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n  }\n\n  trigger(payload) {\n    let eventEmitters = [];\n    let event;\n\n    if (isJsonRpcRequest(payload)) {\n      event = payload.method;\n    } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n      event = `response:${payload.id}`;\n    } else if (isInternalEvent(payload)) {\n      event = payload.event;\n    } else {\n      event = \"\";\n    }\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n\n    if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === \"call_request\");\n    }\n\n    eventEmitters.forEach(eventEmitter => {\n      if (isJsonRpcResponseError(payload)) {\n        const error = new Error(payload.error.message);\n        eventEmitter.callback(error, null);\n      } else {\n        eventEmitter.callback(null, payload);\n      }\n    });\n  }\n\n}\n\nexport default EventManager;","map":{"version":3,"sources":["../../src/events.ts"],"names":[],"mappings":"AAAA,SACE,gBADF,EAEE,wBAFF,EAGE,sBAHF,EAIE,eAJF,EAKE,eALF,QAMO,sBANP;;AAiBA,MAAM,YAAN,CAAkB;EAGhB,WAAA,GAAA;IACE,KAAK,cAAL,GAAsB,EAAtB;EACD;;EAEM,SAAS,CAAC,YAAD,EAA4B;IAC1C,KAAK,cAAL,CAAoB,IAApB,CAAyB,YAAzB;EACD;;EAEM,WAAW,CAAC,KAAD,EAAc;IAC9B,KAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,MAApB,CAA2B,CAAC,IAAI,CAAC,CAAC,KAAF,KAAY,KAA5C,CAAtB;EACD;;EAEM,OAAO,CACZ,OADY,EAC+E;IAE3F,IAAI,aAAa,GAAoB,EAArC;IACA,IAAI,KAAJ;;IAEA,IAAI,gBAAgB,CAAC,OAAD,CAApB,EAA+B;MAC7B,KAAK,GAAG,OAAO,CAAC,MAAhB;IACD,CAFD,MAEO,IAAI,wBAAwB,CAAC,OAAD,CAAxB,IAAqC,sBAAsB,CAAC,OAAD,CAA/D,EAA0E;MAC/E,KAAK,GAAG,YAAY,OAAO,CAAC,EAAE,EAA9B;IACD,CAFM,MAEA,IAAI,eAAe,CAAC,OAAD,CAAnB,EAA8B;MACnC,KAAK,GAAG,OAAO,CAAC,KAAhB;IACD,CAFM,MAEA;MACL,KAAK,GAAG,EAAR;IACD;;IAED,IAAI,KAAJ,EAAW;MACT,aAAa,GAAG,KAAK,cAAL,CAAoB,MAApB,CACb,YAAD,IAAiC,YAAY,CAAC,KAAb,KAAuB,KAD1C,CAAhB;IAGD;;IAED,IACE,CAAC,CAAC,aAAD,IAAkB,CAAC,aAAa,CAAC,MAAlC,KACA,CAAC,eAAe,CAAC,KAAD,CADhB,IAEA,CAAC,eAAe,CAAC,KAAD,CAHlB,EAIE;MACA,aAAa,GAAG,KAAK,cAAL,CAAoB,MAApB,CACb,YAAD,IAAiC,YAAY,CAAC,KAAb,KAAuB,cAD1C,CAAhB;IAGD;;IAED,aAAa,CAAC,OAAd,CAAuB,YAAD,IAAgC;MACpD,IAAI,sBAAsB,CAAC,OAAD,CAA1B,EAAqC;QACnC,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAO,CAAC,KAAR,CAAc,OAAxB,CAAd;QACA,YAAY,CAAC,QAAb,CAAsB,KAAtB,EAA6B,IAA7B;MACD,CAHD,MAGO;QACL,YAAY,CAAC,QAAb,CAAsB,IAAtB,EAA4B,OAA5B;MACD;IACF,CAPD;EAQD;;AAvDe;;AA0DlB,eAAe,YAAf","sourceRoot":"","sourcesContent":["import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent, } from \"@walletconnect/utils\";\nclass EventManager {\n    constructor() {\n        this._eventEmitters = [];\n    }\n    subscribe(eventEmitter) {\n        this._eventEmitters.push(eventEmitter);\n    }\n    unsubscribe(event) {\n        this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n    }\n    trigger(payload) {\n        let eventEmitters = [];\n        let event;\n        if (isJsonRpcRequest(payload)) {\n            event = payload.method;\n        }\n        else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n            event = `response:${payload.id}`;\n        }\n        else if (isInternalEvent(payload)) {\n            event = payload.event;\n        }\n        else {\n            event = \"\";\n        }\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        if ((!eventEmitters || !eventEmitters.length) &&\n            !isReservedEvent(event) &&\n            !isInternalEvent(event)) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === \"call_request\");\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            if (isJsonRpcResponseError(payload)) {\n                const error = new Error(payload.error.message);\n                eventEmitter.callback(error, null);\n            }\n            else {\n                eventEmitter.callback(null, payload);\n            }\n        });\n    }\n}\nexport default EventManager;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}