{"ast":null,"code":"/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    define(definition);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = definition();\n  } else {\n    root.log = definition();\n  }\n})(this, function () {\n  \"use strict\"; // Slightly dubious tricks to cut down minimized file size\n\n  var noop = function () {};\n\n  var undefinedType = \"undefined\";\n  var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n  var logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"]; // Cross-browser bind equivalent that works at least back to IE6\n\n  function bindMethod(obj, methodName) {\n    var method = obj[methodName];\n\n    if (typeof method.bind === 'function') {\n      return method.bind(obj);\n    } else {\n      try {\n        return Function.prototype.bind.call(method, obj);\n      } catch (e) {\n        // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n        return function () {\n          return Function.prototype.apply.apply(method, [obj, arguments]);\n        };\n      }\n    }\n  } // Trace() doesn't print the message in IE, so for that case we need to wrap it\n\n\n  function traceForIE() {\n    if (console.log) {\n      if (console.log.apply) {\n        console.log.apply(console, arguments);\n      } else {\n        // In old IE, native console methods themselves don't have apply().\n        Function.prototype.apply.apply(console.log, [console, arguments]);\n      }\n    }\n\n    if (console.trace) console.trace();\n  } // Build the best logging method possible for this env\n  // Wherever possible we want to bind, not wrap, to preserve stack traces\n\n\n  function realMethod(methodName) {\n    if (methodName === 'debug') {\n      methodName = 'log';\n    }\n\n    if (typeof console === undefinedType) {\n      return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    } else if (methodName === 'trace' && isIE) {\n      return traceForIE;\n    } else if (console[methodName] !== undefined) {\n      return bindMethod(console, methodName);\n    } else if (console.log !== undefined) {\n      return bindMethod(console, 'log');\n    } else {\n      return noop;\n    }\n  } // These private functions always need `this` to be set properly\n\n\n  function replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n      var methodName = logMethods[i];\n      this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n    } // Define log.log as an alias for log.debug\n\n\n    this.log = this.debug;\n  } // In old IE versions, the console isn't present until you first open it.\n  // We build realMethod() replacements here that regenerate logging methods\n\n\n  function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n      if (typeof console !== undefinedType) {\n        replaceLoggingMethods.call(this, level, loggerName);\n        this[methodName].apply(this, arguments);\n      }\n    };\n  } // By default, we use closely bound real methods wherever possible, and\n  // otherwise we wait for a console to appear, and then try again.\n\n\n  function defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n  }\n\n  function Logger(name, defaultLevel, factory) {\n    var self = this;\n    var currentLevel;\n    defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n    var storageKey = \"loglevel\";\n\n    if (typeof name === \"string\") {\n      storageKey += \":\" + name;\n    } else if (typeof name === \"symbol\") {\n      storageKey = undefined;\n    }\n\n    function persistLevelIfPossible(levelNum) {\n      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n      if (typeof window === undefinedType || !storageKey) return; // Use localStorage if available\n\n      try {\n        window.localStorage[storageKey] = levelName;\n        return;\n      } catch (ignore) {} // Use session cookie as fallback\n\n\n      try {\n        window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n      } catch (ignore) {}\n    }\n\n    function getPersistedLevel() {\n      var storedLevel;\n      if (typeof window === undefinedType || !storageKey) return;\n\n      try {\n        storedLevel = window.localStorage[storageKey];\n      } catch (ignore) {} // Fallback to cookies if local storage gives us nothing\n\n\n      if (typeof storedLevel === undefinedType) {\n        try {\n          var cookie = window.document.cookie;\n          var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n\n          if (location !== -1) {\n            storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n          }\n        } catch (ignore) {}\n      } // If the stored level is not valid, treat it as if nothing was stored.\n\n\n      if (self.levels[storedLevel] === undefined) {\n        storedLevel = undefined;\n      }\n\n      return storedLevel;\n    }\n\n    function clearPersistedLevel() {\n      if (typeof window === undefinedType || !storageKey) return; // Use localStorage if available\n\n      try {\n        window.localStorage.removeItem(storageKey);\n        return;\n      } catch (ignore) {} // Use session cookie as fallback\n\n\n      try {\n        window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n      } catch (ignore) {}\n    }\n    /*\n     *\n     * Public logger API - see https://github.com/pimterry/loglevel for details\n     *\n     */\n\n\n    self.name = name;\n    self.levels = {\n      \"TRACE\": 0,\n      \"DEBUG\": 1,\n      \"INFO\": 2,\n      \"WARN\": 3,\n      \"ERROR\": 4,\n      \"SILENT\": 5\n    };\n    self.methodFactory = factory || defaultMethodFactory;\n\n    self.getLevel = function () {\n      return currentLevel;\n    };\n\n    self.setLevel = function (level, persist) {\n      if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n        level = self.levels[level.toUpperCase()];\n      }\n\n      if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n        currentLevel = level;\n\n        if (persist !== false) {\n          // defaults to true\n          persistLevelIfPossible(level);\n        }\n\n        replaceLoggingMethods.call(self, level, name);\n\n        if (typeof console === undefinedType && level < self.levels.SILENT) {\n          return \"No console available for logging\";\n        }\n      } else {\n        throw \"log.setLevel() called with invalid level: \" + level;\n      }\n    };\n\n    self.setDefaultLevel = function (level) {\n      defaultLevel = level;\n\n      if (!getPersistedLevel()) {\n        self.setLevel(level, false);\n      }\n    };\n\n    self.resetLevel = function () {\n      self.setLevel(defaultLevel, false);\n      clearPersistedLevel();\n    };\n\n    self.enableAll = function (persist) {\n      self.setLevel(self.levels.TRACE, persist);\n    };\n\n    self.disableAll = function (persist) {\n      self.setLevel(self.levels.SILENT, persist);\n    }; // Initialize with the right level\n\n\n    var initialLevel = getPersistedLevel();\n\n    if (initialLevel == null) {\n      initialLevel = defaultLevel;\n    }\n\n    self.setLevel(initialLevel, false);\n  }\n  /*\n   *\n   * Top-level API\n   *\n   */\n\n\n  var defaultLogger = new Logger();\n  var _loggersByName = {};\n\n  defaultLogger.getLogger = function getLogger(name) {\n    if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n      throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n\n    var logger = _loggersByName[name];\n\n    if (!logger) {\n      logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n\n    return logger;\n  }; // Grab the current global log variable in case of overwrite\n\n\n  var _log = typeof window !== undefinedType ? window.log : undefined;\n\n  defaultLogger.noConflict = function () {\n    if (typeof window !== undefinedType && window.log === defaultLogger) {\n      window.log = _log;\n    }\n\n    return defaultLogger;\n  };\n\n  defaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n  }; // ES6 default export, for compatibility\n\n\n  defaultLogger['default'] = defaultLogger;\n  return defaultLogger;\n});","map":{"version":3,"names":["root","definition","define","amd","module","exports","log","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","clearPersistedLevel","removeItem","getLevel","setLevel","persist","SILENT","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/loglevel/lib/loglevel.js"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}