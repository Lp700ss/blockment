{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseRole = _interopRequireDefault(require(\"./ParseRole\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar PUBLIC_KEY = '*';\n/**\n * Creates a new ACL.\n * If no argument is given, the ACL has no permissions for anyone.\n * If the argument is a Parse.User, the ACL will have read and write\n *   permission for only that user.\n * If the argument is any other JSON object, that object will be interpretted\n *   as a serialized ACL created with toJSON().\n *\n * <p>An ACL, or Access Control List can be added to any\n * <code>Parse.Object</code> to restrict access to only a subset of users\n * of your application.</p>\n *\n * @alias Parse.ACL\n */\n\nvar ParseACL = /*#__PURE__*/function () {\n  /**\n   * @param {(Parse.User | object)} arg1 The user to initialize the ACL for\n   */\n  function ParseACL(arg1\n  /*: ParseUser | ByIdMap*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseACL);\n    (0, _defineProperty2.default)(this, \"permissionsById\", void 0);\n    this.permissionsById = {};\n\n    if (arg1 && (0, _typeof2.default)(arg1) === 'object') {\n      if (arg1 instanceof _ParseUser.default) {\n        this.setReadAccess(arg1, true);\n        this.setWriteAccess(arg1, true);\n      } else {\n        for (var _userId in arg1) {\n          var accessList = arg1[_userId];\n          this.permissionsById[_userId] = {};\n\n          for (var _permission in accessList) {\n            var allowed = accessList[_permission];\n\n            if (_permission !== 'read' && _permission !== 'write') {\n              throw new TypeError('Tried to create an ACL with an invalid permission type.');\n            }\n\n            if (typeof allowed !== 'boolean') {\n              throw new TypeError('Tried to create an ACL with an invalid permission value.');\n            }\n\n            this.permissionsById[_userId][_permission] = allowed;\n          }\n        }\n      }\n    } else if (typeof arg1 === 'function') {\n      throw new TypeError('ParseACL constructed with a function. Did you forget ()?');\n    }\n  }\n  /**\n   * Returns a JSON-encoded version of the ACL.\n   *\n   * @returns {object}\n   */\n\n\n  (0, _createClass2.default)(ParseACL, [{\n    key: \"toJSON\",\n    value: function ()\n    /*: ByIdMap*/\n    {\n      var permissions = {};\n\n      for (var p in this.permissionsById) {\n        permissions[p] = this.permissionsById[p];\n      }\n\n      return permissions;\n    }\n    /**\n     * Returns whether this ACL is equal to another object\n     *\n     * @param {ParseACL} other The other object's ACL to compare to\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: ParseACL*/\n    )\n    /*: boolean*/\n    {\n      if (!(other instanceof ParseACL)) {\n        return false;\n      }\n\n      var users = (0, _keys.default)(this.permissionsById);\n      var otherUsers = (0, _keys.default)(other.permissionsById);\n\n      if (users.length !== otherUsers.length) {\n        return false;\n      }\n\n      for (var u in this.permissionsById) {\n        if (!other.permissionsById[u]) {\n          return false;\n        }\n\n        if (this.permissionsById[u].read !== other.permissionsById[u].read) {\n          return false;\n        }\n\n        if (this.permissionsById[u].write !== other.permissionsById[u].write) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_setAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = \"role:\".concat(name);\n      }\n\n      if (typeof userId !== 'string') {\n        throw new TypeError('userId must be a string.');\n      }\n\n      if (typeof allowed !== 'boolean') {\n        throw new TypeError('allowed must be either true or false.');\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        if (!allowed) {\n          // The user already doesn't have this permission, so no action is needed\n          return;\n        }\n\n        permissions = {};\n        this.permissionsById[userId] = permissions;\n      }\n\n      if (allowed) {\n        this.permissionsById[userId][accessType] = true;\n      } else {\n        delete permissions[accessType];\n\n        if ((0, _keys.default)(permissions).length === 0) {\n          delete this.permissionsById[userId];\n        }\n      }\n    }\n  }, {\n    key: \"_getAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n\n        if (!userId) {\n          throw new Error('Cannot get access for a ParseUser without an ID');\n        }\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = \"role:\".concat(name);\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        return false;\n      }\n\n      return !!permissions[accessType];\n    }\n    /**\n     * Sets whether the given user is allowed to read this object.\n     *\n     * @param userId An instance of Parse.User or its objectId.\n     * @param {boolean} allowed Whether that user should have read access.\n     */\n\n  }, {\n    key: \"setReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('read', userId, allowed);\n    }\n    /**\n     * Get whether the given user id is *explicitly* allowed to read this object.\n     * Even if this returns false, the user may still be able to access it if\n     * getPublicReadAccess returns true or a role that the user belongs to has\n     * write access.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('read', userId);\n    }\n    /**\n     * Sets whether the given user id is allowed to write this object.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..\n     * @param {boolean} allowed Whether that user should have write access.\n     */\n\n  }, {\n    key: \"setWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('write', userId, allowed);\n    }\n    /**\n     * Gets whether the given user id is *explicitly* allowed to write this object.\n     * Even if this returns false, the user may still be able to write it if\n     * getPublicWriteAccess returns true or a role that the user belongs to has\n     * write access.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('write', userId);\n    }\n    /**\n     * Sets whether the public is allowed to read this object.\n     *\n     * @param {boolean} allowed\n     */\n\n  }, {\n    key: \"setPublicReadAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setReadAccess(PUBLIC_KEY, allowed);\n    }\n    /**\n     * Gets whether the public is allowed to read this object.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getPublicReadAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getReadAccess(PUBLIC_KEY);\n    }\n    /**\n     * Sets whether the public is allowed to write this object.\n     *\n     * @param {boolean} allowed\n     */\n\n  }, {\n    key: \"setPublicWriteAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setWriteAccess(PUBLIC_KEY, allowed);\n    }\n    /**\n     * Gets whether the public is allowed to write this object.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getPublicWriteAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getWriteAccess(PUBLIC_KEY);\n    }\n    /**\n     * Gets whether users belonging to the given role are allowed\n     * to read this object. Even if this returns false, the role may\n     * still be able to write it if a parent role has read access.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @returns {boolean} true if the role has read access. false otherwise.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"getRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getReadAccess(\"role:\".concat(role));\n    }\n    /**\n     * Gets whether users belonging to the given role are allowed\n     * to write this object. Even if this returns false, the role may\n     * still be able to write it if a parent role has write access.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @returns {boolean} true if the role has write access. false otherwise.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"getRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getWriteAccess(\"role:\".concat(role));\n    }\n    /**\n     * Sets whether users belonging to the given role are allowed\n     * to read this object.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @param {boolean} allowed Whether the given role can read this object.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"setRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setReadAccess(\"role:\".concat(role), allowed);\n    }\n    /**\n     * Sets whether users belonging to the given role are allowed\n     * to write this object.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @param {boolean} allowed Whether the given role can write this object.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"setRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setWriteAccess(\"role:\".concat(role), allowed);\n    }\n  }]);\n  return ParseACL;\n}();\n\nvar _default = ParseACL;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_keys","_typeof2","_classCallCheck2","_createClass2","_defineProperty2","_ParseRole","_ParseUser","PUBLIC_KEY","ParseACL","arg1","permissionsById","setReadAccess","setWriteAccess","_userId","accessList","_permission","allowed","TypeError","key","permissions","p","other","users","otherUsers","length","u","read","write","accessType","userId","id","name","getName","concat","Error","_setAccess","_getAccess","getReadAccess","getWriteAccess","role","_default"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/ParseACL.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseRole = _interopRequireDefault(require(\"./ParseRole\"));\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar PUBLIC_KEY = '*';\n/**\n * Creates a new ACL.\n * If no argument is given, the ACL has no permissions for anyone.\n * If the argument is a Parse.User, the ACL will have read and write\n *   permission for only that user.\n * If the argument is any other JSON object, that object will be interpretted\n *   as a serialized ACL created with toJSON().\n *\n * <p>An ACL, or Access Control List can be added to any\n * <code>Parse.Object</code> to restrict access to only a subset of users\n * of your application.</p>\n *\n * @alias Parse.ACL\n */\n\nvar ParseACL = /*#__PURE__*/function () {\n  /**\n   * @param {(Parse.User | object)} arg1 The user to initialize the ACL for\n   */\n  function ParseACL(arg1\n  /*: ParseUser | ByIdMap*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseACL);\n    (0, _defineProperty2.default)(this, \"permissionsById\", void 0);\n    this.permissionsById = {};\n\n    if (arg1 && (0, _typeof2.default)(arg1) === 'object') {\n      if (arg1 instanceof _ParseUser.default) {\n        this.setReadAccess(arg1, true);\n        this.setWriteAccess(arg1, true);\n      } else {\n        for (var _userId in arg1) {\n          var accessList = arg1[_userId];\n          this.permissionsById[_userId] = {};\n\n          for (var _permission in accessList) {\n            var allowed = accessList[_permission];\n\n            if (_permission !== 'read' && _permission !== 'write') {\n              throw new TypeError('Tried to create an ACL with an invalid permission type.');\n            }\n\n            if (typeof allowed !== 'boolean') {\n              throw new TypeError('Tried to create an ACL with an invalid permission value.');\n            }\n\n            this.permissionsById[_userId][_permission] = allowed;\n          }\n        }\n      }\n    } else if (typeof arg1 === 'function') {\n      throw new TypeError('ParseACL constructed with a function. Did you forget ()?');\n    }\n  }\n  /**\n   * Returns a JSON-encoded version of the ACL.\n   *\n   * @returns {object}\n   */\n\n\n  (0, _createClass2.default)(ParseACL, [{\n    key: \"toJSON\",\n    value: function ()\n    /*: ByIdMap*/\n    {\n      var permissions = {};\n\n      for (var p in this.permissionsById) {\n        permissions[p] = this.permissionsById[p];\n      }\n\n      return permissions;\n    }\n    /**\n     * Returns whether this ACL is equal to another object\n     *\n     * @param {ParseACL} other The other object's ACL to compare to\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: ParseACL*/\n    )\n    /*: boolean*/\n    {\n      if (!(other instanceof ParseACL)) {\n        return false;\n      }\n\n      var users = (0, _keys.default)(this.permissionsById);\n      var otherUsers = (0, _keys.default)(other.permissionsById);\n\n      if (users.length !== otherUsers.length) {\n        return false;\n      }\n\n      for (var u in this.permissionsById) {\n        if (!other.permissionsById[u]) {\n          return false;\n        }\n\n        if (this.permissionsById[u].read !== other.permissionsById[u].read) {\n          return false;\n        }\n\n        if (this.permissionsById[u].write !== other.permissionsById[u].write) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_setAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = \"role:\".concat(name);\n      }\n\n      if (typeof userId !== 'string') {\n        throw new TypeError('userId must be a string.');\n      }\n\n      if (typeof allowed !== 'boolean') {\n        throw new TypeError('allowed must be either true or false.');\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        if (!allowed) {\n          // The user already doesn't have this permission, so no action is needed\n          return;\n        }\n\n        permissions = {};\n        this.permissionsById[userId] = permissions;\n      }\n\n      if (allowed) {\n        this.permissionsById[userId][accessType] = true;\n      } else {\n        delete permissions[accessType];\n\n        if ((0, _keys.default)(permissions).length === 0) {\n          delete this.permissionsById[userId];\n        }\n      }\n    }\n  }, {\n    key: \"_getAccess\",\n    value: function (accessType\n    /*: string*/\n    , userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (userId instanceof _ParseUser.default) {\n        userId = userId.id;\n\n        if (!userId) {\n          throw new Error('Cannot get access for a ParseUser without an ID');\n        }\n      } else if (userId instanceof _ParseRole.default) {\n        var name = userId.getName();\n\n        if (!name) {\n          throw new TypeError('Role must have a name');\n        }\n\n        userId = \"role:\".concat(name);\n      }\n\n      var permissions = this.permissionsById[userId];\n\n      if (!permissions) {\n        return false;\n      }\n\n      return !!permissions[accessType];\n    }\n    /**\n     * Sets whether the given user is allowed to read this object.\n     *\n     * @param userId An instance of Parse.User or its objectId.\n     * @param {boolean} allowed Whether that user should have read access.\n     */\n\n  }, {\n    key: \"setReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('read', userId, allowed);\n    }\n    /**\n     * Get whether the given user id is *explicitly* allowed to read this object.\n     * Even if this returns false, the user may still be able to access it if\n     * getPublicReadAccess returns true or a role that the user belongs to has\n     * write access.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getReadAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('read', userId);\n    }\n    /**\n     * Sets whether the given user id is allowed to write this object.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role..\n     * @param {boolean} allowed Whether that user should have write access.\n     */\n\n  }, {\n    key: \"setWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      this._setAccess('write', userId, allowed);\n    }\n    /**\n     * Gets whether the given user id is *explicitly* allowed to write this object.\n     * Even if this returns false, the user may still be able to write it if\n     * getPublicWriteAccess returns true or a role that the user belongs to has\n     * write access.\n     *\n     * @param userId An instance of Parse.User or its objectId, or a Parse.Role.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getWriteAccess\",\n    value: function (userId\n    /*: ParseUser | ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      return this._getAccess('write', userId);\n    }\n    /**\n     * Sets whether the public is allowed to read this object.\n     *\n     * @param {boolean} allowed\n     */\n\n  }, {\n    key: \"setPublicReadAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setReadAccess(PUBLIC_KEY, allowed);\n    }\n    /**\n     * Gets whether the public is allowed to read this object.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getPublicReadAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getReadAccess(PUBLIC_KEY);\n    }\n    /**\n     * Sets whether the public is allowed to write this object.\n     *\n     * @param {boolean} allowed\n     */\n\n  }, {\n    key: \"setPublicWriteAccess\",\n    value: function (allowed\n    /*: boolean*/\n    ) {\n      this.setWriteAccess(PUBLIC_KEY, allowed);\n    }\n    /**\n     * Gets whether the public is allowed to write this object.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"getPublicWriteAccess\",\n    value: function ()\n    /*: boolean*/\n    {\n      return this.getWriteAccess(PUBLIC_KEY);\n    }\n    /**\n     * Gets whether users belonging to the given role are allowed\n     * to read this object. Even if this returns false, the role may\n     * still be able to write it if a parent role has read access.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @returns {boolean} true if the role has read access. false otherwise.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"getRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getReadAccess(\"role:\".concat(role));\n    }\n    /**\n     * Gets whether users belonging to the given role are allowed\n     * to write this object. Even if this returns false, the role may\n     * still be able to write it if a parent role has write access.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @returns {boolean} true if the role has write access. false otherwise.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"getRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    )\n    /*: boolean*/\n    {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      return this.getWriteAccess(\"role:\".concat(role));\n    }\n    /**\n     * Sets whether users belonging to the given role are allowed\n     * to read this object.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @param {boolean} allowed Whether the given role can read this object.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"setRoleReadAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setReadAccess(\"role:\".concat(role), allowed);\n    }\n    /**\n     * Sets whether users belonging to the given role are allowed\n     * to write this object.\n     *\n     * @param role The name of the role, or a Parse.Role object.\n     * @param {boolean} allowed Whether the given role can write this object.\n     * @throws {TypeError} If role is neither a Parse.Role nor a String.\n     */\n\n  }, {\n    key: \"setRoleWriteAccess\",\n    value: function (role\n    /*: ParseRole | string*/\n    , allowed\n    /*: boolean*/\n    ) {\n      if (role instanceof _ParseRole.default) {\n        // Normalize to the String name\n        role = role.getName();\n      }\n\n      if (typeof role !== 'string') {\n        throw new TypeError('role must be a ParseRole or a String');\n      }\n\n      this.setWriteAccess(\"role:\".concat(role), allowed);\n    }\n  }]);\n  return ParseACL;\n}();\n\nvar _default = ParseACL;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}