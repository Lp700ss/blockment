{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  var requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\n    requestOptions.context = options.context;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', \"functions/\".concat(name), payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', \"jobs/\".concat(name), payload, options);\n  }\n};\n\n_CoreManager.default.setCloudController(DefaultController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","getJobStatus","getJobsData","run","startJob","_keys","_promise","_typeof2","_CoreManager","_decode","_encode","_ParseError","_ParseQuery","_ParseObject","name","data","options","length","TypeError","requestOptions","useMasterKey","sessionToken","context","default","getCloudController","jobStatusId","query","get","DefaultController","RESTController","getRESTController","payload","request","concat","then","res","hasOwnProperty","INVALID_JSON","decoded","resolve","result","undefined","setCloudController"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/Cloud.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getJobStatus = getJobStatus;\nexports.getJobsData = getJobsData;\nexports.run = run;\nexports.startJob = startJob;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions for calling and declaring\n * <a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n * <p><strong><em>\n *   Some functions are only available from Cloud Code.\n * </em></strong></p>\n *\n * @class Parse.Cloud\n * @static\n * @hideconstructor\n */\n\n/**\n * Makes a call to a cloud function.\n *\n * @function run\n * @name Parse.Cloud.run\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @param {object} options\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction run(name\n/*: string*/\n, data\n/*: mixed*/\n, options\n/*: RequestOptions*/\n)\n/*: Promise<mixed>*/\n{\n  options = options || {};\n\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud function name must be a string.');\n  }\n\n  var requestOptions = {};\n\n  if (options.useMasterKey) {\n    requestOptions.useMasterKey = options.useMasterKey;\n  }\n\n  if (options.sessionToken) {\n    requestOptions.sessionToken = options.sessionToken;\n  }\n\n  if (options.context && (0, _typeof2.default)(options.context) === 'object') {\n    requestOptions.context = options.context;\n  }\n\n  return _CoreManager.default.getCloudController().run(name, data, requestOptions);\n}\n/**\n * Gets data for the current set of cloud jobs.\n *\n * @function getJobsData\n * @name Parse.Cloud.getJobsData\n * @returns {Promise} A promise that will be resolved with the result\n * of the function.\n */\n\n\nfunction getJobsData()\n/*: Promise<Object>*/\n{\n  return _CoreManager.default.getCloudController().getJobsData({\n    useMasterKey: true\n  });\n}\n/**\n * Starts a given cloud job, which will process asynchronously.\n *\n * @function startJob\n * @name Parse.Cloud.startJob\n * @param {string} name The function name.\n * @param {object} data The parameters to send to the cloud function.\n * @returns {Promise} A promise that will be resolved with the jobStatusId\n * of the job.\n */\n\n\nfunction startJob(name\n/*: string*/\n, data\n/*: mixed*/\n)\n/*: Promise<string>*/\n{\n  if (typeof name !== 'string' || name.length === 0) {\n    throw new TypeError('Cloud job name must be a string.');\n  }\n\n  return _CoreManager.default.getCloudController().startJob(name, data, {\n    useMasterKey: true\n  });\n}\n/**\n * Gets job status by Id\n *\n * @function getJobStatus\n * @name Parse.Cloud.getJobStatus\n * @param {string} jobStatusId The Id of Job Status.\n * @returns {Parse.Object} Status of Job.\n */\n\n\nfunction getJobStatus(jobStatusId\n/*: string*/\n)\n/*: Promise<ParseObject>*/\n{\n  var query = new _ParseQuery.default('_JobStatus');\n  return query.get(jobStatusId, {\n    useMasterKey: true\n  });\n}\n\nvar DefaultController = {\n  run: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    var request = RESTController.request('POST', \"functions/\".concat(name), payload, options);\n    return request.then(function (res) {\n      if ((0, _typeof2.default)(res) === 'object' && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty('result')) {\n        throw new _ParseError.default(_ParseError.default.INVALID_JSON, 'The server returned an invalid response.');\n      }\n\n      var decoded = (0, _decode.default)(res);\n\n      if (decoded && decoded.hasOwnProperty('result')) {\n        return _promise.default.resolve(decoded.result);\n      }\n\n      return _promise.default.resolve(undefined);\n    });\n  },\n  getJobsData: function (options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'cloud_code/jobs/data', null, options);\n  },\n  startJob: function (name, data, options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var payload = (0, _encode.default)(data, true);\n    return RESTController.request('POST', \"jobs/\".concat(name), payload, options);\n  }\n};\n\n_CoreManager.default.setCloudController(DefaultController);"],"mappings":"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"},"metadata":{},"sourceType":"script"}