{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { XMLHttpRequest } from \"xhr2-cookies\";\nimport { getFromWindow } from \"@walletconnect/utils\";\nconst XHR = getFromWindow(\"XMLHttpRequest\") || XMLHttpRequest;\n\nclass HTTPConnection extends EventEmitter {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n\n  formatError(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return {\n      error: {\n        message,\n        code\n      },\n      id: payload.id,\n      jsonrpc: payload.jsonrpc\n    };\n  }\n\n  send(payload, internal) {\n    return new Promise(resolve => {\n      if (payload.method === \"eth_subscribe\") {\n        const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n        this.emit(\"error\", error);\n        return resolve(error);\n      }\n\n      const xhr = new XHR();\n      let responded = false;\n\n      const res = (err, result) => {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            const {\n              id,\n              jsonrpc\n            } = payload;\n            const response = err ? {\n              id,\n              jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id,\n              jsonrpc,\n              result\n            };\n            this.emit(\"payload\", response);\n            resolve(response);\n          }\n        }\n      };\n\n      xhr.open(\"POST\", this.url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n\n}\n\nexport default HTTPConnection;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAP,MAAyB,eAAzB;AACA,SAAS,cAAT,QAA+B,cAA/B;AAEA,SAAS,aAAT,QAA8B,sBAA9B;AAIA,MAAM,GAAG,GAAG,aAAa,CAAwB,gBAAxB,CAAb,IAA0D,cAAtE;;AAIA,MAAM,cAAN,SAA6B,YAA7B,CAAyC;EAGvC,WAAA,CAAY,GAAZ,EAAuB;IACrB;IACA,KAAK,GAAL,GAAW,GAAX;EACD;;EAED,WAAW,CAAC,OAAD,EAAe,OAAf,EAAyC;IAAA,IAAT,IAAS,uEAAF,CAAC,CAAC;IAClD,OAAO;MACL,KAAK,EAAE;QAAE,OAAF;QAAW;MAAX,CADF;MAEL,EAAE,EAAE,OAAO,CAAC,EAFP;MAGL,OAAO,EAAE,OAAO,CAAC;IAHZ,CAAP;EAKD;;EAEM,IAAI,CAAC,OAAD,EAAe,QAAf,EAA6B;IACtC,OAAO,IAAI,OAAJ,CAAY,OAAO,IAAG;MAC3B,IAAI,OAAO,CAAC,MAAR,KAAmB,eAAvB,EAAwC;QACtC,MAAM,KAAK,GAAG,KAAK,WAAL,CACZ,OADY,EAEZ,uDAFY,CAAd;QAIA,KAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB;QACA,OAAO,OAAO,CAAC,KAAD,CAAd;MACD;;MACD,MAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;MAEA,IAAI,SAAS,GAAG,KAAhB;;MAEA,MAAM,GAAG,GAAG,CAAC,GAAD,EAAc,MAAd,KAA8B;QACxC,IAAI,CAAC,SAAL,EAAgB;UACd,GAAG,CAAC,KAAJ;UACA,SAAS,GAAG,IAAZ;;UACA,IAAI,QAAJ,EAAc;YACZ,QAAQ,CAAC,GAAD,EAAM,MAAN,CAAR;UACD,CAFD,MAEO;YACL,MAAM;cAAE,EAAF;cAAM;YAAN,IAAkB,OAAxB;YACA,MAAM,QAAQ,GAAG,GAAG,GAChB;cAAE,EAAF;cAAM,OAAN;cAAe,KAAK,EAAE;gBAAE,OAAO,EAAE,GAAG,CAAC,OAAf;gBAAwB,IAAI,EAAE,GAAG,CAAC;cAAlC;YAAtB,CADgB,GAEhB;cAAE,EAAF;cAAM,OAAN;cAAe;YAAf,CAFJ;YAGA,KAAK,IAAL,CAAU,SAAV,EAAqB,QAArB;YACA,OAAO,CAAC,QAAD,CAAP;UACD;QACF;MACF,CAfD;;MAiBA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,KAAK,GAAtB,EAA2B,IAA3B;MACA,GAAG,CAAC,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;MACA,GAAG,CAAC,OAAJ,GAAc,KAAK,IAAnB;MACA,GAAG,CAAC,OAAJ,GAAc,GAAd;MACA,GAAG,CAAC,SAAJ,GAAgB,GAAhB;;MACA,GAAG,CAAC,kBAAJ,GAAyB,MAAK;QAC5B,IAAI,GAAG,CAAC,UAAJ,KAAmB,CAAvB,EAA0B;UACxB,IAAI;YACF,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAAjB;YACA,GAAG,CAAC,QAAQ,CAAC,KAAV,EAAiB,QAAQ,CAAC,MAA1B,CAAH;UACD,CAHD,CAGE,OAAO,CAAP,EAAU;YACV,GAAG,CAAC,CAAD,CAAH;UACD;QACF;MACF,CATD;;MAUA,GAAG,CAAC,IAAJ,CAAS,IAAI,CAAC,SAAL,CAAe,OAAf,CAAT;IACD,CA9CM,CAAP;EA+CD;;AAhEsC;;AAmEzC,eAAe,cAAf","sourceRoot":"","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport { XMLHttpRequest } from \"xhr2-cookies\";\nimport { getFromWindow } from \"@walletconnect/utils\";\nconst XHR = getFromWindow(\"XMLHttpRequest\") || XMLHttpRequest;\nclass HTTPConnection extends EventEmitter {\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n    formatError(payload, message, code = -1) {\n        return {\n            error: { message, code },\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n        };\n    }\n    send(payload, internal) {\n        return new Promise(resolve => {\n            if (payload.method === \"eth_subscribe\") {\n                const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n                this.emit(\"error\", error);\n                return resolve(error);\n            }\n            const xhr = new XHR();\n            let responded = false;\n            const res = (err, result) => {\n                if (!responded) {\n                    xhr.abort();\n                    responded = true;\n                    if (internal) {\n                        internal(err, result);\n                    }\n                    else {\n                        const { id, jsonrpc } = payload;\n                        const response = err\n                            ? { id, jsonrpc, error: { message: err.message, code: err.code } }\n                            : { id, jsonrpc, result };\n                        this.emit(\"payload\", response);\n                        resolve(response);\n                    }\n                }\n            };\n            xhr.open(\"POST\", this.url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.timeout = 60 * 1000;\n            xhr.onerror = res;\n            xhr.ontimeout = res;\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === 4) {\n                    try {\n                        const response = JSON.parse(xhr.responseText);\n                        res(response.error, response.result);\n                    }\n                    catch (e) {\n                        res(e);\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(payload));\n        });\n    }\n}\nexport default HTTPConnection;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}