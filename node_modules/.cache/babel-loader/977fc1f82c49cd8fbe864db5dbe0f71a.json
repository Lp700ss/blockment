{"ast":null,"code":"const Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface\n\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n  // take a constructorFn to call once we have a reference to the engine\n  constructor(constructorFn) {\n    super();\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');\n    this._constructorFn = constructorFn;\n  } // this is called once the subprovider has been added to the provider engine\n\n\n  setEngine(engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n    const blockTracker = engine._blockTracker;\n\n    const middleware = this._constructorFn({\n      engine,\n      provider: engine,\n      blockTracker\n    });\n\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n    this.middleware = middleware;\n  }\n\n  handleRequest(req, provEngNext, provEngEnd) {\n    const res = {\n      id: req.id\n    };\n    this.middleware(req, res, middlewareNext, middlewareEnd);\n\n    function middlewareNext(handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result;\n          res.error = {\n            message: err.message || err\n          };\n        } else {\n          res.result = result;\n        } // call middleware's next handler (even if error)\n\n\n        if (handler) {\n          handler(cb);\n        } else {\n          cb();\n        }\n      });\n    }\n\n    function middlewareEnd(err) {\n      if (err) return provEngEnd(err);\n      provEngEnd(null, res.result);\n    }\n  }\n\n}\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider;","map":{"version":3,"names":["Subprovider","require","JsonRpcEngineMiddlewareSubprovider","constructor","constructorFn","Error","_constructorFn","setEngine","engine","middleware","blockTracker","_blockTracker","provider","handleRequest","req","provEngNext","provEngEnd","res","id","middlewareNext","middlewareEnd","handler","err","result","cb","error","message","module","exports"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js"],"sourcesContent":["const Subprovider = require('./subprovider.js')\n\n// wraps a json-rpc-engine middleware in a subprovider interface\n\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n\n  // take a constructorFn to call once we have a reference to the engine\n  constructor (constructorFn) {\n    super()\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')\n    this._constructorFn = constructorFn\n  }\n\n  // this is called once the subprovider has been added to the provider engine\n  setEngine (engine) {\n    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')\n    const blockTracker = engine._blockTracker\n    const middleware = this._constructorFn({ engine, provider: engine, blockTracker })\n    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')\n    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')\n    this.middleware = middleware\n  }\n\n  handleRequest (req, provEngNext, provEngEnd) {\n    const res = { id: req.id }\n    this.middleware(req, res, middlewareNext, middlewareEnd)\n\n    function middlewareNext (handler) {\n      provEngNext((err, result, cb) => {\n        // update response object with result or error\n        if (err) {\n          delete res.result\n          res.error = { message: err.message || err }\n        } else {\n          res.result = result\n        }\n        // call middleware's next handler (even if error)\n        if (handler) {\n          handler(cb)\n        } else {\n          cb()\n        }\n      })\n    }\n\n    function middlewareEnd (err) {\n      if (err) return provEngEnd(err)\n      provEngEnd(null, res.result)\n    }\n  }\n\n}\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAD,CAA3B,C,CAEA;;;AAEA,MAAMC,kCAAN,SAAiDF,WAAjD,CAA6D;EAE3D;EACAG,WAAW,CAAEC,aAAF,EAAiB;IAC1B;IACA,IAAI,CAACA,aAAL,EAAoB,MAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;IACpB,KAAKC,cAAL,GAAsBF,aAAtB;EACD,CAP0D,CAS3D;;;EACAG,SAAS,CAAEC,MAAF,EAAU;IACjB,IAAI,KAAKC,UAAT,EAAqB,MAAM,IAAIJ,KAAJ,CAAU,wEAAV,CAAN;IACrB,MAAMK,YAAY,GAAGF,MAAM,CAACG,aAA5B;;IACA,MAAMF,UAAU,GAAG,KAAKH,cAAL,CAAoB;MAAEE,MAAF;MAAUI,QAAQ,EAAEJ,MAApB;MAA4BE;IAA5B,CAApB,CAAnB;;IACA,IAAI,CAACD,UAAL,EAAiB,MAAM,IAAIJ,KAAJ,CAAU,+EAAV,CAAN;IACjB,IAAI,OAAOI,UAAP,KAAsB,UAA1B,EAAsC,MAAM,IAAIJ,KAAJ,CAAU,6EAAV,CAAN;IACtC,KAAKI,UAAL,GAAkBA,UAAlB;EACD;;EAEDI,aAAa,CAAEC,GAAF,EAAOC,WAAP,EAAoBC,UAApB,EAAgC;IAC3C,MAAMC,GAAG,GAAG;MAAEC,EAAE,EAAEJ,GAAG,CAACI;IAAV,CAAZ;IACA,KAAKT,UAAL,CAAgBK,GAAhB,EAAqBG,GAArB,EAA0BE,cAA1B,EAA0CC,aAA1C;;IAEA,SAASD,cAAT,CAAyBE,OAAzB,EAAkC;MAChCN,WAAW,CAAC,CAACO,GAAD,EAAMC,MAAN,EAAcC,EAAd,KAAqB;QAC/B;QACA,IAAIF,GAAJ,EAAS;UACP,OAAOL,GAAG,CAACM,MAAX;UACAN,GAAG,CAACQ,KAAJ,GAAY;YAAEC,OAAO,EAAEJ,GAAG,CAACI,OAAJ,IAAeJ;UAA1B,CAAZ;QACD,CAHD,MAGO;UACLL,GAAG,CAACM,MAAJ,GAAaA,MAAb;QACD,CAP8B,CAQ/B;;;QACA,IAAIF,OAAJ,EAAa;UACXA,OAAO,CAACG,EAAD,CAAP;QACD,CAFD,MAEO;UACLA,EAAE;QACH;MACF,CAdU,CAAX;IAeD;;IAED,SAASJ,aAAT,CAAwBE,GAAxB,EAA6B;MAC3B,IAAIA,GAAJ,EAAS,OAAON,UAAU,CAACM,GAAD,CAAjB;MACTN,UAAU,CAAC,IAAD,EAAOC,GAAG,CAACM,MAAX,CAAV;IACD;EACF;;AA7C0D;;AAiD7DI,MAAM,CAACC,OAAP,GAAiB1B,kCAAjB"},"metadata":{},"sourceType":"script"}