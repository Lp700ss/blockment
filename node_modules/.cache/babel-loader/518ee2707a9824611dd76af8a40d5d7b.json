{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComposedStore = void 0;\n\nconst ObservableStore_1 = require(\"./ObservableStore\");\n\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n  constructor(children) {\n    // Typecast: Preserve existing behavior\n    super({}); // subscribe to children\n\n    this._children = children || {};\n    Object.keys(this._children).forEach(childKey => {\n      const child = this._children[childKey];\n\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey, child) {\n    const updateFromChild = childValue => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n\n}\n\nexports.ComposedStore = ComposedStore;","map":{"version":3,"sources":["../src/ComposedStore.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAa,aAAb,SAEU,iBAAA,CAAA,eAFV,CAE4B;EAG1B,WAAA,CAAY,QAAZ,EAAkE;IAChE;IACA,MAAM,EAAN,EAFgE,CAIhE;;IACA,KAAK,SAAL,GAAiB,QAAQ,IAAI,EAA7B;IACA,MAAM,CAAC,IAAP,CAAY,KAAK,SAAjB,EAA4B,OAA5B,CAAqC,QAAD,IAAa;MAC/C,MAAM,KAAK,GAAG,KAAK,SAAL,CAAe,QAAf,CAAd;;MACA,KAAK,SAAL,CAAe,QAAf,EAAyB,KAAzB;IACD,CAHD;EAID;;EAED,SAAS,CAAC,QAAD,EAAoB,KAApB,EAAsD;IAC7D,MAAM,eAAe,GAAI,UAAD,IAA2B;MACjD,MAAM,KAAK,GAAG,KAAK,QAAL,EAAd;MACA,KAAK,CAAC,QAAD,CAAL,GAAkB,UAAlB;MACA,KAAK,QAAL,CAAc,KAAd;IACD,CAJD;;IAMA,KAAK,CAAC,SAAN,CAAgB,eAAhB;IACA,eAAe,CAAC,KAAK,CAAC,QAAN,EAAD,CAAf;EACD;;AAxByB;;AAF5B,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class ComposedStore<\n  T extends Record<string, Record<string, unknown>>,\n> extends ObservableStore<T> {\n  private _children: Record<keyof T, ObservableStore<T[keyof T]>>;\n\n  constructor(children: Record<keyof T, ObservableStore<T[keyof T]>>) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    // subscribe to children\n    this._children = children || {};\n    Object.keys(this._children).forEach((childKey) => {\n      const child = this._children[childKey];\n      this._addChild(childKey, child);\n    });\n  }\n\n  _addChild(childKey: keyof T, child: ObservableStore<T[keyof T]>) {\n    const updateFromChild = (childValue: T[keyof T]) => {\n      const state = this.getState();\n      state[childKey] = childValue;\n      this.putState(state);\n    };\n\n    child.subscribe(updateFromChild);\n    updateFromChild(child.getState());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}