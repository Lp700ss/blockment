{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseCLP = _interopRequireDefault(require(\"./ParseCLP\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar FIELD_TYPES = ['String', 'Number', 'Boolean', 'Date', 'File', 'GeoPoint', 'Polygon', 'Array', 'Object', 'Pointer', 'Relation'];\n/*:: type FieldOptions = {\n  required: boolean,\n  defaultValue: mixed,\n};*/\n\n/**\n * A Parse.Schema object is for handling schema data from Parse.\n * <p>All the schemas methods require MasterKey.\n *\n * When adding fields, you may set required and default values. (Requires Parse Server 3.7.0+)\n *\n * <pre>\n * const options = { required: true, defaultValue: 'hello world' };\n * const schema = new Parse.Schema('MyClass');\n * schema.addString('field', options);\n * schema.addIndex('index_name', { 'field': 1 });\n * schema.save();\n * </pre>\n * </p>\n *\n * @alias Parse.Schema\n */\n\nvar ParseSchema = /*#__PURE__*/function () {\n  /**\n   * @param {string} className Parse Class string.\n   */\n  function ParseSchema(className\n  /*: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseSchema);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_fields\", void 0);\n    (0, _defineProperty2.default)(this, \"_indexes\", void 0);\n    (0, _defineProperty2.default)(this, \"_clp\", void 0);\n\n    if (typeof className === 'string') {\n      if (className === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = className;\n      }\n    }\n\n    this._fields = {};\n    this._indexes = {};\n  }\n  /**\n   * Static method to get all schemas\n   *\n   * @returns {Promise} A promise that is resolved with the result when\n   * the query completes.\n   */\n\n\n  (0, _createClass2.default)(ParseSchema, [{\n    key: \"get\",\n    value:\n    /**\n     * Get the Schema from Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get(this.className).then(function (response) {\n        if (!response) {\n          throw new Error('Schema not found.');\n        }\n\n        return response;\n      });\n    }\n    /**\n     * Create a new Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      return controller.create(this.className, params);\n    }\n    /**\n     * Update a Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      this._fields = {};\n      this._indexes = {};\n      return controller.update(this.className, params);\n    }\n    /**\n     * Removing a Schema from Parse\n     * Can only be used on Schema without objects\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.delete(this.className);\n    }\n    /**\n     * Removes all objects from a Schema (class) in Parse.\n     * EXERCISE CAUTION, running this will delete all objects for this schema and cannot be reversed\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"purge\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.purge(this.className);\n    }\n    /**\n     * Assert if ClassName has been filled\n     *\n     * @private\n     */\n\n  }, {\n    key: \"assertClassName\",\n    value: function () {\n      if (!this.className) {\n        throw new Error('You must set a Class Name before making any request.');\n      }\n    }\n    /**\n     * Sets Class Level Permissions when creating / updating a Schema.\n     * EXERCISE CAUTION, running this may override CLP for this schema and cannot be reversed\n     *\n     * @param {object | Parse.CLP} clp Class Level Permissions\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"setCLP\",\n    value: function (clp\n    /*: PermissionsMap | ParseCLP*/\n    ) {\n      if (clp instanceof _ParseCLP.default) {\n        this._clp = clp.toJSON();\n      } else {\n        this._clp = clp;\n      }\n\n      return this;\n    }\n    /**\n     * Adding a Field to Create / Update a Schema\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>required: If field is not set, save operation fails (Requires Parse Server 3.7.0+)\n     *   <li>defaultValue: If field is not set, a default value is selected (Requires Parse Server 3.7.0+)\n     * </ul>\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addField\",\n    value: function (name\n    /*: string*/\n    , type\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      type = type || 'String';\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {\n        throw new Error(\"\".concat(type, \" is not a valid type.\"));\n      }\n\n      var fieldOptions = {\n        type: type\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding an Index to Create / Update a Schema\n     *\n     * @param {string} name Name of the index\n     * @param {object} index { field: value }\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     *\n     * <pre>\n     * schema.addIndex('index_name', { 'field': 1 });\n     * </pre>\n     */\n\n  }, {\n    key: \"addIndex\",\n    value: function (name\n    /*: string*/\n    , index\n    /*: any*/\n    ) {\n      if (!name) {\n        throw new Error('index name may not be null.');\n      }\n\n      if (!index) {\n        throw new Error('index may not be null.');\n      }\n\n      this._indexes[name] = index;\n      return this;\n    }\n    /**\n     * Adding String Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addString\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'String', options);\n    }\n    /**\n     * Adding Number Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addNumber\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Number', options);\n    }\n    /**\n     * Adding Boolean Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addBoolean\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Boolean', options);\n    }\n    /**\n     * Adding Date Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDate\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      if (options && options.defaultValue) {\n        options.defaultValue = {\n          __type: 'Date',\n          iso: new Date(options.defaultValue)\n        };\n      }\n\n      return this.addField(name, 'Date', options);\n    }\n    /**\n     * Adding File Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addFile\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'File', options);\n    }\n    /**\n     * Adding GeoPoint Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addGeoPoint\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'GeoPoint', options);\n    }\n    /**\n     * Adding Polygon Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPolygon\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Polygon', options);\n    }\n    /**\n     * Adding Array Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Array', options);\n    }\n    /**\n     * Adding Object Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addObject\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Object', options);\n    }\n    /**\n     * Adding Pointer Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPointer\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Pointer.');\n      }\n\n      var fieldOptions = {\n        type: 'Pointer',\n        targetClass: targetClass\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n\n        if (options.defaultValue instanceof _ParseObject.default) {\n          fieldOptions.defaultValue = options.defaultValue.toPointer();\n        }\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding Relation Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addRelation\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Relation.');\n      }\n\n      this._fields[name] = {\n        type: 'Relation',\n        targetClass: targetClass\n      };\n      return this;\n    }\n    /**\n     * Deleting a Field to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteField\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._fields[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n    /**\n     * Deleting an Index to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._indexes[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n  }], [{\n    key: \"all\",\n    value: function () {\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get('').then(function (response) {\n        if (response.results.length === 0) {\n          throw new Error('Schema not found.');\n        }\n\n        return response.results;\n      });\n    }\n  }]);\n  return ParseSchema;\n}();\n\nvar DefaultController = {\n  send: function (className\n  /*: string*/\n  , method\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var params\n    /*: any*/\n    = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request(method, \"schemas/\".concat(className), params, {\n      useMasterKey: true\n    });\n  },\n  get: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'GET');\n  },\n  create: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'POST', params);\n  },\n  update: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'PUT', params);\n  },\n  delete: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'DELETE');\n  },\n  purge: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('DELETE', \"purge/\".concat(className), {}, {\n      useMasterKey: true\n    });\n  }\n};\n\n_CoreManager.default.setSchemaController(DefaultController);\n\nvar _default = ParseSchema;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_indexOf","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_ParseObject","_ParseCLP","FIELD_TYPES","ParseSchema","className","get","_fields","_indexes","key","assertClassName","controller","getSchemaController","then","response","Error","params","fields","indexes","classLevelPermissions","_clp","create","update","delete","purge","clp","toJSON","name","type","options","arguments","length","undefined","call","concat","fieldOptions","required","defaultValue","index","addField","__type","iso","Date","targetClass","toPointer","__op","results","DefaultController","send","method","RESTController","getRESTController","request","useMasterKey","setSchemaController","_default"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/ParseSchema.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseCLP = _interopRequireDefault(require(\"./ParseCLP\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar FIELD_TYPES = ['String', 'Number', 'Boolean', 'Date', 'File', 'GeoPoint', 'Polygon', 'Array', 'Object', 'Pointer', 'Relation'];\n/*:: type FieldOptions = {\n  required: boolean,\n  defaultValue: mixed,\n};*/\n\n/**\n * A Parse.Schema object is for handling schema data from Parse.\n * <p>All the schemas methods require MasterKey.\n *\n * When adding fields, you may set required and default values. (Requires Parse Server 3.7.0+)\n *\n * <pre>\n * const options = { required: true, defaultValue: 'hello world' };\n * const schema = new Parse.Schema('MyClass');\n * schema.addString('field', options);\n * schema.addIndex('index_name', { 'field': 1 });\n * schema.save();\n * </pre>\n * </p>\n *\n * @alias Parse.Schema\n */\n\nvar ParseSchema = /*#__PURE__*/function () {\n  /**\n   * @param {string} className Parse Class string.\n   */\n  function ParseSchema(className\n  /*: string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseSchema);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_fields\", void 0);\n    (0, _defineProperty2.default)(this, \"_indexes\", void 0);\n    (0, _defineProperty2.default)(this, \"_clp\", void 0);\n\n    if (typeof className === 'string') {\n      if (className === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = className;\n      }\n    }\n\n    this._fields = {};\n    this._indexes = {};\n  }\n  /**\n   * Static method to get all schemas\n   *\n   * @returns {Promise} A promise that is resolved with the result when\n   * the query completes.\n   */\n\n\n  (0, _createClass2.default)(ParseSchema, [{\n    key: \"get\",\n    value:\n    /**\n     * Get the Schema from Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get(this.className).then(function (response) {\n        if (!response) {\n          throw new Error('Schema not found.');\n        }\n\n        return response;\n      });\n    }\n    /**\n     * Create a new Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      return controller.create(this.className, params);\n    }\n    /**\n     * Update a Schema on Parse\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      var params = {\n        className: this.className,\n        fields: this._fields,\n        indexes: this._indexes,\n        classLevelPermissions: this._clp\n      };\n      this._fields = {};\n      this._indexes = {};\n      return controller.update(this.className, params);\n    }\n    /**\n     * Removing a Schema from Parse\n     * Can only be used on Schema without objects\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.delete(this.className);\n    }\n    /**\n     * Removes all objects from a Schema (class) in Parse.\n     * EXERCISE CAUTION, running this will delete all objects for this schema and cannot be reversed\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n\n  }, {\n    key: \"purge\",\n    value: function () {\n      this.assertClassName();\n\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.purge(this.className);\n    }\n    /**\n     * Assert if ClassName has been filled\n     *\n     * @private\n     */\n\n  }, {\n    key: \"assertClassName\",\n    value: function () {\n      if (!this.className) {\n        throw new Error('You must set a Class Name before making any request.');\n      }\n    }\n    /**\n     * Sets Class Level Permissions when creating / updating a Schema.\n     * EXERCISE CAUTION, running this may override CLP for this schema and cannot be reversed\n     *\n     * @param {object | Parse.CLP} clp Class Level Permissions\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"setCLP\",\n    value: function (clp\n    /*: PermissionsMap | ParseCLP*/\n    ) {\n      if (clp instanceof _ParseCLP.default) {\n        this._clp = clp.toJSON();\n      } else {\n        this._clp = clp;\n      }\n\n      return this;\n    }\n    /**\n     * Adding a Field to Create / Update a Schema\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} type Can be a (String|Number|Boolean|Date|Parse.File|Parse.GeoPoint|Array|Object|Pointer|Parse.Relation)\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>required: If field is not set, save operation fails (Requires Parse Server 3.7.0+)\n     *   <li>defaultValue: If field is not set, a default value is selected (Requires Parse Server 3.7.0+)\n     * </ul>\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addField\",\n    value: function (name\n    /*: string*/\n    , type\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      type = type || 'String';\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {\n        throw new Error(\"\".concat(type, \" is not a valid type.\"));\n      }\n\n      var fieldOptions = {\n        type: type\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding an Index to Create / Update a Schema\n     *\n     * @param {string} name Name of the index\n     * @param {object} index { field: value }\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     *\n     * <pre>\n     * schema.addIndex('index_name', { 'field': 1 });\n     * </pre>\n     */\n\n  }, {\n    key: \"addIndex\",\n    value: function (name\n    /*: string*/\n    , index\n    /*: any*/\n    ) {\n      if (!name) {\n        throw new Error('index name may not be null.');\n      }\n\n      if (!index) {\n        throw new Error('index may not be null.');\n      }\n\n      this._indexes[name] = index;\n      return this;\n    }\n    /**\n     * Adding String Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addString\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'String', options);\n    }\n    /**\n     * Adding Number Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addNumber\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Number', options);\n    }\n    /**\n     * Adding Boolean Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addBoolean\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Boolean', options);\n    }\n    /**\n     * Adding Date Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDate\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      if (options && options.defaultValue) {\n        options.defaultValue = {\n          __type: 'Date',\n          iso: new Date(options.defaultValue)\n        };\n      }\n\n      return this.addField(name, 'Date', options);\n    }\n    /**\n     * Adding File Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addFile\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'File', options);\n    }\n    /**\n     * Adding GeoPoint Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addGeoPoint\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'GeoPoint', options);\n    }\n    /**\n     * Adding Polygon Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPolygon\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Polygon', options);\n    }\n    /**\n     * Adding Array Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addArray\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Array', options);\n    }\n    /**\n     * Adding Object Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addObject\",\n    value: function (name\n    /*: string*/\n    , options\n    /*: FieldOptions*/\n    ) {\n      return this.addField(name, 'Object', options);\n    }\n    /**\n     * Adding Pointer Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @param {object} options See {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.Schema.html#addField addField}\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addPointer\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      var options\n      /*: FieldOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Pointer.');\n      }\n\n      var fieldOptions = {\n        type: 'Pointer',\n        targetClass: targetClass\n      };\n\n      if (typeof options.required === 'boolean') {\n        fieldOptions.required = options.required;\n      }\n\n      if (options.defaultValue !== undefined) {\n        fieldOptions.defaultValue = options.defaultValue;\n\n        if (options.defaultValue instanceof _ParseObject.default) {\n          fieldOptions.defaultValue = options.defaultValue.toPointer();\n        }\n      }\n\n      this._fields[name] = fieldOptions;\n      return this;\n    }\n    /**\n     * Adding Relation Field\n     *\n     * @param {string} name Name of the field that will be created on Parse\n     * @param {string} targetClass Name of the target Pointer Class\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"addRelation\",\n    value: function (name\n    /*: string*/\n    , targetClass\n    /*: string*/\n    ) {\n      if (!name) {\n        throw new Error('field name may not be null.');\n      }\n\n      if (!targetClass) {\n        throw new Error('You need to set the targetClass of the Relation.');\n      }\n\n      this._fields[name] = {\n        type: 'Relation',\n        targetClass: targetClass\n      };\n      return this;\n    }\n    /**\n     * Deleting a Field to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteField\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._fields[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n    /**\n     * Deleting an Index to Update on a Schema\n     *\n     * @param {string} name Name of the field\n     * @returns {Parse.Schema} Returns the schema, so you can chain this call.\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function (name\n    /*: string*/\n    ) {\n      this._indexes[name] = {\n        __op: 'Delete'\n      };\n      return this;\n    }\n  }], [{\n    key: \"all\",\n    value: function () {\n      var controller = _CoreManager.default.getSchemaController();\n\n      return controller.get('').then(function (response) {\n        if (response.results.length === 0) {\n          throw new Error('Schema not found.');\n        }\n\n        return response.results;\n      });\n    }\n  }]);\n  return ParseSchema;\n}();\n\nvar DefaultController = {\n  send: function (className\n  /*: string*/\n  , method\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var params\n    /*: any*/\n    = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request(method, \"schemas/\".concat(className), params, {\n      useMasterKey: true\n    });\n  },\n  get: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'GET');\n  },\n  create: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'POST', params);\n  },\n  update: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'PUT', params);\n  },\n  delete: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    return this.send(className, 'DELETE');\n  },\n  purge: function (className\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('DELETE', \"purge/\".concat(className), {}, {\n      useMasterKey: true\n    });\n  }\n};\n\n_CoreManager.default.setSchemaController(DefaultController);\n\nvar _default = ParseSchema;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAD,CAApC;;AAEAD,sBAAsB,CAACG,OAAD,EAAU,YAAV,EAAwB;EAC5CC,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,yDAAD,CAAR,CAArC;;AAEA,IAAIM,gBAAgB,GAAGL,sBAAsB,CAACD,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIO,aAAa,GAAGN,sBAAsB,CAACD,OAAO,CAAC,4CAAD,CAAR,CAA1C;;AAEA,IAAIQ,gBAAgB,GAAGP,sBAAsB,CAACD,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIS,YAAY,GAAGR,sBAAsB,CAACD,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIU,YAAY,GAAGT,sBAAsB,CAACD,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIW,SAAS,GAAGV,sBAAsB,CAACD,OAAO,CAAC,YAAD,CAAR,CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIY,WAAW,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,MAAhC,EAAwC,MAAxC,EAAgD,UAAhD,EAA4D,SAA5D,EAAuE,OAAvE,EAAgF,QAAhF,EAA0F,SAA1F,EAAqG,UAArG,CAAlB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,aAAa,YAAY;EACzC;AACF;AACA;EACE,SAASA,WAAT,CAAqBC;EACrB;EADA,EAEE;IACA,CAAC,GAAGR,gBAAgB,CAACF,OAArB,EAA8B,IAA9B,EAAoCS,WAApC;IACA,CAAC,GAAGL,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,WAApC,EAAiD,KAAK,CAAtD;IACA,CAAC,GAAGI,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,SAApC,EAA+C,KAAK,CAApD;IACA,CAAC,GAAGI,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,UAApC,EAAgD,KAAK,CAArD;IACA,CAAC,GAAGI,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,MAApC,EAA4C,KAAK,CAAjD;;IAEA,IAAI,OAAOU,SAAP,KAAqB,QAAzB,EAAmC;MACjC,IAAIA,SAAS,KAAK,MAAd,IAAwBL,YAAY,CAACL,OAAb,CAAqBW,GAArB,CAAyB,sBAAzB,CAA5B,EAA8E;QAC5E,KAAKD,SAAL,GAAiB,OAAjB;MACD,CAFD,MAEO;QACL,KAAKA,SAAL,GAAiBA,SAAjB;MACD;IACF;;IAED,KAAKE,OAAL,GAAe,EAAf;IACA,KAAKC,QAAL,GAAgB,EAAhB;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EAGE,CAAC,GAAGV,aAAa,CAACH,OAAlB,EAA2BS,WAA3B,EAAwC,CAAC;IACvCK,GAAG,EAAE,KADkC;IAEvCf,KAAK;IACL;AACJ;AACA;AACA;AACA;AACA;IACI,YAAY;MACV,KAAKgB,eAAL;;MAEA,IAAIC,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,OAAOD,UAAU,CAACL,GAAX,CAAe,KAAKD,SAApB,EAA+BQ,IAA/B,CAAoC,UAAUC,QAAV,EAAoB;QAC7D,IAAI,CAACA,QAAL,EAAe;UACb,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;QACD;;QAED,OAAOD,QAAP;MACD,CANM,CAAP;IAOD;IACD;AACJ;AACA;AACA;AACA;AACA;;EA3B2C,CAAD,EA6BrC;IACDL,GAAG,EAAE,MADJ;IAEDf,KAAK,EAAE,YAAY;MACjB,KAAKgB,eAAL;;MAEA,IAAIC,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,IAAII,MAAM,GAAG;QACXX,SAAS,EAAE,KAAKA,SADL;QAEXY,MAAM,EAAE,KAAKV,OAFF;QAGXW,OAAO,EAAE,KAAKV,QAHH;QAIXW,qBAAqB,EAAE,KAAKC;MAJjB,CAAb;MAMA,OAAOT,UAAU,CAACU,MAAX,CAAkB,KAAKhB,SAAvB,EAAkCW,MAAlC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EApBK,CA7BqC,EAmDrC;IACDP,GAAG,EAAE,QADJ;IAEDf,KAAK,EAAE,YAAY;MACjB,KAAKgB,eAAL;;MAEA,IAAIC,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,IAAII,MAAM,GAAG;QACXX,SAAS,EAAE,KAAKA,SADL;QAEXY,MAAM,EAAE,KAAKV,OAFF;QAGXW,OAAO,EAAE,KAAKV,QAHH;QAIXW,qBAAqB,EAAE,KAAKC;MAJjB,CAAb;MAMA,KAAKb,OAAL,GAAe,EAAf;MACA,KAAKC,QAAL,GAAgB,EAAhB;MACA,OAAOG,UAAU,CAACW,MAAX,CAAkB,KAAKjB,SAAvB,EAAkCW,MAAlC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAvBK,CAnDqC,EA4ErC;IACDP,GAAG,EAAE,QADJ;IAEDf,KAAK,EAAE,YAAY;MACjB,KAAKgB,eAAL;;MAEA,IAAIC,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,OAAOD,UAAU,CAACY,MAAX,CAAkB,KAAKlB,SAAvB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA5EqC,EA6FrC;IACDI,GAAG,EAAE,OADJ;IAEDf,KAAK,EAAE,YAAY;MACjB,KAAKgB,eAAL;;MAEA,IAAIC,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,OAAOD,UAAU,CAACa,KAAX,CAAiB,KAAKnB,SAAtB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;;EAbK,CA7FqC,EA4GrC;IACDI,GAAG,EAAE,iBADJ;IAEDf,KAAK,EAAE,YAAY;MACjB,IAAI,CAAC,KAAKW,SAAV,EAAqB;QACnB,MAAM,IAAIU,KAAJ,CAAU,sDAAV,CAAN;MACD;IACF;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAbK,CA5GqC,EA2HrC;IACDN,GAAG,EAAE,QADJ;IAEDf,KAAK,EAAE,UAAU+B;IACjB;IADO,EAEL;MACA,IAAIA,GAAG,YAAYvB,SAAS,CAACP,OAA7B,EAAsC;QACpC,KAAKyB,IAAL,GAAYK,GAAG,CAACC,MAAJ,EAAZ;MACD,CAFD,MAEO;QACL,KAAKN,IAAL,GAAYK,GAAZ;MACD;;MAED,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAxBK,CA3HqC,EAqJrC;IACDhB,GAAG,EAAE,UADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELC;IACF;IAHO,EAIL;MACA,IAAIC;MACJ;MADW,EAETC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAFtE;MAGAF,IAAI,GAAGA,IAAI,IAAI,QAAf;;MAEA,IAAI,CAACD,IAAL,EAAW;QACT,MAAM,IAAIZ,KAAJ,CAAU,6BAAV,CAAN;MACD;;MAED,IAAI,CAAC,GAAGnB,QAAQ,CAACD,OAAb,EAAsBQ,WAAtB,EAAmC8B,IAAnC,CAAwC9B,WAAxC,EAAqDyB,IAArD,MAA+D,CAAC,CAApE,EAAuE;QACrE,MAAM,IAAIb,KAAJ,CAAU,GAAGmB,MAAH,CAAUN,IAAV,EAAgB,uBAAhB,CAAV,CAAN;MACD;;MAED,IAAIO,YAAY,GAAG;QACjBP,IAAI,EAAEA;MADW,CAAnB;;MAIA,IAAI,OAAOC,OAAO,CAACO,QAAf,KAA4B,SAAhC,EAA2C;QACzCD,YAAY,CAACC,QAAb,GAAwBP,OAAO,CAACO,QAAhC;MACD;;MAED,IAAIP,OAAO,CAACQ,YAAR,KAAyBL,SAA7B,EAAwC;QACtCG,YAAY,CAACE,YAAb,GAA4BR,OAAO,CAACQ,YAApC;MACD;;MAED,KAAK9B,OAAL,CAAaoB,IAAb,IAAqBQ,YAArB;MACA,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA7CK,CArJqC,EAoMrC;IACD1B,GAAG,EAAE,UADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELW;IACF;IAHO,EAIL;MACA,IAAI,CAACX,IAAL,EAAW;QACT,MAAM,IAAIZ,KAAJ,CAAU,6BAAV,CAAN;MACD;;MAED,IAAI,CAACuB,KAAL,EAAY;QACV,MAAM,IAAIvB,KAAJ,CAAU,wBAAV,CAAN;MACD;;MAED,KAAKP,QAAL,CAAcmB,IAAd,IAAsBW,KAAtB;MACA,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAxBK,CApMqC,EA8NrC;IACD7B,GAAG,EAAE,WADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,QAApB,EAA8BE,OAA9B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA9NqC,EA+OrC;IACDpB,GAAG,EAAE,WADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,QAApB,EAA8BE,OAA9B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA/OqC,EAgQrC;IACDpB,GAAG,EAAE,YADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,SAApB,EAA+BE,OAA/B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CAhQqC,EAiRrC;IACDpB,GAAG,EAAE,SADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,IAAIA,OAAO,IAAIA,OAAO,CAACQ,YAAvB,EAAqC;QACnCR,OAAO,CAACQ,YAAR,GAAuB;UACrBG,MAAM,EAAE,MADa;UAErBC,GAAG,EAAE,IAAIC,IAAJ,CAASb,OAAO,CAACQ,YAAjB;QAFgB,CAAvB;MAID;;MAED,OAAO,KAAKE,QAAL,CAAcZ,IAAd,EAAoB,MAApB,EAA4BE,OAA5B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAtBK,CAjRqC,EAySrC;IACDpB,GAAG,EAAE,SADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,MAApB,EAA4BE,OAA5B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CAzSqC,EA0TrC;IACDpB,GAAG,EAAE,aADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,UAApB,EAAgCE,OAAhC,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA1TqC,EA2UrC;IACDpB,GAAG,EAAE,YADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,SAApB,EAA+BE,OAA/B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA3UqC,EA4VrC;IACDpB,GAAG,EAAE,UADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,OAApB,EAA6BE,OAA7B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAfK,CA5VqC,EA6WrC;IACDpB,GAAG,EAAE,WADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELE;IACF;IAHO,EAIL;MACA,OAAO,KAAKU,QAAL,CAAcZ,IAAd,EAAoB,QAApB,EAA8BE,OAA9B,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAhBK,CA7WqC,EA+XrC;IACDpB,GAAG,EAAE,YADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELgB;IACF;IAHO,EAIL;MACA,IAAId;MACJ;MADW,EAETC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAFtE;;MAIA,IAAI,CAACH,IAAL,EAAW;QACT,MAAM,IAAIZ,KAAJ,CAAU,6BAAV,CAAN;MACD;;MAED,IAAI,CAAC4B,WAAL,EAAkB;QAChB,MAAM,IAAI5B,KAAJ,CAAU,iDAAV,CAAN;MACD;;MAED,IAAIoB,YAAY,GAAG;QACjBP,IAAI,EAAE,SADW;QAEjBe,WAAW,EAAEA;MAFI,CAAnB;;MAKA,IAAI,OAAOd,OAAO,CAACO,QAAf,KAA4B,SAAhC,EAA2C;QACzCD,YAAY,CAACC,QAAb,GAAwBP,OAAO,CAACO,QAAhC;MACD;;MAED,IAAIP,OAAO,CAACQ,YAAR,KAAyBL,SAA7B,EAAwC;QACtCG,YAAY,CAACE,YAAb,GAA4BR,OAAO,CAACQ,YAApC;;QAEA,IAAIR,OAAO,CAACQ,YAAR,YAAgCpC,YAAY,CAACN,OAAjD,EAA0D;UACxDwC,YAAY,CAACE,YAAb,GAA4BR,OAAO,CAACQ,YAAR,CAAqBO,SAArB,EAA5B;QACD;MACF;;MAED,KAAKrC,OAAL,CAAaoB,IAAb,IAAqBQ,YAArB;MACA,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EA7CK,CA/XqC,EA8arC;IACD1B,GAAG,EAAE,aADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAELgB;IACF;IAHO,EAIL;MACA,IAAI,CAAChB,IAAL,EAAW;QACT,MAAM,IAAIZ,KAAJ,CAAU,6BAAV,CAAN;MACD;;MAED,IAAI,CAAC4B,WAAL,EAAkB;QAChB,MAAM,IAAI5B,KAAJ,CAAU,kDAAV,CAAN;MACD;;MAED,KAAKR,OAAL,CAAaoB,IAAb,IAAqB;QACnBC,IAAI,EAAE,UADa;QAEnBe,WAAW,EAAEA;MAFM,CAArB;MAIA,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EA1BK,CA9aqC,EA0crC;IACDlC,GAAG,EAAE,aADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAEL;MACA,KAAKpB,OAAL,CAAaoB,IAAb,IAAqB;QACnBkB,IAAI,EAAE;MADa,CAArB;MAGA,OAAO,IAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAfK,CA1cqC,EA2drC;IACDpC,GAAG,EAAE,aADJ;IAEDf,KAAK,EAAE,UAAUiC;IACjB;IADO,EAEL;MACA,KAAKnB,QAAL,CAAcmB,IAAd,IAAsB;QACpBkB,IAAI,EAAE;MADc,CAAtB;MAGA,OAAO,IAAP;IACD;EATA,CA3dqC,CAAxC,EAqeI,CAAC;IACHpC,GAAG,EAAE,KADF;IAEHf,KAAK,EAAE,YAAY;MACjB,IAAIiB,UAAU,GAAGX,YAAY,CAACL,OAAb,CAAqBiB,mBAArB,EAAjB;;MAEA,OAAOD,UAAU,CAACL,GAAX,CAAe,EAAf,EAAmBO,IAAnB,CAAwB,UAAUC,QAAV,EAAoB;QACjD,IAAIA,QAAQ,CAACgC,OAAT,CAAiBf,MAAjB,KAA4B,CAAhC,EAAmC;UACjC,MAAM,IAAIhB,KAAJ,CAAU,mBAAV,CAAN;QACD;;QAED,OAAOD,QAAQ,CAACgC,OAAhB;MACD,CANM,CAAP;IAOD;EAZE,CAAD,CAreJ;EAmfA,OAAO1C,WAAP;AACD,CAphB8B,EAA/B;;AAshBA,IAAI2C,iBAAiB,GAAG;EACtBC,IAAI,EAAE,UAAU3C;EAChB;EADM,EAEJ4C;EACF;EAHM;EAKN;EACA;IACE,IAAIjC;IACJ;IADU,EAERc,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAFtE;;IAIA,IAAIoB,cAAc,GAAGlD,YAAY,CAACL,OAAb,CAAqBwD,iBAArB,EAArB;;IAEA,OAAOD,cAAc,CAACE,OAAf,CAAuBH,MAAvB,EAA+B,WAAWf,MAAX,CAAkB7B,SAAlB,CAA/B,EAA6DW,MAA7D,EAAqE;MAC1EqC,YAAY,EAAE;IAD4D,CAArE,CAAP;EAGD,CAjBqB;EAkBtB/C,GAAG,EAAE,UAAUD;EACf;EADK;EAGL;EACA;IACE,OAAO,KAAK2C,IAAL,CAAU3C,SAAV,EAAqB,KAArB,CAAP;EACD,CAxBqB;EAyBtBgB,MAAM,EAAE,UAAUhB;EAClB;EADQ,EAENW;EACF;EAHQ;EAKR;EACA;IACE,OAAO,KAAKgC,IAAL,CAAU3C,SAAV,EAAqB,MAArB,EAA6BW,MAA7B,CAAP;EACD,CAjCqB;EAkCtBM,MAAM,EAAE,UAAUjB;EAClB;EADQ,EAENW;EACF;EAHQ;EAKR;EACA;IACE,OAAO,KAAKgC,IAAL,CAAU3C,SAAV,EAAqB,KAArB,EAA4BW,MAA5B,CAAP;EACD,CA1CqB;EA2CtBO,MAAM,EAAE,UAAUlB;EAClB;EADQ;EAGR;EACA;IACE,OAAO,KAAK2C,IAAL,CAAU3C,SAAV,EAAqB,QAArB,CAAP;EACD,CAjDqB;EAkDtBmB,KAAK,EAAE,UAAUnB;EACjB;EADO;EAGP;EACA;IACE,IAAI6C,cAAc,GAAGlD,YAAY,CAACL,OAAb,CAAqBwD,iBAArB,EAArB;;IAEA,OAAOD,cAAc,CAACE,OAAf,CAAuB,QAAvB,EAAiC,SAASlB,MAAT,CAAgB7B,SAAhB,CAAjC,EAA6D,EAA7D,EAAiE;MACtEgD,YAAY,EAAE;IADwD,CAAjE,CAAP;EAGD;AA5DqB,CAAxB;;AA+DArD,YAAY,CAACL,OAAb,CAAqB2D,mBAArB,CAAyCP,iBAAzC;;AAEA,IAAIQ,QAAQ,GAAGnD,WAAf;AACAX,OAAO,CAACE,OAAR,GAAkB4D,QAAlB"},"metadata":{},"sourceType":"script"}