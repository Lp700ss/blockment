{"ast":null,"code":"'use strict';\n\nconst uuid = require('uuid').v4;\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\n\n\nconst generateRequest = function (method, params, id, options) {\n  if (typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {}; // check valid version provided\n\n  const version = typeof options.version === 'number' ? options.version : 2;\n\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if (version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if (params) {\n    // params given, but invalid?\n    if (typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n\n    request.params = params;\n  } // if id was left out, generate one (null means explicit notification)\n\n\n  if (typeof id === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function () {\n      return uuid();\n    };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;","map":{"version":3,"names":["uuid","require","v4","generateRequest","method","params","id","options","TypeError","version","request","jsonrpc","Array","isArray","generator","notificationIdNull","module","exports"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/jayson/lib/generateRequest.js"],"sourcesContent":["'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBC,EAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG,UAASC,MAAT,EAAiBC,MAAjB,EAAyBC,EAAzB,EAA6BC,OAA7B,EAAsC;EAC5D,IAAG,OAAOH,MAAP,KAAkB,QAArB,EAA+B;IAC7B,MAAM,IAAII,SAAJ,CAAcJ,MAAM,GAAG,mBAAvB,CAAN;EACD;;EAEDG,OAAO,GAAGA,OAAO,IAAI,EAArB,CAL4D,CAO5D;;EACA,MAAME,OAAO,GAAG,OAAOF,OAAO,CAACE,OAAf,KAA2B,QAA3B,GAAsCF,OAAO,CAACE,OAA9C,GAAwD,CAAxE;;EACA,IAAIA,OAAO,KAAK,CAAZ,IAAiBA,OAAO,KAAK,CAAjC,EAAoC;IAClC,MAAM,IAAID,SAAJ,CAAcC,OAAO,GAAG,iBAAxB,CAAN;EACD;;EAED,MAAMC,OAAO,GAAG;IACdN,MAAM,EAAEA;EADM,CAAhB;;EAIA,IAAGK,OAAO,KAAK,CAAf,EAAkB;IAChBC,OAAO,CAACC,OAAR,GAAkB,KAAlB;EACD;;EAED,IAAGN,MAAH,EAAW;IACT;IACA,IAAG,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,CAACO,KAAK,CAACC,OAAN,CAAcR,MAAd,CAAlC,EAAyD;MACvD,MAAM,IAAIG,SAAJ,CAAcH,MAAM,GAAG,sCAAvB,CAAN;IACD;;IACDK,OAAO,CAACL,MAAR,GAAiBA,MAAjB;EACD,CA3B2D,CA6B5D;;;EACA,IAAG,OAAOC,EAAP,KAAe,WAAlB,EAA+B;IAC7B,MAAMQ,SAAS,GAAG,OAAOP,OAAO,CAACO,SAAf,KAA6B,UAA7B,GAA0CP,OAAO,CAACO,SAAlD,GAA8D,YAAW;MAAE,OAAOd,IAAI,EAAX;IAAgB,CAA7G;IACAU,OAAO,CAACJ,EAAR,GAAaQ,SAAS,CAACJ,OAAD,EAAUH,OAAV,CAAtB;EACD,CAHD,MAGO,IAAIE,OAAO,KAAK,CAAZ,IAAiBH,EAAE,KAAK,IAA5B,EAAkC;IACvC;IACA,IAAIC,OAAO,CAACQ,kBAAZ,EAAgC;MAC9BL,OAAO,CAACJ,EAAR,GAAa,IAAb,CAD8B,CACX;IACpB;EACF,CALM,MAKA;IACLI,OAAO,CAACJ,EAAR,GAAaA,EAAb;EACD;;EAED,OAAOI,OAAP;AACD,CA3CD;;AA6CAM,MAAM,CAACC,OAAP,GAAiBd,eAAjB"},"metadata":{},"sourceType":"script"}