{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      }\n\n      return new _promise.default(function (resolve, reject) {\n        provider.authenticate({\n          success: function (provider, result) {\n            var opts = {};\n            opts.authData = result;\n\n            _this2.linkWith(provider, opts, saveOpts).then(function () {\n              resolve(_this2);\n            }, function (error) {\n              reject(error);\n            });\n          },\n          error: function (provider, _error) {\n            reject(_error);\n          }\n        });\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n  }, {\n    key: \"loginOrSignup\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    ) {\n      var _this8 = this;\n\n      return this.logIn(username, password).catch(function (err) {\n        if (err.code === 101) {\n          var newUser = new _this8();\n          newUser.set('username', username);\n          newUser.set('password', password);\n          return newUser.signUp();\n        }\n\n        throw err;\n      });\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this9 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this9.currentUserAsync();\n\n            case 2:\n              currentUser = _context.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    }\n\n    return _promise.default.resolve(user);\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var Moralis = require('./Parse');\n\n    Moralis.cleanup();\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n\n        currentUser._clearServerData();\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"names":["_Reflect$construct","require","_Object$defineProperty2","_interopRequireDefault","exports","value","default","_regenerator","_promise","_defineProperty","_stringify","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_AnonymousUtils","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_MoralisWeb","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","username","anonymous","password","email","token","attrs","signupOptions","installationId","signUp","loginOptions","usePost","logIn","_this4","_len","args","Array","_key4","updateUserOnDisk","_this5","_len2","_key5","removeUserFromDisk","_this6","_len3","_key6","_this7","_len4","_key7","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","_this8","catch","err","code","newUser","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","currentAsync","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_this9","mark","_callee","wrap","_context","prev","next","sent","equals","isLinked","destroy","_cleanupAuthData","_synchronizeAllAuthData","abrupt","stop","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","toString","save","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","Moralis","cleanup","promise","isAnonymous","currentSession","_logOutWithAll","_clearServerData","SESSION_MISSING","session","setUserController","_default"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/ParseUser.js"],"sourcesContent":["\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _AnonymousUtils = _interopRequireDefault(require(\"./AnonymousUtils\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\n\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\n\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n\n\n  function ParseUser(attributes\n  /*: ?AttributeMap*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n\n\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      options = options || {};\n      var upgradeOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n\n  }, {\n    key: \"linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this2 = this;\n\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n\n        authData[authType] = options.authData;\n\n        var controller = _CoreManager.default.getUserController();\n\n        return controller.linkWith(this, authData, saveOpts);\n      }\n\n      return new _promise.default(function (resolve, reject) {\n        provider.authenticate({\n          success: function (provider, result) {\n            var opts = {};\n            opts.authData = result;\n\n            _this2.linkWith(provider, opts, saveOpts).then(function () {\n              resolve(_this2);\n            }, function (error) {\n              reject(error);\n            });\n          },\n          error: function (provider, _error) {\n            reject(_error);\n          }\n        });\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_linkWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var saveOpts\n      /*:: ?: FullOptions*/\n      = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider\n    /*: string*/\n    ) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData');\n\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      var success = provider.restoreAuthentication(authData[authType]);\n\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n    /**\n     * Synchronizes authData for all providers.\n     */\n\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var _this3 = this;\n\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n\n        return _promise.default.resolve(_this3);\n      });\n    }\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n\n  }, {\n    key: \"_isLinked\",\n    value: function (provider\n    /*: any*/\n    )\n    /*: boolean*/\n    {\n      var authType;\n\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n\n      var authData = this.get('authData') || {};\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n\n      return !!authData[authType];\n    }\n    /**\n     * Deauthenticates all providers.\n     */\n\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider\n    /*: any*/\n    ) {\n      if (!this.isCurrent()) {\n        return;\n      }\n\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n\n  }, {\n    key: \"isCurrent\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUsername\",\n    value: function ()\n    /*: ?string*/\n    {\n      var username = this.get('username');\n\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function (username\n    /*: string*/\n    ) {\n      // Strip anonymity, even we do not support anonymous user in js SDK, we may\n      // encounter anonymous user created by android/iOS in cloud code.\n      var authData = this.get('authData');\n\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n\n      this.set('username', username);\n    }\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n\n  }, {\n    key: \"setPassword\",\n    value: function (password\n    /*: string*/\n    ) {\n      this.set('password', password);\n    }\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n\n  }, {\n    key: \"getEmail\",\n    value: function ()\n    /*: ?string*/\n    {\n      var email = this.get('email');\n\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n\n      return '';\n    }\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function (email\n    /*: string*/\n    ) {\n      return this.set('email', email);\n    }\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n\n  }, {\n    key: \"getSessionToken\",\n    value: function ()\n    /*: ?string*/\n    {\n      var token = this.get('sessionToken');\n\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n\n      return '';\n    }\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n\n  }, {\n    key: \"authenticated\",\n    value: function ()\n    /*: boolean*/\n    {\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var signupOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.signUp(this, attrs, signupOptions);\n    }\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logIn(this, loginOptions);\n    }\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"save\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this4 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args).then(function () {\n        if (_this4.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this4);\n        }\n\n        return _this4;\n      });\n    }\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args).then(function () {\n        if (_this5.isCurrent()) {\n          return _CoreManager.default.getUserController().removeUserFromDisk();\n        }\n\n        return _this5;\n      });\n    }\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this6 = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args).then(function () {\n        if (_this6.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this6);\n        }\n\n        return _this6;\n      });\n    }\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function ()\n    /*: Promise<ParseUser>*/\n    {\n      var _this7 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args).then(function () {\n        if (_this7.isCurrent()) {\n          return _CoreManager.default.getUserController().updateUserOnDisk(_this7);\n        }\n\n        return _this7;\n      });\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (protoProps\n    /*: { [prop: string]: any }*/\n    , classProps\n    /*: { [prop: string]: any }*/\n    ) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return ParseUser;\n    }\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n\n  }, {\n    key: \"current\",\n    value: function ()\n    /*: ?ParseUser*/\n    {\n      if (!canUseCurrentUser) {\n        return null;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUser();\n    }\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n\n  }, {\n    key: \"currentAsync\",\n    value: function ()\n    /*: Promise<?ParseUser>*/\n    {\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.currentUserAsync();\n    }\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n\n  }, {\n    key: \"signUp\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"logIn\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      var user = new this();\n\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n\n      return user.logIn(options);\n    }\n  }, {\n    key: \"loginOrSignup\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    ) {\n      var _this8 = this;\n\n      return this.logIn(username, password).catch(function (err) {\n        if (err.code === 101) {\n          var newUser = new _this8();\n          newUser.set('username', username);\n          newUser.set('password', password);\n          return newUser.signUp();\n        }\n\n        throw err;\n      });\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"become\",\n    value: function (sessionToken\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n\n      options = options || {};\n      var becomeOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n\n  }, {\n    key: \"me\",\n    value: function (sessionToken\n    /*: string*/\n    ) {\n      var options\n      /*:: ?: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      var meOptions\n      /*: RequestOptions*/\n      = {\n        sessionToken: sessionToken\n      };\n\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON\n    /*: AttributeMap*/\n    ) {\n      var controller = _CoreManager.default.getUserController();\n\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseUser>*/\n    {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.logOut(options);\n    }\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n      var requestOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n\n  }, {\n    key: \"verifyPassword\",\n    value: function (username\n    /*: string*/\n    , password\n    /*: string*/\n    , options\n    /*:: ?: RequestOptions*/\n    ) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n\n      options = options || {};\n      var verificationOption = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getUserController();\n\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed\n    /*: boolean*/\n    ) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options\n    /*:: ?: RequestOptions*/\n    ) {\n      options = options || {};\n\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n\n      return _promise.default.resolve();\n    }\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider\n    /*: any*/\n    ) {\n      authProviders[provider.getAuthType()] = provider; // Synchronize the current user with the auth provider.\n\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"_logInWith\",\n    value: function (provider\n    /*: any*/\n    , options\n    /*: { authData?: AuthData }*/\n    , saveOpts\n    /*:: ?: FullOptions*/\n    ) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user\n    /*: ParseUser*/\n    ) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_User', ParseUser);\n\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    var _this9 = this;\n\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n      var currentUser;\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this9.currentUserAsync();\n\n            case 2:\n              currentUser = _context.sent;\n\n              if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return currentUser.destroy({\n                sessionToken: currentUser.getSessionToken()\n              });\n\n            case 6:\n              currentUserCache = user;\n\n              user._cleanupAuthData();\n\n              user._synchronizeAllAuthData();\n\n              return _context.abrupt(\"return\", DefaultController.updateUserOnDisk(user));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  currentUser: function ()\n  /*: ?ParseUser*/\n  {\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    var userData = _Storage.default.getItem(path);\n\n    currentUserCacheMatchesDisk = true;\n\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n\n    userData = JSON.parse(userData);\n\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n\n      delete userData._id;\n    }\n\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n\n    var current = _ParseObject2.default.fromJSON(userData);\n\n    currentUserCache = current;\n\n    current._synchronizeAllAuthData();\n\n    return current;\n  },\n  currentUserAsync: function ()\n  /*: Promise<?ParseUser>*/\n  {\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n\n      userData = JSON.parse(userData);\n\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n\n        delete userData._id;\n      }\n\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n\n      var current = _ParseObject2.default.fromJSON(userData);\n\n      currentUserCache = current;\n\n      current._synchronizeAllAuthData();\n\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user\n  /*: ParseUser*/\n  , attrs\n  /*: AttributeMap*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  logIn: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n\n      user._setExisted(true);\n\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n\n      user._finishFetch(response);\n\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user\n  /*: ParseUser*/\n  , userJSON\n  /*: AttributeMap*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    user._finishFetch(userJSON);\n\n    user._setExisted(true);\n\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    }\n\n    return _promise.default.resolve(user);\n  },\n  me: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n\n      user._setExisted(true);\n\n      return user;\n    });\n  },\n  logOut: function (options\n  /*: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    var Moralis = require('./Parse');\n\n    Moralis.cleanup();\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n\n      var promise = _Storage.default.removeItemAsync(path);\n\n      if (currentUser !== null) {\n        var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);\n\n        var currentSession = currentUser.getSessionToken();\n\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            if (isAnonymous) {\n              return currentUser.destroy({\n                sessionToken: currentSession\n              });\n            }\n          }).then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n\n        currentUser._logOutWithAll();\n\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n\n        currentUser._clearServerData();\n      }\n\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user\n  /*: ParseUser*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var token = user.getSessionToken();\n\n    if (!token) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token'));\n    }\n\n    options.sessionToken = token;\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'upgradeToRevocableSession', {}, options).then(function (result) {\n      var session = new _ParseSession.default();\n\n      session._finishFetch(result);\n\n      user._finishFetch({\n        sessionToken: session.getSessionToken()\n      });\n\n      if (user.isCurrent()) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return _promise.default.resolve(user);\n    });\n  },\n  linkWith: function (user\n  /*: ParseUser*/\n  , authData\n  /*: AuthData*/\n  , options\n  /*: FullOptions*/\n  ) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n\n      return user;\n    });\n  },\n  verifyPassword: function (username\n  /*: string*/\n  , password\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email\n  /*: string*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n\n_CoreManager.default.setUserController(DefaultController);\n\nvar _default = ParseUser;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}