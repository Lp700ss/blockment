{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nfunction getLiveQueryClient()\n/*: LiveQueryClient*/\n{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\n\n\nvar LiveQuery = new _EventEmitter.default();\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\n\nLiveQuery.open = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getLiveQueryClient();\n\n        case 2:\n          liveQueryClient = _context.sent;\n          liveQueryClient.open();\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\n\nLiveQuery.close = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return getLiveQueryClient();\n\n        case 2:\n          liveQueryClient = _context2.sent;\n          liveQueryClient.close();\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n})); // Register a default onError callback to make sure we do not crash on error\n\nLiveQuery.on('error', function () {});\nvar _default = LiveQuery;\nexports.default = _default;\nvar defaultLiveQueryClient;\nvar DefaultLiveQueryController = {\n  setDefaultLiveQueryClient: function (liveQueryClient\n  /*: LiveQueryClient*/\n  ) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  getDefaultLiveQueryClient: function ()\n  /*: Promise<LiveQueryClient>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;\n\n      return _regenerator.default.wrap(function (_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!defaultLiveQueryClient) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", defaultLiveQueryClient);\n\n            case 2:\n              _context3.next = 4;\n              return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n\n            case 4:\n              _yield$Promise$all = _context3.sent;\n              _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);\n              currentUser = _yield$Promise$all2[0];\n              installationId = _yield$Promise$all2[1];\n              sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n              liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n\n              if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0)) {\n                _context3.next = 12;\n                break;\n              }\n\n              throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n\n            case 12:\n              // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n              if (!liveQueryServerURL) {\n                serverURL = _CoreManager.default.get('SERVER_URL');\n                protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n                host = serverURL.replace(/^https?:\\/\\//, '');\n                liveQueryServerURL = protocol + host;\n\n                _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n              }\n\n              applicationId = _CoreManager.default.get('APPLICATION_ID');\n              javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n              masterKey = _CoreManager.default.get('MASTER_KEY');\n              defaultLiveQueryClient = new _LiveQueryClient.default({\n                applicationId: applicationId,\n                serverURL: liveQueryServerURL,\n                javascriptKey: javascriptKey,\n                masterKey: masterKey,\n                sessionToken: sessionToken,\n                installationId: installationId\n              });\n              defaultLiveQueryClient.on('error', function (error) {\n                LiveQuery.emit('error', error);\n              });\n              defaultLiveQueryClient.on('open', function () {\n                LiveQuery.emit('open');\n              });\n              defaultLiveQueryClient.on('close', function () {\n                LiveQuery.emit('close');\n              });\n              return _context3.abrupt(\"return\", defaultLiveQueryClient);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  _clearCachedDefaultClient: function () {\n    defaultLiveQueryClient = null;\n  }\n};\n\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_indexOf","_regenerator","_slicedToArray2","_asyncToGenerator2","_EventEmitter","_LiveQueryClient","_CoreManager","getLiveQueryClient","getLiveQueryController","getDefaultLiveQueryClient","LiveQuery","open","mark","_callee","liveQueryClient","wrap","_context","prev","next","sent","stop","close","_callee2","_context2","on","_default","defaultLiveQueryClient","DefaultLiveQueryController","setDefaultLiveQueryClient","_callee3","_yield$Promise$all","_yield$Promise$all2","currentUser","installationId","sessionToken","liveQueryServerURL","serverURL","protocol","host","applicationId","javascriptKey","masterKey","_context3","abrupt","all","getUserController","currentUserAsync","getInstallationController","currentInstallationId","getSessionToken","undefined","get","call","Error","replace","set","error","emit","_clearCachedDefaultClient","setLiveQueryController"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/ParseLiveQuery.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nfunction getLiveQueryClient()\n/*: LiveQueryClient*/\n{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\n\n\nvar LiveQuery = new _EventEmitter.default();\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\n\nLiveQuery.open = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getLiveQueryClient();\n\n        case 2:\n          liveQueryClient = _context.sent;\n          liveQueryClient.open();\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\n\nLiveQuery.close = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return getLiveQueryClient();\n\n        case 2:\n          liveQueryClient = _context2.sent;\n          liveQueryClient.close();\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n})); // Register a default onError callback to make sure we do not crash on error\n\nLiveQuery.on('error', function () {});\nvar _default = LiveQuery;\nexports.default = _default;\nvar defaultLiveQueryClient;\nvar DefaultLiveQueryController = {\n  setDefaultLiveQueryClient: function (liveQueryClient\n  /*: LiveQueryClient*/\n  ) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  getDefaultLiveQueryClient: function ()\n  /*: Promise<LiveQueryClient>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;\n\n      return _regenerator.default.wrap(function (_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!defaultLiveQueryClient) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", defaultLiveQueryClient);\n\n            case 2:\n              _context3.next = 4;\n              return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n\n            case 4:\n              _yield$Promise$all = _context3.sent;\n              _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);\n              currentUser = _yield$Promise$all2[0];\n              installationId = _yield$Promise$all2[1];\n              sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n              liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n\n              if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0)) {\n                _context3.next = 12;\n                break;\n              }\n\n              throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n\n            case 12:\n              // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n              if (!liveQueryServerURL) {\n                serverURL = _CoreManager.default.get('SERVER_URL');\n                protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n                host = serverURL.replace(/^https?:\\/\\//, '');\n                liveQueryServerURL = protocol + host;\n\n                _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n              }\n\n              applicationId = _CoreManager.default.get('APPLICATION_ID');\n              javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n              masterKey = _CoreManager.default.get('MASTER_KEY');\n              defaultLiveQueryClient = new _LiveQueryClient.default({\n                applicationId: applicationId,\n                serverURL: liveQueryServerURL,\n                javascriptKey: javascriptKey,\n                masterKey: masterKey,\n                sessionToken: sessionToken,\n                installationId: installationId\n              });\n              defaultLiveQueryClient.on('error', function (error) {\n                LiveQuery.emit('error', error);\n              });\n              defaultLiveQueryClient.on('open', function () {\n                LiveQuery.emit('open');\n              });\n              defaultLiveQueryClient.on('close', function () {\n                LiveQuery.emit('close');\n              });\n              return _context3.abrupt(\"return\", defaultLiveQueryClient);\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  _clearCachedDefaultClient: function () {\n    defaultLiveQueryClient = null;\n  }\n};\n\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);"],"mappings":"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"},"metadata":{},"sourceType":"script"}