{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1 = require('./secp256k1v3-adapter');\n\nvar BN = require(\"bn.js\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\n\n\nexports.ecsign = function (msgHash, privateKey, chainId) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var recovery = sig.recovery;\n  var ret = {\n    r: sig.signature.slice(0, 32),\n    s: sig.signature.slice(32, 64),\n    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n  };\n  return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated\n\n  if (buf.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = buf[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new BN(r);\n  var sBN = new BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n\nfunction calculateSigRecovery(v, chainId) {\n  return chainId ? v - (2 * chainId + 35) : v - 27;\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === 0 || recovery === 1;\n}","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}