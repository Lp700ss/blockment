{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport Common, { Hardfork } from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { privateToAddress, stripHexPrefix } from 'ethereumjs-util';\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: \"Invalid parameters: must provide an Ethereum address.\"\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = \"The eth_personalSign method requires params ordered \";\n      warning += \"[message, address]. This was previously handled incorrectly, \";\n      warning += \"and has been corrected automatically. \";\n      warning += \"Please switch this param order for smooth behavior in the future.\";\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\n\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\n\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\n\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: _objectSpread$1(_objectSpread$1({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    const currentChainConfig = this.getChainConfig(chainId);\n    const {\n      ticker,\n      tickerName,\n      rpcTarget\n    } = currentChainConfig;\n    this.update({\n      chainId: \"loading\"\n    });\n    await this.connector.updateChain({\n      chainId: Number.parseInt(chainId, 16),\n      nativeCurrency: {\n        name: tickerName,\n        symbol: ticker\n      },\n      networkId: Number.parseInt(chainId, 10),\n      rpcUrl: rpcTarget\n    });\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.lookupNetwork(this.connector);\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$1({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function getCommonConfiguration(supportsEIP1559, chainConfig) {\n  const {\n    displayName: name,\n    chainId\n  } = chainConfig;\n  const hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;\n  const customChainParams = {\n    name,\n    chainId: chainId === \"loading\" ? 0 : parseInt(chainId, 16),\n    networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 10),\n    hardfork\n  };\n  return Common.custom(customChainParams);\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    privKey,\n    chainConfig,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      return \"0x\".concat(signedTx.toString(\"hex\"));\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = getProviderHandlers({\n      privKey,\n      chainConfig: this.config.chainConfig,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n    log.debug(\"this provider\", this.provider, chainId, this.state.chainId);\n\n    if (this.state.chainId !== chainId) {\n      this.provider.emit(\"chainChanged\", chainId);\n      this.provider.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, WalletConnectProvider };","map":{"version":3,"sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectUtils.ts","../src/providers/injectedProviders/WalletConnectProvider.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"names":["str","createWalletMiddleware","processTypedMessageV4","address","accounts","getAccounts","normalizedAccounts","_address","normalizedAddress","message","res","ethErrors","txParams","req","from","validateAndNormalizeKeyholder","processTransaction","processSignTransaction","extraParams","msgParams","data","processEthSignMessage","version","processTypedMessage","processTypedMessageV3","firstParam","secondParam","resemblesAddress","warning","processPersonalMessage","processEncryptionPublicKey","ciphertext","processDecryptMessage","getPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","switchChain","chainParams","addChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","accountParams","wallet_updateAccount","createChainIdMiddleware","chainId","end","next","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","connector","result","log","_","WalletConnectProvider","BaseProvider","constructor","config","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","state","providerFactory","params","enable","code","method","setupProvider","currentChainConfig","Number","nativeCurrency","name","symbol","ticker","networkId","rpcUrl","lookupNetwork","WalletLoginError","connectedHexChainId","isHexStrict","WalletInitializationError","setupEngine","engine","provider","providerFromEngine","onConnectorStateUpdate","connectedChainId","displayName","hardfork","supportsEIP1559","Hardfork","customChainParams","parseInt","Common","getProviderEngineProxy","privateToAddress","Buffer","providerEngineProxy","common","getCommonConfiguration","unsignedEthTx","signedTx","txHash","rawMessageSig","signMessage","privKeyBuffer","sig","personalSign","privateKey","signTypedData","SignTypedDataVersion","V1","V3","V4","getEncryptionPublicKey","stripped","stripHexPrefix","buff","decrypted","decrypt","encryptedData","JSON","privKey","EthereumPrivateKeyProvider","chainSwitchMiddleware","updateAccount","existingKey","network","getChainSwitchMiddleware","chainSwitchHandlers","tickerName","rpcUrls","blockExplorer","getAccountMiddleware","accountHandlers"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createFetchMiddleware, providerFromEngine, signMessage } from '@toruslabs/base-controllers';\nimport { createScaffoldMiddleware, createAsyncMiddleware, mergeMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, WalletLoginError, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport Common, { Hardfork } from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { personalSign, signTypedData, SignTypedDataVersion, getEncryptionPublicKey, decrypt } from '@metamask/eth-sig-util';\nimport { privateToAddress, stripHexPrefix } from 'ethereumjs-util';\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  } //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n\n\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n\n    throw ethErrors.rpc.invalidParams({\n      message: \"Invalid parameters: must provide an Ethereum address.\"\n    });\n  } //\n  // account lookups\n  //\n\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  } //\n  // transaction signatures\n  //\n\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  } //\n  // message signatures\n  //\n\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    } // process normally\n\n\n    const firstParam = req.params[0];\n    const secondParam = req.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n\n    const extraParams = req.params[2] || {}; // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n\n    let address, message;\n\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = \"The eth_personalSign method requires params ordered \";\n      warning += \"[message, address]. This was previously handled incorrectly, \";\n      warning += \"and has been corrected automatically. \";\n      warning += \"Please switch this param order for smooth behavior in the future.\";\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: message\n    }); // eslint-disable-next-line require-atomic-updates\n\n\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n\n    const msgParams = _objectSpread$2(_objectSpread$2({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([createScaffoldMiddleware({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n\n  async function addNewChain(req, res) {\n    var _req$params;\n\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n\n  async function updateChain(req, res) {\n    var _req$params2;\n\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain)\n  });\n}\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n\n  async function updateAccount(req, res) {\n    var _req$params3;\n\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount)\n  });\n} // #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({\n    rpcTarget\n  });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      const {\n        accounts\n      } = connector;\n\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams, _) => {\n      const result = await connector.sendTransaction(txParams);\n      return result;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const result = await connector.signTransaction(txParams);\n      return result;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processTypedMessageV4: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processEncryptionPublicKey: async _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass WalletConnectProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state: _objectSpread$1(_objectSpread$1({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    this.connector = connector || null;\n  }\n\n  async enable() {\n    if (!this.connector) throw ethErrors.provider.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    const currentChainConfig = this.getChainConfig(chainId);\n    const {\n      ticker,\n      tickerName,\n      rpcTarget\n    } = currentChainConfig;\n    this.update({\n      chainId: \"loading\"\n    });\n    await this.connector.updateChain({\n      chainId: Number.parseInt(chainId, 16),\n      nativeCurrency: {\n        name: tickerName,\n        symbol: ticker\n      },\n      networkId: Number.parseInt(chainId, 10),\n      rpcUrl: rpcTarget\n    });\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.lookupNetwork(this.connector);\n  }\n\n  async lookupNetwork(connector) {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : \"0x\".concat(connector.chainId.toString(16));\n    if (chainId !== connectedHexChainId) throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n    this.update({\n      chainId: connectedHexChainId\n    });\n    this.provider.emit(\"connect\", {\n      chainId\n    });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  async setupEngine(connector) {\n    const providerHandlers = getProviderHandlers$1({\n      connector\n    });\n    this.update({\n      accounts: connector.accounts || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork(connector);\n  }\n\n  async onConnectorStateUpdate(connector) {\n    connector.on(\"session_update\", async (error, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n\n      const {\n        accounts,\n        chainId: connectedChainId,\n        rpcUrl\n      } = payload; // Check if accounts changed and trigger event\n\n      if (accounts !== null && accounts !== void 0 && accounts.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts\n        }); // await this.setupEngine(connector);\n\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n\n      const connectedHexChainId = isHexStrict(connectedChainId) ? connectedChainId : \"0x\".concat(connectedChainId.toString(16)); // Check if chainId changed and trigger event\n\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: _objectSpread$1(_objectSpread$1({}, this.config.chainConfig), {}, {\n            chainId: connectedHexChainId,\n            rpcTarget: rpcUrl\n          })\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n\n}\n\n_defineProperty(WalletConnectProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new WalletConnectProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\nasync function getCommonConfiguration(supportsEIP1559, chainConfig) {\n  const {\n    displayName: name,\n    chainId\n  } = chainConfig;\n  const hardfork = supportsEIP1559 ? Hardfork.London : Hardfork.Berlin;\n  const customChainParams = {\n    name,\n    chainId: chainId === \"loading\" ? 0 : parseInt(chainId, 16),\n    networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 10),\n    hardfork\n  };\n  return Common.custom(customChainParams);\n}\n\nfunction getProviderHandlers(_ref) {\n  let {\n    privKey,\n    chainConfig,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [\"0x\".concat(privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\"))],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw ethErrors.provider.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const common = await getCommonConfiguration(!!txParams.maxFeePerGas && !!txParams.maxPriorityFeePerGas, chainConfig);\n      const unsignedEthTx = TransactionFactory.fromTxData(txParams, {\n        common\n      });\n      const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n      return \"0x\".concat(signedTx.toString(\"hex\"));\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = signTypedData({\n        privateKey: privKeyBuffer,\n        data: msgParams.data,\n        version: SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass EthereumPrivateKeyProvider extends BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n\n  async enable() {\n    if (!this.state.privateKey) throw ethErrors.provider.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n\n  async setupProvider(privKey) {\n    const providerHandlers = getProviderHandlers({\n      privKey,\n      chainConfig: this.config.chainConfig,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine(); // Not a partial anymore because of checks in ctor\n\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n\n  async lookupNetwork() {\n    if (!this.provider) throw ethErrors.provider.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(\"Invalid network, net_version is: \".concat(network));\n    log.debug(\"this provider\", this.provider, chainId, this.state.chainId);\n\n    if (this.state.chainId !== chainId) {\n      this.provider.emit(\"chainChanged\", chainId);\n      this.provider.emit(\"connect\", {\n        chainId\n      });\n    }\n\n    this.update({\n      chainId\n    });\n    return network;\n  }\n\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n\n}\n\n_defineProperty(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new EthereumPrivateKeyProvider({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nexport { EthereumPrivateKeyProvider, WalletConnectProvider };\n//# sourceMappingURL=ethereumProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}