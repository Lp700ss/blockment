{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const {\n        blockExplorer,\n        displayName\n      } = this.chainConfig;\n      network = {\n        chainId: 1,\n        host: \"mainnet\",\n        blockExplorer,\n        networkName: displayName\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget\n      } = this.chainConfig;\n      network = {\n        chainId: parseInt(chainId, 16),\n        host: rpcTarget,\n        blockExplorer,\n        networkName: displayName\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        throw WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(chainId));\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { TorusWalletAdapter };","map":{"version":3,"sources":["../src/torusWalletAdapter.ts"],"names":["TorusWalletAdapter","BaseAdapter","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","provider","init","getChainConfig","displayName","network","chainId","host","networkName","rpcTarget","parseInt","showTorusButton","ADAPTER_EVENTS","options","log","connect","WalletInitializationError","adapter","reconnected","rehydrated","error","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const {\n        blockExplorer,\n        displayName\n      } = this.chainConfig;\n      network = {\n        chainId: 1,\n        host: \"mainnet\",\n        blockExplorer,\n        networkName: displayName\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget\n      } = this.chainConfig;\n      network = {\n        chainId: parseInt(chainId, 16),\n        host: rpcTarget,\n        blockExplorer,\n        networkName: displayName\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        throw WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(chainId));\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { TorusWalletAdapter };\n//# sourceMappingURL=torusEvmAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}