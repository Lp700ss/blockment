{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessageById = removeMessageById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\n\n\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\n\nfunction getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res) {\n    openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","averageResponseTime","canBeUsed","cleanOldMessages","close","create","createDatabase","getAllMessages","getIdb","getMessagesHigherThan","getOldMessages","microSeconds","onMessage","postMessage","removeMessageById","type","writeMessage","_util","require","_obliviousSet","_options","DB_PREFIX","OBJECT_STORE_ID","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","e","id","request","ttl","olderThen","msgObk","then","tooOld","all","map","msgObj","options","fillOptionsWithDefaults","state","closed","randomToken","eMIs","ObliviousSet","idb","writeBlockPromise","PROMISE_RESOLVED_VOID","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","channelState","randomInt","fn","isNode","_default"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/broadcast-channel/dist/lib/methods/indexed-db.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessageById = removeMessageById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\n\nfunction getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res) {\n    openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed() {\n  if (_util.isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}