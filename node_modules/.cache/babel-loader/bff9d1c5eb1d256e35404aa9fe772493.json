{"ast":null,"code":"var a = (n => (n.MissingApiKey = \"MISSING_API_KEY\", n.ModalNotReady = \"MODAL_NOT_READY\", n.MalformedResponse = \"MALFORMED_RESPONSE\", n.InvalidArgument = \"INVALID_ARGUMENT\", n.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", n.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", n))(a || {}),\n    m = (_ => (_.SyncWeb3Method = \"SYNC_WEB3_METHOD\", _.DuplicateIframe = \"DUPLICATE_IFRAME\", _.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", _.DeprecationNotice = \"DEPRECATION_NOTICE\", _))(m || {}),\n    p = (e => (e[e.ParseError = -32700] = \"ParseError\", e[e.InvalidRequest = -32600] = \"InvalidRequest\", e[e.MethodNotFound = -32601] = \"MethodNotFound\", e[e.InvalidParams = -32602] = \"InvalidParams\", e[e.InternalError = -32603] = \"InternalError\", e[e.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", e[e.MagicLinkExpired = -10001] = \"MagicLinkExpired\", e[e.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", e[e.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", e[e.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", e[e.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", e[e.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", e[e.InactiveRecipient = -10010] = \"InactiveRecipient\", e[e.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", e))(p || {});\n\nvar o = (t => (t.LoginWithSms = \"magic_auth_login_with_sms\", t.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", t.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", t.LoginWithCredential = \"magic_auth_login_with_credential\", t.GetIdToken = \"magic_auth_get_id_token\", t.GenerateIdToken = \"magic_auth_generate_id_token\", t.GetMetadata = \"magic_auth_get_metadata\", t.IsLoggedIn = \"magic_auth_is_logged_in\", t.Logout = \"magic_auth_logout\", t.UpdateEmail = \"magic_auth_update_email\", t.UserSettings = \"magic_auth_settings\", t.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", t.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", t.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", t.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", t.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", t.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", t.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", t.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", t.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", t.LogoutTestMode = \"magic_auth_logout_testing_mode\", t.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", t))(o || {});\n\nvar u = (i => (i.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", i.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", i.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", i.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", i.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", i))(u || {}),\n    g = (s => (s.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", s))(g || {});\n\nvar l = (s => (s.Harmony = \"HARMONY\", s))(l || {});\n\nexport { l as EthChainType, u as MagicIncomingWindowMessage, g as MagicOutgoingWindowMessage, o as MagicPayloadMethod, p as RPCErrorCode, a as SDKErrorCode, m as SDKWarningCode };","map":{"version":3,"sources":["../../src/core/exception-types.ts","../../src/core/json-rpc-types.ts","../../src/core/message-types.ts","../../src/modules/rpc-provider-types.ts"],"names":[],"mappings":"AAAO,IAAK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,aAAA,GAAgB,iBAAhB,EACA,CAAA,CAAA,aAAA,GAAgB,iBADhB,EAEA,CAAA,CAAA,iBAAA,GAAoB,oBAFpB,EAGA,CAAA,CAAA,eAAA,GAAkB,kBAHlB,EAIA,CAAA,CAAA,uBAAA,GAA0B,2BAJ1B,EAKA,CAAA,CAAA,sBAAA,GAAyB,yBALzB,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CAAA;AAAA,IASK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,cAAA,GAAiB,kBAAjB,EACA,CAAA,CAAA,eAAA,GAAkB,kBADlB,EAEA,CAAA,CAAA,gCAAA,GAAmC,qCAFnC,EAGA,CAAA,CAAA,iBAAA,GAAoB,oBAHpB,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CATA;AAAA,IAgBK,CAAA,GAAL,CAAK,CAAA,KAEV,CAAA,CAAA,CAAA,CAAA,UAAA,GAAa,CAAA,KAAb,CAAA,GAAA,YAAA,EACA,CAAA,CAAA,CAAA,CAAA,cAAA,GAAiB,CAAA,KAAjB,CAAA,GAAA,gBADA,EAEA,CAAA,CAAA,CAAA,CAAA,cAAA,GAAiB,CAAA,KAAjB,CAAA,GAAA,gBAFA,EAGA,CAAA,CAAA,CAAA,CAAA,aAAA,GAAgB,CAAA,KAAhB,CAAA,GAAA,eAHA,EAIA,CAAA,CAAA,CAAA,CAAA,aAAA,GAAgB,CAAA,KAAhB,CAAA,GAAA,eAJA,EAOA,CAAA,CAAA,CAAA,CAAA,2BAAA,GAA8B,CAAA,GAA9B,CAAA,GAAA,6BAPA,EAQA,CAAA,CAAA,CAAA,CAAA,gBAAA,GAAmB,CAAA,KAAnB,CAAA,GAAA,kBARA,EASA,CAAA,CAAA,CAAA,CAAA,oBAAA,GAAuB,CAAA,KAAvB,CAAA,GAAA,sBATA,EAUA,CAAA,CAAA,CAAA,CAAA,2BAAA,GAA8B,CAAA,KAA9B,CAAA,GAAA,6BAVA,EAWA,CAAA,CAAA,CAAA,CAAA,mBAAA,GAAsB,CAAA,KAAtB,CAAA,GAAA,qBAXA,EAYA,CAAA,CAAA,CAAA,CAAA,iBAAA,GAAoB,CAAA,KAApB,CAAA,GAAA,mBAZA,EAaA,CAAA,CAAA,CAAA,CAAA,oBAAA,GAAuB,CAAA,KAAvB,CAAA,GAAA,sBAbA,EAcA,CAAA,CAAA,CAAA,CAAA,iBAAA,GAAoB,CAAA,KAApB,CAAA,GAAA,mBAdA,EAeA,CAAA,CAAA,CAAA,CAAA,kBAAA,GAAqB,CAAA,KAArB,CAAA,GAAA,oBAfA,EAFU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CAhBA;;ACyCA,IAAK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,YAAA,GAAe,2BAAf,EACA,CAAA,CAAA,iBAAA,GAAoB,iCADpB,EAEA,CAAA,CAAA,kBAAA,GAAqB,kCAFrB,EAGA,CAAA,CAAA,mBAAA,GAAsB,kCAHtB,EAIA,CAAA,CAAA,UAAA,GAAa,yBAJb,EAKA,CAAA,CAAA,eAAA,GAAkB,8BALlB,EAMA,CAAA,CAAA,WAAA,GAAc,yBANd,EAOA,CAAA,CAAA,UAAA,GAAa,yBAPb,EAQA,CAAA,CAAA,MAAA,GAAS,mBART,EASA,CAAA,CAAA,WAAA,GAAc,yBATd,EAUA,CAAA,CAAA,YAAA,GAAe,qBAVf,EAWA,CAAA,CAAA,oBAAA,GAAuB,kCAXvB,EAYA,CAAA,CAAA,oBAAA,GAAuB,wCAZvB,EAaA,CAAA,CAAA,yBAAA,GAA4B,8CAb5B,EAcA,CAAA,CAAA,0BAAA,GAA6B,0CAd7B,EAeA,CAAA,CAAA,2BAAA,GAA8B,+CAf9B,EAgBA,CAAA,CAAA,kBAAA,GAAqB,sCAhBrB,EAiBA,CAAA,CAAA,uBAAA,GAA0B,2CAjB1B,EAkBA,CAAA,CAAA,mBAAA,GAAsB,sCAlBtB,EAmBA,CAAA,CAAA,kBAAA,GAAqB,sCAnBrB,EAoBA,CAAA,CAAA,cAAA,GAAiB,gCApBjB,EAqBA,CAAA,CAAA,mBAAA,GAAsB,sCArBtB,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CAAA;;ACvCA,IAAK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,qBAAA,GAAwB,uBAAxB,EACA,CAAA,CAAA,mBAAA,GAAsB,qBADtB,EAEA,CAAA,CAAA,kBAAA,GAAqB,oBAFrB,EAGA,CAAA,CAAA,kBAAA,GAAqB,oBAHrB,EAIA,CAAA,CAAA,kBAAA,GAAqB,oBAJrB,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CAAA;AAAA,IAQK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,oBAAA,GAAuB,sBAAvB,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CARA;;ACAA,IAAK,CAAA,GAAL,CAAK,CAAA,KACV,CAAA,CAAA,OAAA,GAAU,SAAV,EADU,CAAA,CAAL,EAAK,CAAA,IAAA,EAAL,CAAA;;AAAK,SAAA,CAAA,IAAA,YAAA,EAAA,CAAA,IAAA,0BAAA,EAAA,CAAA,IAAA,0BAAA,EAAA,CAAA,IAAA,kBAAA,EAAA,CAAA,IAAA,YAAA,EAAA,CAAA,IAAA,YAAA,EAAA,CAAA,IAAA,cAAA","sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export type EthNetworkName = 'mainnet' | 'rinkeby' | 'ropsten' | 'kovan';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"]},"metadata":{},"sourceType":"module"}