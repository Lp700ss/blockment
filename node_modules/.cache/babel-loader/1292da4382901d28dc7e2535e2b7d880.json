{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Config is a local representation of configuration data that\n * can be set from the Parse dashboard.\n *\n * @alias Parse.Config\n */\n\n\nvar ParseConfig = /*#__PURE__*/function () {\n  function ParseConfig() {\n    (0, _classCallCheck2.default)(this, ParseConfig);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\n    this.attributes = {};\n    this._escapedAttributes = {};\n  }\n  /**\n   * Gets the value of an attribute.\n   *\n   * @param {string} attr The name of an attribute.\n   * @returns {*}\n   */\n\n\n  (0, _createClass2.default)(ParseConfig, [{\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: any*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var html = this._escapedAttributes[attr];\n\n      if (html) {\n        return html;\n      }\n\n      var val = this.attributes[attr];\n      var escaped = '';\n\n      if (val != null) {\n        escaped = (0, _escape2.default)(val.toString());\n      }\n\n      this._escapedAttributes[attr] = escaped;\n      return escaped;\n    }\n    /**\n     * Retrieves the most recently-fetched configuration object, either from\n     * memory or from local storage if necessary.\n     *\n     * @static\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\n     *     exists, else an empty Parse.Config.\n     */\n\n  }], [{\n    key: \"current\",\n    value: function () {\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.current();\n    }\n    /**\n     * Gets a new configuration object from the server.\n     *\n     * @static\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with a newly-created\n     *     configuration object when the get completes.\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.get(options);\n    }\n    /**\n     * Save value keys to the server.\n     *\n     * @static\n     * @param {object} attrs The config parameters and values.\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\n     * in `attrs` should be retrievable only by using the master key.\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\n     * If a parameter is not provided or set to `false`, it can be retrieved without\n     * using the master key.\n     * @returns {Promise} A promise that is resolved with a newly-created\n     *     configuration object or with the current with the update.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (attrs\n    /*: { [key: string]: any }*/\n    , masterKeyOnlyFlags\n    /*: { [key: string]: any }*/\n    ) {\n      var controller = _CoreManager.default.getConfigController(); // To avoid a mismatch with the local and the cloud config we get a new version\n\n\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\n        return controller.get({\n          useMasterKey: true\n        });\n      }, function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    /**\n     * Used for testing\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentConfig = null;\n    }\n  }]);\n  return ParseConfig;\n}();\n\nvar currentConfig = null;\nvar CURRENT_CONFIG_KEY = 'currentConfig';\n\nfunction decodePayload(data) {\n  try {\n    var json = JSON.parse(data);\n\n    if (json && (0, _typeof2.default)(json) === 'object') {\n      return (0, _decode.default)(json);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nvar DefaultController = {\n  current: function () {\n    if (currentConfig) {\n      return currentConfig;\n    }\n\n    var config = new ParseConfig();\n\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\n\n    if (!_Storage.default.async()) {\n      var configData = _Storage.default.getItem(storagePath);\n\n      if (configData) {\n        var attributes = decodePayload(configData);\n\n        if (attributes) {\n          config.attributes = attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    } // Return a promise for async storage controllers\n\n\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\n      if (configData) {\n        var _attributes = decodePayload(configData);\n\n        if (_attributes) {\n          config.attributes = _attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    });\n  },\n  get: function () {\n    var options\n    /*: RequestOptions*/\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\n      if (!response || !response.params) {\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\n        return _promise.default.reject(error);\n      }\n\n      var config = new ParseConfig();\n      config.attributes = {};\n\n      for (var attr in response.params) {\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\n      }\n\n      currentConfig = config;\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\n        return config;\n      });\n    });\n  },\n  save: function (attrs\n  /*: { [key: string]: any }*/\n  , masterKeyOnlyFlags\n  /*: { [key: string]: any }*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var encodedAttrs = {};\n\n    for (var _key in attrs) {\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\n    }\n\n    return RESTController.request('PUT', 'config', {\n      params: encodedAttrs,\n      masterKeyOnly: masterKeyOnlyFlags\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      if (response && response.result) {\n        return _promise.default.resolve();\n      }\n\n      var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\n      return _promise.default.reject(error);\n    });\n  }\n};\n\n_CoreManager.default.setConfigController(DefaultController);\n\nvar _default = ParseConfig;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_stringify","_typeof2","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_decode","_encode","_escape2","_ParseError","_Storage","ParseConfig","attributes","_escapedAttributes","key","attr","html","val","escaped","toString","controller","getConfigController","current","options","arguments","length","undefined","get","attrs","masterKeyOnlyFlags","save","then","useMasterKey","error","reject","currentConfig","CURRENT_CONFIG_KEY","decodePayload","data","json","JSON","parse","e","DefaultController","config","storagePath","generatePath","async","configData","getItem","getItemAsync","_attributes","RESTController","getRESTController","request","response","params","INVALID_JSON","setItemAsync","encodedAttrs","_key","masterKeyOnly","result","resolve","INTERNAL_SERVER_ERROR","setConfigController","_default"],"sources":["E:/intoweb3/NBlockment/blockment/node_modules/moralis/lib/browser/ParseConfig.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Config is a local representation of configuration data that\n * can be set from the Parse dashboard.\n *\n * @alias Parse.Config\n */\n\n\nvar ParseConfig = /*#__PURE__*/function () {\n  function ParseConfig() {\n    (0, _classCallCheck2.default)(this, ParseConfig);\n    (0, _defineProperty2.default)(this, \"attributes\", void 0);\n    (0, _defineProperty2.default)(this, \"_escapedAttributes\", void 0);\n    this.attributes = {};\n    this._escapedAttributes = {};\n  }\n  /**\n   * Gets the value of an attribute.\n   *\n   * @param {string} attr The name of an attribute.\n   * @returns {*}\n   */\n\n\n  (0, _createClass2.default)(ParseConfig, [{\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: any*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var html = this._escapedAttributes[attr];\n\n      if (html) {\n        return html;\n      }\n\n      var val = this.attributes[attr];\n      var escaped = '';\n\n      if (val != null) {\n        escaped = (0, _escape2.default)(val.toString());\n      }\n\n      this._escapedAttributes[attr] = escaped;\n      return escaped;\n    }\n    /**\n     * Retrieves the most recently-fetched configuration object, either from\n     * memory or from local storage if necessary.\n     *\n     * @static\n     * @returns {Parse.Config} The most recently-fetched Parse.Config if it\n     *     exists, else an empty Parse.Config.\n     */\n\n  }], [{\n    key: \"current\",\n    value: function () {\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.current();\n    }\n    /**\n     * Gets a new configuration object from the server.\n     *\n     * @static\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with a newly-created\n     *     configuration object when the get completes.\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var controller = _CoreManager.default.getConfigController();\n\n      return controller.get(options);\n    }\n    /**\n     * Save value keys to the server.\n     *\n     * @static\n     * @param {object} attrs The config parameters and values.\n     * @param {object} masterKeyOnlyFlags The flags that define whether config parameters listed\n     * in `attrs` should be retrievable only by using the master key.\n     * For example: `param1: true` makes `param1` only retrievable by using the master key.\n     * If a parameter is not provided or set to `false`, it can be retrieved without\n     * using the master key.\n     * @returns {Promise} A promise that is resolved with a newly-created\n     *     configuration object or with the current with the update.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (attrs\n    /*: { [key: string]: any }*/\n    , masterKeyOnlyFlags\n    /*: { [key: string]: any }*/\n    ) {\n      var controller = _CoreManager.default.getConfigController(); // To avoid a mismatch with the local and the cloud config we get a new version\n\n\n      return controller.save(attrs, masterKeyOnlyFlags).then(function () {\n        return controller.get({\n          useMasterKey: true\n        });\n      }, function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    /**\n     * Used for testing\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentConfig = null;\n    }\n  }]);\n  return ParseConfig;\n}();\n\nvar currentConfig = null;\nvar CURRENT_CONFIG_KEY = 'currentConfig';\n\nfunction decodePayload(data) {\n  try {\n    var json = JSON.parse(data);\n\n    if (json && (0, _typeof2.default)(json) === 'object') {\n      return (0, _decode.default)(json);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nvar DefaultController = {\n  current: function () {\n    if (currentConfig) {\n      return currentConfig;\n    }\n\n    var config = new ParseConfig();\n\n    var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);\n\n    if (!_Storage.default.async()) {\n      var configData = _Storage.default.getItem(storagePath);\n\n      if (configData) {\n        var attributes = decodePayload(configData);\n\n        if (attributes) {\n          config.attributes = attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    } // Return a promise for async storage controllers\n\n\n    return _Storage.default.getItemAsync(storagePath).then(function (configData) {\n      if (configData) {\n        var _attributes = decodePayload(configData);\n\n        if (_attributes) {\n          config.attributes = _attributes;\n          currentConfig = config;\n        }\n      }\n\n      return config;\n    });\n  },\n  get: function () {\n    var options\n    /*: RequestOptions*/\n    = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', 'config', {}, options).then(function (response) {\n      if (!response || !response.params) {\n        var error = new _ParseError.default(_ParseError.default.INVALID_JSON, 'Config JSON response invalid.');\n        return _promise.default.reject(error);\n      }\n\n      var config = new ParseConfig();\n      config.attributes = {};\n\n      for (var attr in response.params) {\n        config.attributes[attr] = (0, _decode.default)(response.params[attr]);\n      }\n\n      currentConfig = config;\n      return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function () {\n        return config;\n      });\n    });\n  },\n  save: function (attrs\n  /*: { [key: string]: any }*/\n  , masterKeyOnlyFlags\n  /*: { [key: string]: any }*/\n  ) {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var encodedAttrs = {};\n\n    for (var _key in attrs) {\n      encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);\n    }\n\n    return RESTController.request('PUT', 'config', {\n      params: encodedAttrs,\n      masterKeyOnly: masterKeyOnlyFlags\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      if (response && response.result) {\n        return _promise.default.resolve();\n      }\n\n      var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, 'Error occured updating Config.');\n      return _promise.default.reject(error);\n    });\n  }\n};\n\n_CoreManager.default.setConfigController(DefaultController);\n\nvar _default = ParseConfig;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}