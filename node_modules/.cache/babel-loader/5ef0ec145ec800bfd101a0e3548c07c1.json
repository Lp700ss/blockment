{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWindowMetadata = void 0;\n\nconst window_getters_1 = require(\"@walletconnect/window-getters\");\n\nfunction getWindowMetadata() {\n  let doc;\n  let loc;\n\n  try {\n    doc = window_getters_1.getDocumentOrThrow();\n    loc = window_getters_1.getLocationOrThrow();\n  } catch (e) {\n    return null;\n  }\n\n  function getIcons() {\n    const links = doc.getElementsByTagName(\"link\");\n    const icons = [];\n\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i];\n      const rel = link.getAttribute(\"rel\");\n\n      if (rel) {\n        if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n          const href = link.getAttribute(\"href\");\n\n          if (href) {\n            if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n              let absoluteHref = loc.protocol + \"//\" + loc.host;\n\n              if (href.indexOf(\"/\") === 0) {\n                absoluteHref += href;\n              } else {\n                const path = loc.pathname.split(\"/\");\n                path.pop();\n                const finalPath = path.join(\"/\");\n                absoluteHref += finalPath + \"/\" + href;\n              }\n\n              icons.push(absoluteHref);\n            } else if (href.indexOf(\"//\") === 0) {\n              const absoluteUrl = loc.protocol + href;\n              icons.push(absoluteUrl);\n            } else {\n              icons.push(href);\n            }\n          }\n        }\n      }\n    }\n\n    return icons;\n  }\n\n  function getWindowMetadataOfAny() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const metaTags = doc.getElementsByTagName(\"meta\");\n\n    for (let i = 0; i < metaTags.length; i++) {\n      const tag = metaTags[i];\n      const attributes = [\"itemprop\", \"property\", \"name\"].map(target => tag.getAttribute(target)).filter(attr => {\n        if (attr) {\n          return args.includes(attr);\n        }\n\n        return false;\n      });\n\n      if (attributes.length && attributes) {\n        const content = tag.getAttribute(\"content\");\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n\n    return \"\";\n  }\n\n  function getName() {\n    let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n\n    if (!name) {\n      name = doc.title;\n    }\n\n    return name;\n  }\n\n  function getDescription() {\n    const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n    return description;\n  }\n\n  const name = getName();\n  const description = getDescription();\n  const url = loc.origin;\n  const icons = getIcons();\n  const meta = {\n    description,\n    url,\n    icons,\n    name\n  };\n  return meta;\n}\n\nexports.getWindowMetadata = getWindowMetadata;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = require(\"@walletconnect/window-getters\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    }\n    catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for (let i = 0; i < links.length; i++) {\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 &&\n                            href.toLowerCase().indexOf(\"http:\") === -1 &&\n                            href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            }\n                            else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        }\n                        else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        }\n                        else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for (let i = 0; i < metaTags.length; i++) {\n            const tag = metaTags[i];\n            const attributes = [\"itemprop\", \"property\", \"name\"]\n                .map((target) => tag.getAttribute(target))\n                .filter((attr) => {\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name,\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}