{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends events_1.EventEmitter {\n  emit(type) {\n    let doError = type === 'error';\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === 'function') {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.default = SafeEventEmitter;","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAOA,SAAS,SAAT,CAAwC,OAAxC,EAAgF,OAAhF,EAA4F,IAA5F,EAAmG;EACjG,IAAI;IACF,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,OAAvB,EAAgC,IAAhC;EACD,CAFD,CAEE,OAAO,GAAP,EAAY;IACZ;IACA,UAAU,CAAC,MAAK;MACd,MAAM,GAAN;IACD,CAFS,CAAV;EAGD;AACF;;AAED,SAAS,UAAT,CAAwB,GAAxB,EAAgC;EAC9B,MAAM,CAAC,GAAG,GAAG,CAAC,MAAd;EACA,MAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,CAAV,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;IAC7B,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAG,CAAC,CAAD,CAAb;EACD;;EACD,OAAO,IAAP;AACD;;AAED,MAAqB,gBAArB,SAA8C,QAAA,CAAA,YAA9C,CAA0D;EACxD,IAAI,CAAE,IAAF,EAA8B;IAChC,IAAI,OAAO,GAAG,IAAI,KAAK,OAAvB;IAEA,MAAM,MAAM,GAAc,KAAa,OAAvC;;IACA,IAAI,MAAM,KAAK,SAAf,EAA0B;MACxB,OAAO,GAAG,OAAO,IAAI,MAAM,CAAC,KAAP,KAAiB,SAAtC;IACD,CAFD,MAEO,IAAI,CAAC,OAAL,EAAc;MACnB,OAAO,KAAP;IACD,CAR+B,CAUhC;;;IAVgC,kCAAX,IAAW;MAAX,IAAW;IAAA;;IAWhC,IAAI,OAAJ,EAAa;MACX,IAAI,EAAJ;;MACA,IAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;QACnB,CAAC,EAAD,IAAO,IAAP;MACD;;MACD,IAAI,EAAE,YAAY,KAAlB,EAAyB;QACvB;QACA;QACA,MAAM,EAAN,CAHuB,CAGb;MACX,CATU,CAUX;;;MACA,MAAM,GAAG,GAAG,IAAI,KAAJ,CAAU,mBAAmB,EAAE,GAAG,KAAK,EAAE,CAAC,OAAO,GAAlB,GAAwB,EAAE,EAAzD,CAAZ;MACC,GAAW,CAAC,OAAZ,GAAsB,EAAtB;MACD,MAAM,GAAN,CAbW,CAaA;IACZ;;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAD,CAAtB;;IAEA,IAAI,OAAO,KAAK,SAAhB,EAA2B;MACzB,OAAO,KAAP;IACD;;IAED,IAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;MACjC,SAAS,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,CAAT;IACD,CAFD,MAEO;MACL,MAAM,GAAG,GAAG,OAAO,CAAC,MAApB;MACA,MAAM,SAAS,GAAG,UAAU,CAAC,OAAD,CAA5B;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,IAAI,CAA9B,EAAiC;QAC/B,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,EAAe,IAAf,EAAqB,IAArB,CAAT;MACD;IACF;;IAED,OAAO,IAAP;EACD;;AA7CuD;;AAA1D,OAAA,CAAA,OAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.default = SafeEventEmitter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}