{"ast":null,"code":"import * as windowMetadata from \"@walletconnect/window-metadata\";\nimport * as windowGetters from \"@walletconnect/window-getters\";\nimport { detect } from \"detect-browser\";\nexport function detectEnv(userAgent) {\n  return detect(userAgent);\n}\nexport function detectOS() {\n  const env = detectEnv();\n  return env && env.os ? env.os : undefined;\n}\nexport function isAndroid() {\n  const os = detectOS();\n  return os ? os.toLowerCase().includes(\"android\") : false;\n}\nexport function isIOS() {\n  const os = detectOS();\n  return os ? os.toLowerCase().includes(\"ios\") || os.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1 : false;\n}\nexport function isMobile() {\n  const os = detectOS();\n  return os ? isAndroid() || isIOS() : false;\n}\nexport function isNode() {\n  const env = detectEnv();\n  const result = env && env.name ? env.name.toLowerCase() === \"node\" : false;\n  return result;\n}\nexport function isBrowser() {\n  const result = !isNode() && !!getNavigator();\n  return result;\n}\nexport const getFromWindow = windowGetters.getFromWindow;\nexport const getFromWindowOrThrow = windowGetters.getFromWindowOrThrow;\nexport const getDocumentOrThrow = windowGetters.getDocumentOrThrow;\nexport const getDocument = windowGetters.getDocument;\nexport const getNavigatorOrThrow = windowGetters.getNavigatorOrThrow;\nexport const getNavigator = windowGetters.getNavigator;\nexport const getLocationOrThrow = windowGetters.getLocationOrThrow;\nexport const getLocation = windowGetters.getLocation;\nexport const getCryptoOrThrow = windowGetters.getCryptoOrThrow;\nexport const getCrypto = windowGetters.getCrypto;\nexport const getLocalStorageOrThrow = windowGetters.getLocalStorageOrThrow;\nexport const getLocalStorage = windowGetters.getLocalStorage;\nexport function getClientMeta() {\n  return windowMetadata.getWindowMetadata();\n}","map":{"version":3,"sources":["../../src/browser.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,cAAZ,MAAgC,gCAAhC;AACA,OAAO,KAAK,aAAZ,MAA+B,+BAA/B;AACA,SACE,MADF,QAOO,gBAPP;AASA,OAAM,SAAU,SAAV,CACJ,SADI,EACc;EAElB,OAAO,MAAM,CAAC,SAAD,CAAb;AACD;AAED,OAAM,SAAU,QAAV,GAAkB;EACtB,MAAM,GAAG,GAAG,SAAS,EAArB;EACA,OAAO,GAAG,IAAI,GAAG,CAAC,EAAX,GAAgB,GAAG,CAAC,EAApB,GAAyB,SAAhC;AACD;AAED,OAAM,SAAU,SAAV,GAAmB;EACvB,MAAM,EAAE,GAAG,QAAQ,EAAnB;EACA,OAAO,EAAE,GAAG,EAAE,CAAC,WAAH,GAAiB,QAAjB,CAA0B,SAA1B,CAAH,GAA0C,KAAnD;AACD;AAED,OAAM,SAAU,KAAV,GAAe;EACnB,MAAM,EAAE,GAAG,QAAQ,EAAnB;EACA,OAAO,EAAE,GACL,EAAE,CAAC,WAAH,GAAiB,QAAjB,CAA0B,KAA1B,KACG,EAAE,CAAC,WAAH,GAAiB,QAAjB,CAA0B,KAA1B,KAAoC,SAAS,CAAC,cAAV,GAA2B,CAF7D,GAGL,KAHJ;AAID;AAED,OAAM,SAAU,QAAV,GAAkB;EACtB,MAAM,EAAE,GAAG,QAAQ,EAAnB;EACA,OAAO,EAAE,GAAG,SAAS,MAAM,KAAK,EAAvB,GAA4B,KAArC;AACD;AAED,OAAM,SAAU,MAAV,GAAgB;EACpB,MAAM,GAAG,GAAG,SAAS,EAArB;EACA,MAAM,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAX,GAAkB,GAAG,CAAC,IAAJ,CAAS,WAAT,OAA2B,MAA7C,GAAsD,KAArE;EACA,OAAO,MAAP;AACD;AAED,OAAM,SAAU,SAAV,GAAmB;EACvB,MAAM,MAAM,GAAG,CAAC,MAAM,EAAP,IAAa,CAAC,CAAC,YAAY,EAA1C;EACA,OAAO,MAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAG,aAAa,CAAC,aAApC;AAEP,OAAO,MAAM,oBAAoB,GAAG,aAAa,CAAC,oBAA3C;AAEP,OAAO,MAAM,kBAAkB,GAAG,aAAa,CAAC,kBAAzC;AAEP,OAAO,MAAM,WAAW,GAAG,aAAa,CAAC,WAAlC;AAEP,OAAO,MAAM,mBAAmB,GAAG,aAAa,CAAC,mBAA1C;AAEP,OAAO,MAAM,YAAY,GAAG,aAAa,CAAC,YAAnC;AAEP,OAAO,MAAM,kBAAkB,GAAG,aAAa,CAAC,kBAAzC;AAEP,OAAO,MAAM,WAAW,GAAG,aAAa,CAAC,WAAlC;AAEP,OAAO,MAAM,gBAAgB,GAAG,aAAa,CAAC,gBAAvC;AAEP,OAAO,MAAM,SAAS,GAAG,aAAa,CAAC,SAAhC;AAEP,OAAO,MAAM,sBAAsB,GAAG,aAAa,CAAC,sBAA7C;AAEP,OAAO,MAAM,eAAe,GAAG,aAAa,CAAC,eAAtC;AAEP,OAAM,SAAU,aAAV,GAAuB;EAC3B,OAAO,cAAc,CAAC,iBAAf,EAAP;AACD","sourceRoot":"","sourcesContent":["import * as windowMetadata from \"@walletconnect/window-metadata\";\nimport * as windowGetters from \"@walletconnect/window-getters\";\nimport { detect, } from \"detect-browser\";\nexport function detectEnv(userAgent) {\n    return detect(userAgent);\n}\nexport function detectOS() {\n    const env = detectEnv();\n    return env && env.os ? env.os : undefined;\n}\nexport function isAndroid() {\n    const os = detectOS();\n    return os ? os.toLowerCase().includes(\"android\") : false;\n}\nexport function isIOS() {\n    const os = detectOS();\n    return os\n        ? os.toLowerCase().includes(\"ios\") ||\n            (os.toLowerCase().includes(\"mac\") && navigator.maxTouchPoints > 1)\n        : false;\n}\nexport function isMobile() {\n    const os = detectOS();\n    return os ? isAndroid() || isIOS() : false;\n}\nexport function isNode() {\n    const env = detectEnv();\n    const result = env && env.name ? env.name.toLowerCase() === \"node\" : false;\n    return result;\n}\nexport function isBrowser() {\n    const result = !isNode() && !!getNavigator();\n    return result;\n}\nexport const getFromWindow = windowGetters.getFromWindow;\nexport const getFromWindowOrThrow = windowGetters.getFromWindowOrThrow;\nexport const getDocumentOrThrow = windowGetters.getDocumentOrThrow;\nexport const getDocument = windowGetters.getDocument;\nexport const getNavigatorOrThrow = windowGetters.getNavigatorOrThrow;\nexport const getNavigator = windowGetters.getNavigator;\nexport const getLocationOrThrow = windowGetters.getLocationOrThrow;\nexport const getLocation = windowGetters.getLocation;\nexport const getCryptoOrThrow = windowGetters.getCryptoOrThrow;\nexport const getCrypto = windowGetters.getCrypto;\nexport const getLocalStorageOrThrow = windowGetters.getLocalStorageOrThrow;\nexport const getLocalStorage = windowGetters.getLocalStorage;\nexport function getClientMeta() {\n    return windowMetadata.getWindowMetadata();\n}\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"module"}