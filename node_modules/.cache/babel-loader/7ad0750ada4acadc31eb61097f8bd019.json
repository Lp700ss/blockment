{"ast":null,"code":"export function promisify(originalFn, thisArg) {\n  const promisifiedFunction = async function () {\n    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      callArgs[_key] = arguments[_key];\n    }\n\n    return new Promise((resolve, reject) => {\n      const callback = (err, data) => {\n        if (err === null || typeof err === \"undefined\") {\n          reject(err);\n        }\n\n        resolve(data);\n      };\n\n      originalFn.apply(thisArg, [...callArgs, callback]);\n    });\n  };\n\n  return promisifiedFunction;\n}\nexport function formatRpcError(error) {\n  const message = error.message || \"Failed or Rejected Request\";\n  let code = -32000;\n\n  if (error && !error.code) {\n    switch (message) {\n      case \"Parse error\":\n        code = -32700;\n        break;\n\n      case \"Invalid request\":\n        code = -32600;\n        break;\n\n      case \"Method not found\":\n        code = -32601;\n        break;\n\n      case \"Invalid params\":\n        code = -32602;\n        break;\n\n      case \"Internal error\":\n        code = -32603;\n        break;\n\n      default:\n        code = -32000;\n        break;\n    }\n  }\n\n  const result = {\n    code,\n    message\n  };\n  return result;\n}","map":{"version":3,"sources":["../../src/payload.ts"],"names":[],"mappings":"AAMA,OAAM,SAAU,SAAV,CACJ,UADI,EAEJ,OAFI,EAES;EAEb,MAAM,mBAAmB,GAAG,kBAEkC;IAAA,kCADzD,QACyD;MADzD,QACyD;IAAA;;IAC5D,OAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;MACrC,MAAM,QAAQ,GAAG,CACf,GADe,EAEf,IAFe,KAGb;QACF,IAAI,GAAG,KAAK,IAAR,IAAgB,OAAO,GAAP,KAAe,WAAnC,EAAgD;UAC9C,MAAM,CAAC,GAAD,CAAN;QACD;;QACD,OAAO,CAAC,IAAD,CAAP;MACD,CARD;;MASA,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAA0B,CAAC,GAAG,QAAJ,EAAc,QAAd,CAA1B;IACD,CAXM,CAAP;EAYD,CAfD;;EAgBA,OAAO,mBAAP;AACD;AAED,OAAM,SAAU,cAAV,CACJ,KADI,EACgC;EAEpC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAN,IAAiB,4BAAjC;EACA,IAAI,IAAI,GAAG,CAAC,KAAZ;;EACA,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,IAApB,EAA0B;IACxB,QAAQ,OAAR;MACE,KAAK,aAAL;QACE,IAAI,GAAG,CAAC,KAAR;QACA;;MACF,KAAK,iBAAL;QACE,IAAI,GAAG,CAAC,KAAR;QACA;;MACF,KAAK,kBAAL;QACE,IAAI,GAAG,CAAC,KAAR;QACA;;MACF,KAAK,gBAAL;QACE,IAAI,GAAG,CAAC,KAAR;QACA;;MACF,KAAK,gBAAL;QACE,IAAI,GAAG,CAAC,KAAR;QACA;;MACF;QACE,IAAI,GAAG,CAAC,KAAR;QACA;IAlBJ;EAoBD;;EACD,MAAM,MAAM,GAAG;IACb,IADa;IAEb;EAFa,CAAf;EAIA,OAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["export function promisify(originalFn, thisArg) {\n    const promisifiedFunction = async (...callArgs) => {\n        return new Promise((resolve, reject) => {\n            const callback = (err, data) => {\n                if (err === null || typeof err === \"undefined\") {\n                    reject(err);\n                }\n                resolve(data);\n            };\n            originalFn.apply(thisArg, [...callArgs, callback]);\n        });\n    };\n    return promisifiedFunction;\n}\nexport function formatRpcError(error) {\n    const message = error.message || \"Failed or Rejected Request\";\n    let code = -32000;\n    if (error && !error.code) {\n        switch (message) {\n            case \"Parse error\":\n                code = -32700;\n                break;\n            case \"Invalid request\":\n                code = -32600;\n                break;\n            case \"Method not found\":\n                code = -32601;\n                break;\n            case \"Invalid params\":\n                code = -32602;\n                break;\n            case \"Internal error\":\n                code = -32603;\n                break;\n            default:\n                code = -32000;\n                break;\n        }\n    }\n    const result = {\n        code,\n        message,\n    };\n    return result;\n}\n//# sourceMappingURL=payload.js.map"]},"metadata":{},"sourceType":"module"}