{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\n\nconst classes_1 = require(\"./classes\");\n\nconst utils_1 = require(\"./utils\");\n\nconst error_constants_1 = require(\"./error-constants\");\n\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n\n      const {\n        code\n      } = opts;\n\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n\n      return getEthJsonRpcError(code, opts);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n\n      const {\n        code,\n        message,\n        data\n      } = opts;\n\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n\n      return [message || undefined, data];\n    }\n  }\n\n  return [];\n}","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethErrors = void 0;\nconst classes_1 = require(\"./classes\");\nconst utils_1 = require(\"./utils\");\nconst error_constants_1 = require(\"./error-constants\");\nexports.ethErrors = {\n    rpc: {\n        /**\n         * Get a JSON RPC 2.0 Parse (-32700) error.\n         */\n        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n         */\n        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n        /**\n         * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n         */\n        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n        /**\n         * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n         */\n        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n        /**\n         * Get a JSON RPC 2.0 Internal (-32603) error.\n         */\n        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n        /**\n         * Get a JSON RPC 2.0 Server error.\n         * Permits integer error codes in the [ -32099 <= -32005 ] range.\n         * Codes -32000 through -32004 are reserved by EIP-1474.\n         */\n        server: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum RPC Server errors must provide single object argument.');\n            }\n            const { code } = opts;\n            if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n                throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            }\n            return getEthJsonRpcError(code, opts);\n        },\n        /**\n         * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n         */\n        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n         */\n        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n        /**\n         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n         */\n        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n        /**\n         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n         */\n        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n        /**\n         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n         */\n        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n        /**\n         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n         */\n        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),\n    },\n    provider: {\n        /**\n         * Get an Ethereum Provider User Rejected Request (4001) error.\n         */\n        userRejectedRequest: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unauthorized (4100) error.\n         */\n        unauthorized: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n        },\n        /**\n         * Get an Ethereum Provider Unsupported Method (4200) error.\n         */\n        unsupportedMethod: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n        },\n        /**\n         * Get an Ethereum Provider Not Connected (4900) error.\n         */\n        disconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n        },\n        /**\n         * Get an Ethereum Provider Chain Not Connected (4901) error.\n         */\n        chainDisconnected: (arg) => {\n            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n        },\n        /**\n         * Get a custom Ethereum Provider error.\n         */\n        custom: (opts) => {\n            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n                throw new Error('Ethereum Provider custom errors must provide single object argument.');\n            }\n            const { code, message, data } = opts;\n            if (!message || typeof message !== 'string') {\n                throw new Error('\"message\" must be a nonempty string');\n            }\n            return new classes_1.EthereumProviderError(code, message, data);\n        },\n    },\n};\n// Internal\nfunction getEthJsonRpcError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction getEthProviderError(code, arg) {\n    const [message, data] = parseOpts(arg);\n    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\nfunction parseOpts(arg) {\n    if (arg) {\n        if (typeof arg === 'string') {\n            return [arg];\n        }\n        else if (typeof arg === 'object' && !Array.isArray(arg)) {\n            const { message, data } = arg;\n            if (message && typeof message !== 'string') {\n                throw new Error('Must specify string message.');\n            }\n            return [message || undefined, data];\n        }\n    }\n    return [];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBb0U7QUFDcEUsbUNBQTZDO0FBQzdDLHVEQUErQztBQWVsQyxRQUFBLFNBQVMsR0FBRztJQUN2QixHQUFHLEVBQUU7UUFFSDs7V0FFRztRQUNILEtBQUssRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUNyRCw0QkFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUMxQjtRQUVEOztXQUVHO1FBQ0gsY0FBYyxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQzlELDRCQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQ25DO1FBRUQ7O1dBRUc7UUFDSCxhQUFhLEVBQUUsQ0FBSSxHQUFxQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDN0QsNEJBQVUsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FDbEM7UUFFRDs7V0FFRztRQUNILGNBQWMsRUFBRSxDQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUM5RCw0QkFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUNuQztRQUVEOztXQUVHO1FBQ0gsUUFBUSxFQUFFLENBQUksR0FBcUIsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQ3hELDRCQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQzdCO1FBRUQ7Ozs7V0FJRztRQUNILE1BQU0sRUFBRSxDQUFJLElBQTJCLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7YUFDcEY7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"]},"metadata":{},"sourceType":"script"}