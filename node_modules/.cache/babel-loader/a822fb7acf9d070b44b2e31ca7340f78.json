{"ast":null,"code":"class NetworkMonitor {\n  constructor() {\n    this._eventEmitters = [];\n\n    if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n      window.addEventListener(\"online\", () => this.trigger(\"online\"));\n      window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n    }\n  }\n\n  on(event, callback) {\n    this._eventEmitters.push({\n      event,\n      callback\n    });\n  }\n\n  trigger(event) {\n    let eventEmitters = [];\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n\n    eventEmitters.forEach(eventEmitter => {\n      eventEmitter.callback();\n    });\n  }\n\n}\n\nexport default NetworkMonitor;","map":{"version":3,"sources":["../../src/network.ts"],"names":[],"mappings":"AAIA,MAAM,cAAN,CAAoB;EAGlB,WAAA,GAAA;IACE,KAAK,cAAL,GAAsB,EAAtB;;IAEA,IAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAQ,MAAc,CAAC,gBAAvB,KAA4C,WAAjF,EAA8F;MAC5F,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM,KAAK,OAAL,CAAa,QAAb,CAAxC;MACA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,MAAM,KAAK,OAAL,CAAa,SAAb,CAAzC;IACD;EACF;;EAEM,EAAE,CAAC,KAAD,EAAsB,QAAtB,EAA0C;IACjD,KAAK,cAAL,CAAoB,IAApB,CAAyB;MACvB,KADuB;MAEvB;IAFuB,CAAzB;EAID;;EAEM,OAAO,CAAC,KAAD,EAAoB;IAChC,IAAI,aAAa,GAA2B,EAA5C;;IAEA,IAAI,KAAJ,EAAW;MACT,aAAa,GAAG,KAAK,cAAL,CAAoB,MAApB,CACb,YAAD,IAAwC,YAAY,CAAC,KAAb,KAAuB,KADjD,CAAhB;IAGD;;IAED,aAAa,CAAC,OAAd,CAAuB,YAAD,IAAuC;MAC3D,YAAY,CAAC,QAAb;IACD,CAFD;EAGD;;AA/BiB;;AAkCpB,eAAe,cAAf","sourceRoot":"","sourcesContent":["class NetworkMonitor {\n    constructor() {\n        this._eventEmitters = [];\n        if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n            window.addEventListener(\"online\", () => this.trigger(\"online\"));\n            window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n        }\n    }\n    on(event, callback) {\n        this._eventEmitters.push({\n            event,\n            callback,\n        });\n    }\n    trigger(event) {\n        let eventEmitters = [];\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            eventEmitter.callback();\n        });\n    }\n}\nexport default NetworkMonitor;\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"module"}