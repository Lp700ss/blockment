{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== 'function') {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JsonRpcEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== 'string') {\n      const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, {\n        request: callerReq\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: '2.0',\n        error\n      });\n    }\n\n    const req = Object.assign({}, callerReq);\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = eth_rpc_errors_1.serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JsonRpcEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = eth_rpc_errors_1.serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== 'function') {\n              end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` + `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, {\n                request: req\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!('result' in res) && !('error' in res)) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n\n    if (!isComplete) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n  }\n\n}\n\nexports.JsonRpcEngine = JsonRpcEngine;\n\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"sources":["../src/JsonRpcEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}